<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CustomInk Technology Blog</title>
    <description></description>
    <link>http://technology.customink.com/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Ruby For Good</title>
        <description>&lt;p&gt;This weekend I had the pleasure of co-hosting &lt;a href=&quot;http://rubyforgood.com/&quot;&gt;Ruby For Good&lt;/a&gt;, a conference that brings programmers together to work on projects for a variety of charities and non-profit organizations. This year, adorable kittens were involved.
&lt;/br&gt;
&lt;img src=&quot;/assets/content/ruby_for_good_2015/kitten-8d2e29e35ea0d24c1d931272d13b6883.jpg&quot; class=&quot;tb-Img tb-Img--responsive-ctr&quot; alt=&quot;cute kitten&quot; /&gt;&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;how-it-works&quot;&gt;How it Works&lt;/h2&gt;

&lt;p&gt;Conference attendees stayed in the dorms at &lt;a href=&quot;http://www.gmu.edu/&quot;&gt;George Mason University&lt;/a&gt; for three days. They assembled into teams and worked on projects throughout the day. They were also responsible for preparing meals for everyone. In the evening, folks relaxed by playing board games and hanging out.&lt;/br&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/content/ruby_for_good_2015/kitchen-8e249a504980fff4ad03d9230bcb8f82.jpg&quot; class=&quot;tb-Img tb-Img--responsive-ctr&quot; alt=&quot;kitchen duty&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Although the format is very simple, attendees told us they got a lot out of participating, regardless of their experience levels. We are still going through the feedback surveys but here&amp;#39;s a great blog post by one of this year&amp;#39;s do-gooders &lt;a href=&quot;http://rolentle.com/ruby-for-good/&quot;&gt;http://rolentle.com/ruby-for-good/&lt;/a&gt;.
&lt;/br&gt;
&lt;img src=&quot;/assets/content/ruby_for_good_2015/pairing-aa59a4726c5e328c98e57a9652eb8878.jpg&quot; class=&quot;tb-Img tb-Img--responsive-ctr&quot; alt=&quot;pair programming&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;this-year&amp;#39;s-projects&quot;&gt;This Year&amp;#39;s Projects&lt;/h2&gt;

&lt;p&gt;This year&amp;#39;s projects were all really exciting. The work ranged from building an entirely new web presence, to updating an existing Rails application, to contributing to open source projects.  Here&amp;#39;s the list of groups we worked with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.hsfc.org/&quot;&gt;Humane Society of Fairfax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.thegrowhaus.org/&quot;&gt;Denver GrowHaus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.worldwildlife.org/&quot;&gt;World Wildlife Fund&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.purpledoorcoffee.com/&quot;&gt;Purple Door&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ysiadf/AllIncomeFoods/&quot;&gt;All Income Foods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.publicartcommons.org/&quot;&gt;Balitmore Arts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.usvotefoundation.org/&quot;&gt;US Vote Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rspec/rspec-rails/&quot;&gt;RSpec-Rails&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It&amp;#39;s so cool to hear a junior developer talk about their opportunity to contribute to something as widely used as Rspec!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/content/ruby_for_good_2015/group-hug-25000a0acc95d2b3bc1818db24f10cf5.jpg&quot; class=&quot;tb-Img tb-Img--responsive-ctr&quot; alt=&quot;group hug&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;you-can-get-involved-today!&quot;&gt;You Can Get Involved Today!&lt;/h2&gt;

&lt;p&gt;Contribute to next year&amp;#39;s Ruby For Good by &lt;a href=&quot;https://www.booster.com/rubyforgood&quot;&gt;purchasing a t-shirt&lt;/a&gt; - proceeds go to scholarships for future attendees.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/content/ruby_for_good_2015/group-heart-b6264c5e1c1654feace3821361db4cbe.jpg&quot; class=&quot;tb-Img tb-Img--responsive-ctr&quot; alt=&quot;group heart&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 05 Aug 2015 00:00:00 -0400</pubDate>
        <link>http://technology.customink.com//blog/2015/08/05/ruby-for-good</link>
        <guid isPermaLink="true">http://technology.customink.com//blog/2015/08/05/ruby-for-good</guid>
      </item>
    
      <item>
        <title>Bundler Inline Gemfile Dependencies</title>
        <description>&lt;p&gt;If you haven&amp;#39;t noticed, the &lt;a href=&quot;http://bundler.io/blog/2015/06/24/version-1-10-released.html&quot;&gt;Bundler&lt;/a&gt; team has been on a tear lately. It&amp;#39;s hard
to keep up with the pace of the 1.10.x releases. Along with improvements, they have been adding features. One that you might have missed is the new &lt;a href=&quot;https://github.com/bundler/bundler/blob/master/lib/bundler/inline.rb&quot;&gt;bundler/inline&lt;/a&gt; and it&amp;#39;s &lt;code&gt;gemfile&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;Bundler Inline allows you declare your gem dependencies &amp;quot;inline&amp;quot; instead of a Gemfile. This is perfect for single file scripts. Everything can be contained in a single file, no Gemfile, no &lt;code&gt;bundle install&lt;/code&gt;, and you can run your script without a prefixing it with &lt;code&gt;bundle exec&lt;/code&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Recently at &lt;a href=&quot;http://rubyloco.com&quot;&gt;RubyLoCo Hack Night&lt;/a&gt;, we were challenged with creating an ASCII flag. Given a &lt;a href=&quot;https://github.com/rubyloco/hack-night/blob/master/meetings/2015-07-13/flag.rb&quot;&gt;starter script&lt;/a&gt; that printed out a simple ASCII art American flag, our  first thought was to print it in color. There is a gem for that named &lt;a href=&quot;https://github.com/fazibear/colorize&quot;&gt;colorize&lt;/a&gt;. But how do we install the gem and require it in our script? We wouldn&amp;#39;t be so pedestrian as to actually run &lt;code&gt;gem install colorize&lt;/code&gt;. We are proud bundlers.&lt;/p&gt;

&lt;p&gt;&lt;img src=/assets/content/bundler_inline_gemfile/pre_flag-bb6cd10df42a3253a340d2f405360d68.png alt=&quot;Default Flag&quot;&gt;&lt;/p&gt;

&lt;h2 id=&quot;inline-gemfile&quot;&gt;Inline Gemfile&lt;/h2&gt;

&lt;p&gt;For a simple script, creating a Gemfile is too much ceremony. The new &lt;a href=&quot;https://github.com/bundler/bundler/blob/master/lib/bundler/inline.rb&quot;&gt;Bundler Inline&lt;/a&gt; will help us. We require &lt;code&gt;bundler/inline&lt;/code&gt; and then pass a block to &lt;code&gt;gemfile&lt;/code&gt;. Inside the block, we use the traditional Bundler DSL.&lt;/p&gt;

&lt;p&gt;The gems declared inside the &lt;code&gt;gemfile&lt;/code&gt; block will automatically be required into our script. You can still pass the option to &lt;code&gt;require: false&lt;/code&gt;. At the top of our script, we declare our gemfile &lt;em&gt;inline&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env ruby&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;bundler/inline&#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;gemfile&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;https://rubygems.org&#39;&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;colorize&#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By default, running your script will not install gems to your system. But, we can pass &amp;quot;true&amp;quot; as the first argument to check and install gems when our script is run.&lt;/p&gt;

&lt;p&gt;Because this is all inline, we do not need to prefix our command line with &lt;code&gt;bundle exec&lt;/code&gt;. We can just run our script, Bundler will install the required gems and require them for us. Now that we have required the colorize gem, our strings have color changing methods like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;* * * * * * &#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;on_blue&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;0000000000000000000000000000000000000000000000000000000&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;on_white&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;1111111111111111111111111111111111111111111111111111111&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;on_red&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And now... With the help of Bundler... And colorize... We present &lt;strong&gt;Happy Birthday America&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;&lt;img src=/assets/content/bundler_inline_gemfile/post_flag-baff153607eb0b1eaa8b2153fdee3c18.png alt=&quot;Colored Flag&quot;&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-did-we-accomplish?&quot;&gt;What did we accomplish?&lt;/h2&gt;

&lt;p&gt;We started with an example script that printed an American flag in black and white. We wanted to make it red, white and blue with the colorize gem. We did not want to add a Gemfile to our directory for this single file script. We declared our gem dependencies inline using the new &lt;code&gt;bundler/inline&lt;/code&gt;. Now,  our gems will install when we run the script.&lt;/p&gt;

&lt;h2 id=&quot;final-script&quot;&gt;Final Script&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#!/bin/env ruby&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env ruby&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;bundler/inline&#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;gemfile&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;https://rubygems.org&#39;&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;colorize&#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;* * * * * * &#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;on_blue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;1111111111111111111111111111111111111111111&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;on_red&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39; * * * * *  &#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;0000000000000000000000000000000000000000000&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;on_white&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;* * * * * * &#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;1111111111111111111111111111111111111111111&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;on_red&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39; * * * * *  &#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;0000000000000000000000000000000000000000000&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;on_white&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;* * * * * * &#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;1111111111111111111111111111111111111111111&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;on_red&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39; * * * * *  &#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;0000000000000000000000000000000000000000000&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;on_white&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;* * * * * * &#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;1111111111111111111111111111111111111111111&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;on_red&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;0000000000000000000000000000000000000000000000000000000&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;on_white&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;1111111111111111111111111111111111111111111111111111111&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;on_red&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;0000000000000000000000000000000000000000000000000000000&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;on_white&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;1111111111111111111111111111111111111111111111111111111&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;on_red&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;0000000000000000000000000000000000000000000000000000000&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;on_white&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;1111111111111111111111111111111111111111111111111111111&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;on_red&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;CustomInk is a proud supporter of &lt;a href=&quot;https://rubytogether.org/&quot;&gt;Ruby Together&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 17 Jul 2015 00:00:00 -0400</pubDate>
        <link>http://technology.customink.com//blog/2015/07/17/bundler-inline-gemfile-dependencies</link>
        <guid isPermaLink="true">http://technology.customink.com//blog/2015/07/17/bundler-inline-gemfile-dependencies</guid>
      </item>
    
      <item>
        <title>Colorized SQL Log Backport for ActiveRecord</title>
        <description>&lt;p&gt;One of the &lt;a href=&quot;https://github.com/rails/rails/pull/20607&quot;&gt;new features&lt;/a&gt; of Rails 5 will be granular SQL logging so you can easily see &lt;code&gt;SELECT&lt;/code&gt;, &lt;code&gt;INSERT&lt;/code&gt;, &lt;code&gt;UPDATE&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt;, and &lt;code&gt;TRANSACTION&lt;/code&gt; statements in your log. For example:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/content/colored-logging-9ee3a092515c98bb8649774403f380fc.png&quot; class=&quot;tb-Img tb-Img--fancy tb-Img--responsive-ctr&quot; alt=&quot;Colorized SQL Log Backport for Rails 5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But why let Rails 5 have all the fun? Today I created a gem that allows you to leverage this feature now. The gem is currently compatible and tested for Rails 3.2 to 4.2. Get it here and happy logging!&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/customink/activerecord-colored_log_subscriber&quot;&gt;https://github.com/customink/activerecord-colored_log_subscriber&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/customink/activerecord-colored_log_subscriber&quot;&gt;Colorized SQL Log Backport Gem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rails/rails/pull/20607&quot;&gt;Rails 5 Pull Request&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 16 Jul 2015 00:00:00 -0400</pubDate>
        <link>http://technology.customink.com//blog/2015/07/16/colorized-sql-log-backport-for-activerecord</link>
        <guid isPermaLink="true">http://technology.customink.com//blog/2015/07/16/colorized-sql-log-backport-for-activerecord</guid>
      </item>
    
      <item>
        <title>I have the PR!</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://blog.culturewaves.net/wp-content/uploads/2011/09/he-man-columbia.jpg&quot; class=&quot;tb-Img tb-Img--responsive&quot; alt=&quot;he-man&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We recently implemented a stronger, more active, pull request culture at CustomInk, as part of our deploy process. As you may already know, a pull request is a feature on &lt;a href=&quot;https://help.github.com/articles/using-pull-requests/&quot;&gt;Github&lt;/a&gt; that broadcasts to others that you would like to have your changes merged into an upstream project. [&lt;strong&gt;note:&lt;/strong&gt; &lt;em&gt;Turns out it&amp;#39;s built into git itself &lt;a href=&quot;http://git-scm.com/docs/git-request-pull&quot;&gt;http://git-scm.com/docs/git-request-pull&lt;/a&gt;&lt;/em&gt;]. We find that it&amp;#39;s great for learning what other engineering teams are working on. It&amp;#39;s also a great opportunity to share knowledge.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Case in point, this blog post is the direct result of that process. I was tasked with the simple job of updating a close button with something cleaner. Since we are no longer supporting Internet Explorer 8, why not do it with CSS and eliminate the need for an image file? Here&amp;#39;s how it evolved:&lt;/p&gt;

&lt;h3 id=&quot;first-iteration&quot;&gt;First Iteration&lt;/h3&gt;

&lt;p&gt;Give an anchor some dimensions, a border-radius of 50% so it&amp;#39;s round, and then position it absolutely in the corner of the box.
Position the &lt;code&gt;&amp;amp;times;&lt;/code&gt; icon inside the anchor and done!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot; http://qph.is.quoracdn.net/main-qimg-c987e575dca535436a6b811c189e7294?convert_to_webp=true&quot; class=&quot;tb-Img tb-Img--responsive-ctr&quot; alt=&quot;ship it squirrel&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;html&quot;&gt;HTML&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;removeItem&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;closer&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;amp;times;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;css&quot;&gt;CSS&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.removeItem&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;pointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;18px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;18px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;.closer&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;relative&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;-17px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;16px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;font-weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;700&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;http://sassmeister.com/gist/2f79c9b2dba3dd036327&quot;&gt;See it on SassMeister&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Simple enough - push changes and make a pull request so it can be deployed. Or at least I thought. Constructive advice in the pull request revealed that there&amp;#39;s at least one way to do this more cleanly. Here&amp;#39;s the second iteration:&lt;/p&gt;

&lt;h3 id=&quot;second-iteration&quot;&gt;Second Iteration&lt;/h3&gt;

&lt;p&gt;The second iteration took the content out of the span by way of the CSS &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/content&quot;&gt;content property&lt;/a&gt; (which uses the &lt;code&gt;::before&lt;/code&gt; or &lt;code&gt;::after&lt;/code&gt; pseudo-elements). We also replaced the &lt;code&gt;&amp;amp;times;&lt;/code&gt; with &lt;code&gt;\00d7&lt;/code&gt; because of how the symbol gets generated in CSS vs HTML. These pseudo-elements are handy because as their names suggest, they allow you to insert content before or after another HTML element.&lt;/p&gt;

&lt;p&gt;It&amp;#39;s just a small taste of what can be done with dynamic content. [&lt;strong&gt;note&lt;/strong&gt;: &lt;em&gt;I hear there&amp;#39;s an upcoming CustomInk blog post on with amazing examples of pseudo-generated content so keep your eyes peeled.&lt;/em&gt;]&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;removeItem&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;closer&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.removeItem&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;pointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;18px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;18px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;closer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;before&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;relative&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&#39;\00d7&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;-17px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;16px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;font-weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;700&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;http://sassmeister.com/gist/fb1b09a16dbc48155c7f&quot;&gt;See it on SassMeister&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;third-iteration&quot;&gt;Third Iteration&lt;/h3&gt;

&lt;p&gt;Pushing this new revision up to Github and requesting feedback led to the third and final version which didn&amp;#39;t even use the inner &lt;code&gt;p&lt;/code&gt; element (duh!). A &lt;code&gt;::before&lt;/code&gt; pseudo-element did the trick.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;removeItem&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.removeItem&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;pointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;18px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;18px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;&amp;amp;::before&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;relative&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&#39;\00d7&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;16px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;font-weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;700&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;http://sassmeister.com/gist/6eb615c1d07c9ccc6479&quot;&gt;See it on SassMeister&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;ending-notes&quot;&gt;Ending Notes&lt;/h3&gt;

&lt;p&gt;I hope this blog post encourages your team to start using pull requests not only for merging branches but also as a tool for sharing code and starting conversations. The experience was meaningful for me because my &lt;a href=&quot;https://www.youtube.com/watch?v=W2yIkDVs0cA&quot;&gt;grasshopper&lt;/a&gt; knowledge of CSS had me assuming I knew the only way to implement the code. Instead it turned into a great opportunity to level up my styling work.&lt;/p&gt;

&lt;p&gt;Thoughtbot has excellent resources for developers and the &lt;a href=&quot;https://github.com/thoughtbot/guides/tree/master/code-review&quot;&gt;guidelines for code reviews&lt;/a&gt; are no exception.&lt;/p&gt;
</description>
        <pubDate>Tue, 07 Jul 2015 00:00:00 -0400</pubDate>
        <link>http://technology.customink.com//blog/2015/07/07/i-have-the-pr</link>
        <guid isPermaLink="true">http://technology.customink.com//blog/2015/07/07/i-have-the-pr</guid>
      </item>
    
      <item>
        <title>Rails Multi-Database Best Practices Roundup</title>
        <description>&lt;p&gt;Since landing my first job programming with Ruby, most Rails applications I have worked with have managed two or more database connections. Often times these connections are both readable and writable. Collectively they represent a comprehensive business domain. Today I would like to cover everything I know about this topic, without going into the bike shed of micro services or schema management gems.&lt;/p&gt;

&lt;p&gt;The goal is simple! To give you the tools you need to keep your application running smoothly when connecting to multiple databases.&lt;/p&gt;

&lt;h2 id=&quot;topics-&amp;amp;-scenarios&quot;&gt;Topics &amp;amp; Scenarios&lt;/h2&gt;

&lt;p&gt;Each topic or scenario below is tested within a demo Rails application that you can checkout on GitHub. See the &lt;a href=&quot;#resources&quot;&gt;resources section&lt;/a&gt; at the bottom of this post for more information. Examples assume that Rails 3.2.x to 4.2.x are the same behavior. When this is not the case, it will be explicitly pointed out.&lt;/p&gt;

&lt;p&gt;Reasons for multiple database connections vastly differ. To illustrate a common setup, this demo application will use PostgreSQL as the base &amp;quot;legacy&amp;quot; connection. Just imagine this base is something like Oracle or SQL Server. Our second connection is going to be MySQL. This is the database we want to migrate our primary new business logic onto.&lt;/p&gt;

&lt;p&gt;To easily follow along, MySQL models will be prefixed as such and all ActiveRecord logs have been tagged with the database connection that executed the query. This setup will give us more than enough opportunity to explore and have fun. Lets go!&lt;/p&gt;

&lt;h3 id=&quot;topic-1:-connection-management&quot;&gt;Topic 1: Connection Management&lt;/h3&gt;

&lt;p&gt;First and foremost we are going to need a base class that champions a database connection. This is critical so that each subclass shares the same connection/pool. For example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MysqlBase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;establish_connection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configurations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;mysql&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;abstract_class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Do not use establish_connection for other models.&lt;/strong&gt; Only use it for the base connection class. Setting your base connection class as an &lt;code&gt;abstract_class&lt;/code&gt; keeps ActiveRecord from querying the database for column information. Meaning this model has no attributes. Use this connection class as the superclass for each of your MySQL models. For example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MysqlBase&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Order&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MysqlBase&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, each model will will share the same connection pool. Benefits include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Shared transaction blocks.&lt;/li&gt;
&lt;li&gt;Reduced database connections.&lt;/li&gt;
&lt;li&gt;Single point for connection management.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;topic-2:-the-activerecord-query-cache&quot;&gt;Topic 2: The ActiveRecord Query Cache&lt;/h3&gt;

&lt;p&gt;ActiveRecord&amp;#39;s &lt;a href=&quot;http://guides.rubyonrails.org/caching_with_rails.html#sql-caching&quot;&gt;query cache&lt;/a&gt; can be a beneficial performance optimization. On by default, it caches SQL results for the same query during the request/response cycle. This caching really shines with child to parent associations where &lt;code&gt;n&lt;/code&gt; children find the same parent and only hit the database once.&lt;/p&gt;

&lt;p&gt;Unfortunately ActiveRecord can only cache your base connection. It knows not of other databases. So let&amp;#39;s &amp;quot;cash in&amp;quot; on some of our simple code dividends and put that base connection class to work.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ApplicationController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActionController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;around_filter&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:cache_other_db_connections&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cache_other_db_connections&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;MysqlBase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cache&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Yup, it is that easy! If you had multiple database connections, just nest them in the outer block and yield once to the controller&amp;#39;s around filter.&lt;/p&gt;

&lt;h3 id=&quot;scenario-1:-implicit-multi-db-transactions&quot;&gt;Scenario 1: Implicit Multi-DB Transactions&lt;/h3&gt;

&lt;p&gt;So what happens when a model for one database creates or updates another model?&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MysqlUser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MysqlBase&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;table_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:users&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;after_save&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:account_create&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;account_create&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create_from_user!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Our &lt;code&gt;MysqlUser&lt;/code&gt; model is going to save a legacy account model using the &lt;code&gt;after_save&lt;/code&gt; callback. Remember, ActiveRecord runs creates or saves inside of a transaction.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;new_mysql_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;account_create&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;new_mysql_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`users`&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(...)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(...)&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;accounts&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(...)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(...)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RETURNING&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;id&quot;&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;COMMIT&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;COMMIT&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So the outcome is pretty clear here. We have two distinct database transactions. One is not going to affect the other. What would happen if the account raised an exception when being created? Possibly due to a validation error?&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;new_mysql_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;account_create&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;new_mysql_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;account_fails_validation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;new_mysql_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`users`&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(...)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(...)&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;ROLLBACK&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;ROLLBACK&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Not bad. We can see that ActiveRecord handles this simple setup quite well. Both the user and the account are rolled back.&lt;/p&gt;

&lt;h3 id=&quot;topic-3:-the-activerecord::rollback-exception&quot;&gt;Topic 3: The ActiveRecord::Rollback Exception&lt;/h3&gt;

&lt;p&gt;With our first scenario understood, it is time for another topic. Time to talk about the &lt;code&gt;ActiveRecord::Rollback&lt;/code&gt; exception object. Please take a moment to read the ActiveRecord documentation.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Transaction uses this exception to distinguish a deliberate
rollback from other exceptional situations. Normally, raising
an exception will cause the transaction method to rollback
the database transaction and pass on the exception. But if
you raise an ActiveRecord::Rollback exception, then the database
transaction will be rolled back, without passing on the exception.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Did you see that? Using an &lt;code&gt;ActiveRecord::Rollback&lt;/code&gt; will &lt;strong&gt;NOT&lt;/strong&gt; pass the exception to a higher transaction block. To illustrate what happens, let&amp;#39;s take our last scenario example and change the account to raise an &lt;code&gt;ActiveRecord::Rollback&lt;/code&gt; vs a validation exception.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;new_mysql_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;account_create&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;new_mysql_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;account_raise_rollback&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;new_mysql_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`users`&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(...)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(...)&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;ROLLBACK&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;COMMIT&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And there we go! The MySQL user just carries along on its happy way and commits the change. I will have more rollback examples below, but I might go so far as to say that you may never want to use &lt;code&gt;ActiveRecord::Rollback&lt;/code&gt; unless you have a very clear grasp on how to manage transactions.&lt;/p&gt;

&lt;h3 id=&quot;scenario-2:-explicit-multi-db-transactions&quot;&gt;Scenario 2: Explicit Multi-DB Transactions&lt;/h3&gt;

&lt;p&gt;Implicit transactions are great for one or two model instances, but sooner are later you will need to orchestrate more objects within a larger commit. Explicit transactions give you this control. Here is a simple multi-database example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;MysqlUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;transaction&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;MysqlUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create!&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;email: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;one@one.com&#39;&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;MysqlUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create!&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;email: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;two@two.com&#39;&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create!&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;email: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;one@one.com&#39;&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create!&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;email: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;two@two.com&#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`users`&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(...)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(...)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`users`&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(...)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(...)&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;accounts&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(...)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(...)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RETURNING&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;id&quot;&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;COMMIT&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;accounts&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(...)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(...)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RETURNING&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;id&quot;&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;COMMIT&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;COMMIT&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The outer MySQL transaction was automatically joinable during the first two creates. This is because the model creates detected that the connection was already under a sharable transaction. The problem here is that the base connection had no joinable transaction block. Despite which connection we started the outer block with, the problem is the same. The solution is to open a transaction for each connection before doing any work.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;MysqlUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;transaction&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;transaction&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;MysqlUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create!&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;email: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;one@one.com&#39;&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;MysqlUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create!&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;email: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;two@two.com&#39;&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create!&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;email: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;one@one.com&#39;&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create!&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;email: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;two@two.com&#39;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`users`&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(...)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`users`&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(...)&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;accounts&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(...)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RETURNING&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;id&quot;&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;accounts&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(...)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RETURNING&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;id&quot;&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;COMMIT&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;COMMIT&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we have a tidy atomic transaction across both databases. Any exception raised besides &lt;code&gt;ActiveRecord::Rollback&lt;/code&gt; will automatically rollback both transactions. This pattern is so useful, I suggest making a helper that does the work for you. Again, this leverages the base connection class for the second database – I did promise it would come in handy.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;class_eval&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;multi_transaction&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;transaction&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;MysqlBase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;transaction&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;multi_transaction&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;multi_transaction&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now anytime you need to commit large changes, just wrap your code in &lt;code&gt;ActiveRecord::Base.multi_transaction { ... }&lt;/code&gt; and sleep better knowing that your data is clean. If you want to learn more about ActiveRecord&amp;#39;s transactions, please read the &lt;a href=&quot;http://apidock.com/rails/ActiveRecord/ConnectionAdapters/DatabaseStatements/transaction&quot;&gt;Rails API Docs&lt;/a&gt;. They cover advanced topics like isolation levels and savepoints. None of which are covered in this post.&lt;/p&gt;

&lt;h3 id=&quot;topic-4:-explicit-transactions-are-serious!&quot;&gt;Topic 4: Explicit Transactions Are Serious!&lt;/h3&gt;

&lt;p&gt;If you are doing explicit transactions, you likely mean business. If so, make your code serious by using ActiveRecord&amp;#39;s bang methods. Doing so helps keep code explicit to the task at hand with automatic rollbacks to two or more databases. Examples include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;save!&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;create!&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;update_attributes!&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;update!&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;destroy!&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you must raise exceptions during explicit transactions to multiple databases, please stay away from using &lt;code&gt;ActiveRecord::Rollback&lt;/code&gt;, this could complicate your code and in most cases need to be re-raised.&lt;/p&gt;

&lt;h3 id=&quot;topic-5:-shared-connection/pools&quot;&gt;Topic 5: Shared Connection/Pools&lt;/h3&gt;

&lt;p&gt;Every now and then you may use a gem whose model(s) subclasses &lt;code&gt;ActiveRecord::Base&lt;/code&gt; and you want to force that connection to another database. The &lt;code&gt;Delayed::Job&lt;/code&gt; library is a good example. You could use &lt;code&gt;establish_connection&lt;/code&gt;, but that would generate a distinct connection pool and keep transactions from being shared. Here is a bullet proof freedom patch to use with any model.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# In config/initializers/delayed_job.rb&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Delayed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Backend&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;class_eval&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;connection_pool&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;MysqlBase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;connection_pool&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;retrieve_connection&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;MysqlBase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;retrieve_connection&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;connected?&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;MysqlBase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;connected?&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;remove_connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;klass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;MysqlBase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;remove_connection&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This would change Delayed::Job from using our base connection to using our second MySQL connection. It is best to do patches like this in a Rails initializer. This guarantees gems are already reqired and in most cases have not yet connected to the database. If your model connects before these patches are applied, you could end up with an orphaned connection pool to the wrong database.&lt;/p&gt;

&lt;p&gt;The patch works by overriding critical connection specification/handling class methods defined on ActiveRecord::Base. The first two methods &lt;code&gt;connection_pool&lt;/code&gt; and &lt;code&gt;retrieve_connection&lt;/code&gt; will make all your queries work. The second two will ensure all remaining connection management methods like &lt;code&gt;remove_connection&lt;/code&gt; and &lt;code&gt;clear_all_connections!&lt;/code&gt; do the same. But remember! If you need to do any connection management, you really only need do it on the connection class, in this case, &lt;code&gt;MysqlBase&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;topic-6:-forked-processes-&amp;amp;-clearing-connections&quot;&gt;Topic 6: Forked Processes &amp;amp; Clearing Connections&lt;/h3&gt;

&lt;p&gt;Most libraries that fork your Rails application process know how to reset ActiveRecord&amp;#39;s base connections. This includes web servers like Passenger or Unicorn. However, it is up to you to do the same for any other database connections. This is easy to do by leveraging our connection class in the first topic.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;clear_all_connections!&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;MysqlBase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;establish_connection&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MysqlBase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;configurations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;mysql&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;First we clear all connections. This is normally done before forking. Methods like &lt;code&gt;clear_all_connections!&lt;/code&gt; and &lt;code&gt;clear_active_connections!&lt;/code&gt; iterate across all connection pools. You only need to call this once, not per connection. Second, we call &lt;code&gt;establish_connection&lt;/code&gt; on our MySQL connection class using the same configuration method we did in the first topic.&lt;/p&gt;

&lt;h3 id=&quot;topic-7:-rails-transactional-fixtures&quot;&gt;Topic 7: Rails Transactional Fixtures&lt;/h3&gt;

&lt;p&gt;If you are using transactional fixtures and you have fixtures for each connection, then ActiveRecord will do all the work for you by making sure each test is wrapped with transactional savepoints to each database. However, if you do not have fixtures for all connections then it is up to you to start the first transaction for each additional connection. Again, using our MySQL connection class as an example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Rails 3.2.x&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;before&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;MysqlBase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;increment_open_transactions&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;MysqlBase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;transaction_joinable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;MysqlBase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;begin_db_transaction&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;after&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MysqlBase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;open_transactions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;MysqlBase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rollback_db_transaction&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;MysqlBase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;decrement_open_transactions&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Rails 4.2.x&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;before&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MysqlBase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;begin_transaction&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;joinable: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;after&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MysqlBase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rollback_transaction&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Please remember that ActiveRecord uses savepoints for nested transactions. Depending on your database, you will see &lt;code&gt;SAVEPOINT&lt;/code&gt; and &lt;code&gt;RELEASE SAVEPOINT&lt;/code&gt; for tests in your logs. Only the outer most transactions will use &lt;code&gt;BEGIN&lt;/code&gt; and &lt;code&gt;ROLLBACK&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;p&gt;Thanks for reading this far. Did I miss anything important or maybe you would like to ask a question? If so, drop a comment and I would be more than happy to expand on any topic.&lt;/p&gt;

&lt;p&gt;Each topic or scenario here is fully tested in a demo rails application. Check it out on GitHub if you are interested in playing around with these or any other multi-database topics that interest you. If you find a new one or care to share your own, please drop a comment or a pull request.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/customink/encom_dbs&quot;&gt;Tested Multi-Database Rails Application&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 22 Jun 2015 00:00:00 -0400</pubDate>
        <link>http://technology.customink.com//blog/2015/06/22/rails-multi-database-best-practices-roundup</link>
        <guid isPermaLink="true">http://technology.customink.com//blog/2015/06/22/rails-multi-database-best-practices-roundup</guid>
      </item>
    
      <item>
        <title>Ruby&#39;s Private is for Methods Only</title>
        <description>&lt;p&gt;The other day I saw a pull request, on a Rails project, that declared a private inner class. Having my fair share of experience with Java, I am very familiar with the construct. Essentially, you declare one class inside of another class and declare it as private. This is often done to clean up your internal data structures and hide the implementation details from others.&lt;/p&gt;

&lt;p&gt;I couldn&amp;#39;t recall ever seeing this in Ruby before, so it gave me pause. As we know, in Ruby, &amp;quot;private&amp;quot; isn&amp;#39;t really all that private. It just means that a method cannot be called with an explicit receiver.&lt;/p&gt;

&lt;!--more--&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Tommy&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pinball&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;wizard&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;blind&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;how do you think he does it?&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tommy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Tommy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#&amp;lt;Tommy:0x007f8f91074bf8&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tommy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pinball&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;wizard&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tommy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;blind&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;NoMethodError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`blind&#39; called for #&amp;lt;Tommy:0x007f8f91074bf8&amp;gt;
&amp;gt; tommy.send(:blind)
=&amp;gt; &quot;how do you think he does it?&quot;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&amp;quot;What does this &lt;i&gt;do&lt;/i&gt;?&amp;quot; I thought to myself, looking at the private class declaration. I didn&amp;#39;t know, so I decided to test it out.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Tommy&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pinball&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;wizard&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Senses&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;blind&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;how do you think he does it?&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;senses&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Tommy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Senses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#&amp;lt;Tommy::Senses:0x007f8f9211a958&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;senses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;blind&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;how do you think he does it?&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Hmm...that wasn&amp;#39;t exactly what I expected. The concept of a private inner class exists in many languages, so I thought that maybe Ruby wouldn&amp;#39;t let me inherit from Tommy::Senses and override the implementation. It is private, after all.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Tommy&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pinball&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;wizard&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Senses&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;blind&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;how do you think he does it?&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BallyTableKing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Tommy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Senses&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;blind&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;sure plays a mean pinball&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;king&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;BallyTableKing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#&amp;lt;BallyTableKing:0x007f8f920d2ba8&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;king&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;blind&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;sure plays a mean pinball&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Again, not at all what I expected. I decided to go to the &lt;a href=&quot;http://ruby-doc.org/core-2.0.0/Module.html#method-i-private&quot;&gt;Ruby docs&lt;/a&gt; to read up on private.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;With no arguments, sets the default visibility for subsequently defined methods to private. With arguments, sets the named methods to have private visibility.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are no mention of classes at all, which explains a lot. The private keyword in Ruby only exists to declare methods as private, not classes.&lt;/p&gt;
</description>
        <pubDate>Fri, 19 Jun 2015 00:00:00 -0400</pubDate>
        <link>http://technology.customink.com//blog/2015/06/19/rubys-private-is-for-methods-only</link>
        <guid isPermaLink="true">http://technology.customink.com//blog/2015/06/19/rubys-private-is-for-methods-only</guid>
      </item>
    
      <item>
        <title>Ruby Pretzel Colons</title>
        <description>&lt;p&gt;The Ruby Pretzel Colon is one of my favorite idioms. But it&amp;#39;s salty goodness can be an acquired taste for new Ruby programmers.
There seems to be an aversion to it&amp;#39;s apparent magic. It is an unusual syntax. But it is easy to understand if you break it
down into it&amp;#39;s parts.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Here is an example of the pretzel colon:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# general style:&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;person1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;# pretzel style:&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;person1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The pretzel colon style &lt;code&gt;&amp;amp;:&lt;/code&gt; is more concise and focused and makes the perfect snack at the ball game.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s break down what is happening here. In the general style, the &lt;code&gt;map&lt;/code&gt; is iterating through the array and passing each person object to the block. The block is defined to take a single argument of a person, the block then calls &lt;code&gt;person.name&lt;/code&gt; and returns the name of the person.&lt;/p&gt;

&lt;p&gt;Using pretzel style, the result is the same, but the block is built for us using the &lt;code&gt;&amp;amp;&lt;/code&gt; operator. The &lt;code&gt;&amp;amp;&lt;/code&gt; operator calls &lt;code&gt;#to_proc&lt;/code&gt; on the object then converts the result into a block. If our object was a lambda or Proc, they return &lt;code&gt;self&lt;/code&gt; in their default &lt;code&gt;#to_proc&lt;/code&gt; method. But in this case, our object is a Symbol.&lt;/p&gt;

&lt;p&gt;The default implementation of &lt;code&gt;#to_proc&lt;/code&gt; on Symbol is to return a Proc that takes the first argument and &lt;code&gt;sends&lt;/code&gt; itself to the argument. Example pseudo code:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Symbol&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;to_proc&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Proc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The third act of a magic trick is called the Prestige. Using the default &lt;code&gt;#to_proc&lt;/code&gt; defined in &lt;code&gt;Symbol&lt;/code&gt;, combining it with &lt;code&gt;&amp;amp;&lt;/code&gt; which calls &lt;code&gt;#to_proc&lt;/code&gt; and converts the result into a block. We are building a block that takes the person object and sends the symbol to it. Sending &lt;code&gt;:name&lt;/code&gt; to person is the same as calling &lt;code&gt;person.name&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# expanded pretzel&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;person1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The combination of the Ruby &lt;code&gt;&amp;amp;&lt;/code&gt; operator&amp;#39;s ability to convert objects into blocks and the default implementation of Symbol&amp;#39;s &lt;code&gt;#to_proc&lt;/code&gt; combine into a magic pretzel. This makes our code more concise and expressive.&lt;/p&gt;

&lt;p&gt;A bit of history on the pretzel colon. This idiom started in Rails ActiveSupport but was eventually moved to Ruby Core. It was removed after Rails 2.3. The git history of the file shows &amp;quot;Marcel Molina authored on Nov 20, 2005&amp;quot;. The pretzel colon is almost 10 years old.&lt;/p&gt;

&lt;p&gt;see &lt;a href=&quot;https://github.com/rails/rails/blob/2-3-stable/activesupport/lib/active_support/core_ext/symbol.rb&quot;&gt;https://github.com/rails/rails/blob/2-3-stable/activesupport/lib/active_support/core_ext/symbol.rb&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 08 Jun 2015 00:00:00 -0400</pubDate>
        <link>http://technology.customink.com//blog/2015/06/08/ruby-pretzels</link>
        <guid isPermaLink="true">http://technology.customink.com//blog/2015/06/08/ruby-pretzels</guid>
      </item>
    
      <item>
        <title>To the Cloud!</title>
        <description>&lt;p&gt;This month, WebOps overcame one of our final hurdles to rid ourselves of managing hardware, joining the likes of Netflix, AirBnB, and Dropbox in the cloud. We had been on a steady migration path and each step of the way, it has been a win for everyone; WebOps, Developers, Business Customers and most importantly, our customers. CustomInk now has more server capacity at it’s disposal than AOL when I left in 2010 all for an incremental hourly fee.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;As an old-school SysAdmin, not owning your own Silicon was a significant shift in mentality. In other jobs, I’ve had this false sense of security that if I knew where my hardware was, could touch it, my employees managed it, it was secure. Time and time again, we’ve learned that’s not the case. The latest security breach at Sony’s was not due to use of a public cloud. The failure of CodeSafe was poor security and not AWS. The reality is that every piece of hardware we shut down, the more liberating it was. I’m looking forward to returning the keys of our CoLo.&lt;/p&gt;

&lt;h2 id=&quot;in-the-beginning&quot;&gt;In the Beginning&lt;/h2&gt;

&lt;p&gt;A year ago, we were at a crossroads that I’m sure many of my peers are currently facing. Do we continue to roll our own or jump off the datacenter. If we stayed the course, we were facing a very large expenditure in capital. We didn’t have the additional capacity to support Customink’s exploding growth. To make matters worse, I adopted an aging infrastructure. Half of our deployed hardware was no longer under support and over 5 years old. It was going to take a lot of upfront CapEx.&lt;/p&gt;

&lt;p&gt;Moving to an enterprise cloud provider, you get scale and options that any medium sized business could never afford. For us, that’s five data centers, spread across the US, network bandwidth as wide as the Beltway, 14  staging environments (at 10% the cost of prod), multi-location DB replication with automatic failover, a data-warehouse environment built with a few clicks, VPCs without having to evaluate router vendors, a backup solution without owning ANY tape, and on and on. Before the move, every purchase was a compromise or a task to do more when additional money was budgeted for the next year.  We still have to watch costs, but it’s now pay as you go, versus buying excess capacity that never gets completely used.&lt;/p&gt;

&lt;p&gt;Like almost everyone, we started with DR. It was a minimal setup that looking back, I’m thankful we never had to implement. Phase II was the Hybrid Cloud model (½ in/out) with staging out of the data center first. This was not a sustainable model. We had an investment in networking, floorspace, racks and excess capacity. In many ways, we were paying three times. Once to Savvis, another to Dell and a third to AWS. Also, we had to have additional staff that could rack/stack/replace. Phase III was the final push to move production.&lt;/p&gt;

&lt;p&gt;There are three things that have it easier. First, our use of Chef (you owe me lunch Nathan) allows us to deploy consistent, identical application servers significantly quicker and easier. Second, our DevOps model is integrated into Chef so that Ops can build and deploy any of our applications. It has saved us time and again when the occasional hardware spike allowing us to deploy new servers in 20 minutes. If you aren’t using Chef or Puppet, you have too many WebOps Engineers. And last, we don’t have a lot of cruft. Compared to many places I’ve worked, maintenance at CustomInk is part of the way the tech teams operate. Software upgrades, patches, bug fix is built into the process.&lt;/p&gt;

&lt;p&gt;To be honest, it’s a huge relief. With a few exceptions, If a hard drive fails in the middle of the night, a server crashes everyone sleeps. If the application is throttling the servers, you can double the server size in 5 minutes, build out additional servers in 15. Horizontal and vertical scaling in minutes!&lt;/p&gt;

&lt;p&gt;I do have one regret. I am no longer invited to Dell’s suite at the Capitals games. Thanks for reading!&lt;/p&gt;
</description>
        <pubDate>Fri, 13 Feb 2015 00:00:00 -0500</pubDate>
        <link>http://technology.customink.com//blog/2015/02/13/to-the-cloud</link>
        <guid isPermaLink="true">http://technology.customink.com//blog/2015/02/13/to-the-cloud</guid>
      </item>
    
      <item>
        <title>Customizing Rake Tasks In Rails 4.1 And Higher</title>
        <description>&lt;p&gt;I have been overriding, invoking, and executing custom Rake tasks since I was an early Ruby developer. Tweaking your project&amp;#39;s automated tasks are likely the closest thing Rails developers come to building their own light saber. Most popular are adding or changing how the Rails test suite behaves. For example, adding Capybara to your project.&lt;/p&gt;

&lt;p&gt;Recently I have been &lt;a href=&quot;/blog/2014/09/16/from-rails-3.2-to-4.2/&quot;&gt;upgrading projects from 3.2 to 4.2&lt;/a&gt; and one thing that really stood out to me was how Rails testing tasks are created and run. Most obvious is that the default test task now runs all model, controller, mailer, helper, job, and integration tests in a single process now. Upon investigation, I found that these major changes were introduced in Rails 4.1. Go check out their new &lt;a href=&quot;https://github.com/rails/rails/blob/4-2-stable/railties/lib/rails/test_unit/testing.rake&quot;&gt;testing.rake&lt;/a&gt; file if you are interested. Much cleaner than before!&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;So what does this mean for you? Let me describe a real scenario I had to address in one of my projects. This project uses two custom test additions. The first is called &lt;a href=&quot;https://github.com/jfirebaugh/konacha&quot;&gt;Konacha&lt;/a&gt;, a gem that leverages the asset pipeline to easily test my projects JavaScript with Mocha &amp;amp; Chai under Capybara with PhantomJS. The second addition uses the Capybara::DSL within the standard Rails &lt;code&gt;test/integration&lt;/code&gt; namespace and directory structure.&lt;/p&gt;

&lt;p&gt;When moving to Rails 4.2 I found that my integration tests were mixed together with everything else. This was a problem since I really wanted my slower integration tests to run after all my other tests. No matter what I tried, I could not get the setup I wanted. So like most problems, I solved this by diving into the code and learning.&lt;/p&gt;

&lt;h2 id=&quot;deconstructing-rails::testtask&quot;&gt;Deconstructing Rails::TestTask&lt;/h2&gt;

&lt;p&gt;So we already had a look at the new testing.rake file above. But looking closer, we can see how the default test task is defined right at the top. Also of interest to us is that &lt;code&gt;test:run&lt;/code&gt; task.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;rake/testtask&#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;rails/test_unit/sub_test_task&#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;default: :test&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Runs all tests in test folder&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:test&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TestTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;test_creator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Rake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;top_level_tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;invoke_rake_task&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:test&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TestTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;test/**/*_test.rb&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That description for &lt;code&gt;test&lt;/code&gt; is pretty helpful and quite accurate. Indeed even though we have distinct test tasks like &lt;code&gt;test:models&lt;/code&gt; and &lt;code&gt;test:mailers&lt;/code&gt;, this default task is somehow aggregating each into a single run. To learn more about this implementation, we need to open up the &lt;a href=&quot;https://github.com/rails/rails/blob/4-2-stable/railties/lib/rails/test_unit/sub_test_task.rb&quot;&gt;sub_test_task.rb&lt;/a&gt; file required at the top.&lt;/p&gt;

&lt;p&gt;In here we can see two new utility classes. One called &lt;code&gt;TestCreator&lt;/code&gt; and another called &lt;code&gt;TestInfo&lt;/code&gt;. The &lt;code&gt;TestCreator#invoke_rake_task&lt;/code&gt; instance method is what we came here for.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;invoke_rake_task&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;any?&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;create_and_run_single_test&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;reset_application_tasks&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Rake&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;TEST&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;test:single&#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;test:run&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;invoke&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Without knowing too much about the &lt;code&gt;@info&lt;/code&gt; object initialized by &lt;code&gt;TestCreator&lt;/code&gt;, we can make a pretty good guess that &lt;code&gt;test:run&lt;/code&gt; is what we came here to find. By looking back at the &lt;code&gt;test:run&lt;/code&gt; tasks pattern of &lt;code&gt;&amp;quot;test/**/*_test.rb&amp;quot;&lt;/code&gt; it seems clear that this is the test responsible for running all of our tests at once. Knowing that, let&amp;#39;s start adding code to the project&amp;#39;s &lt;code&gt;Rakefile&lt;/code&gt; and make our new tests tasks do our bidding.&lt;/p&gt;

&lt;h2 id=&quot;customizing-your-rakefile&quot;&gt;Customizing Your Rakefile&lt;/h2&gt;

&lt;p&gt;Here is the first cut at customizing our Rails project&amp;#39;s Rakefile. These come right after the default &lt;code&gt;Rails.application.load_tasks&lt;/code&gt; line.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Rake&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;test:run&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;clear&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:test&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;js&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;konacha:run&#39;&lt;/span&gt;

  &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TestTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:_run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;test_files&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FileList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;test/**/*_test.rb&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;exclude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;s1&quot;&gt;&#39;test/integration/**/*_test.rb&#39;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:run&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;test:js&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;test:_run&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;test:integration&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first thing that is happening is we want to remove the existing &lt;code&gt;test:run&lt;/code&gt; task using the &lt;code&gt;clear&lt;/code&gt; method. We then open up the test task namespace and make a few additions. In order they are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a simple &lt;code&gt;test:js&lt;/code&gt; alias for the Konacha provided &lt;code&gt;konacha:run&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Create our &lt;code&gt;test:run&lt;/code&gt; replacement but now named &lt;code&gt;test:_run&lt;/code&gt;. Note how we use &lt;code&gt;test_files&lt;/code&gt; vs a &lt;code&gt;pattern&lt;/code&gt; so we can use the exclude method on FileList to remove all integration tests.&lt;/li&gt;
&lt;li&gt;Make a new &lt;code&gt;test:run&lt;/code&gt; task that calls each other task in the order we want.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you were to run &lt;code&gt;rake test&lt;/code&gt; now, we would see that our integrations are still inter-mixed with all the other Rails test cases. But why!?!&lt;/p&gt;

&lt;h2 id=&quot;final-rakefile-separating-integrations&quot;&gt;Final Rakefile Separating Integrations&lt;/h2&gt;

&lt;p&gt;So why did our integration tests still run with all the other Rails test cases? The answer lies in one simple override that &lt;code&gt;Rails::TestTask&lt;/code&gt; implements. Normally the &lt;code&gt;Rake::TestTask&lt;/code&gt; calls an instance method named &lt;code&gt;define&lt;/code&gt; which basically builds a string and executes a Ruby subprocess. The &lt;code&gt;Rails::TestTask&lt;/code&gt; class implements the define method like so:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;define&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;TESTOPTS&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;ARGV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;replace&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Shellwords&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;split&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;TESTOPTS&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;libs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@libs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$LOAD_PATH&lt;/span&gt;
    &lt;span class=&quot;vg&quot;&gt;$LOAD_PATH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;unshift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;file_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;FileList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;expand_path&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See what is happening there? At the end of the day, all &lt;code&gt;Rails::TestTask&lt;/code&gt; tasks do is require the test files. So now it makes perfect sense as to why it appeared that each task was being merged. With this knowledge, we can now customize our setup.&lt;/p&gt;

&lt;p&gt;Rather than using Rails test task, we will just bail out and use the default &lt;code&gt;Rake::TestTask&lt;/code&gt; instead. When doing so, we will have to push the test directory to the libs too. This is one of the few things done for us by &lt;code&gt;Rails::TestTask&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Rake&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;test:run&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;clear&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Rake&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;test:integration&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;clear&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:test&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;js&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;konacha:run&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

  &lt;span class=&quot;no&quot;&gt;Rake&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TestTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:_run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;libs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;test_files&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FileList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;test/**/*_test.rb&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;exclude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;s1&quot;&gt;&#39;test/integration/**/*_test.rb&#39;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;no&quot;&gt;Rake&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TestTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;integration&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;test:prepare&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;libs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;test&#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;test/integration/**/*_test.rb&#39;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:run&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;test:js&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;test:_run&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;test:integration&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we are cooking. All of our JavaScript tests will run first, then all normal Rails test cases, and finally our integration tests. By customizing the &lt;code&gt;test:run&lt;/code&gt; task we get the full benefit of the default &lt;code&gt;test&lt;/code&gt; task implementation which allows us to pass file and/or &lt;code&gt;TESTOPTS&lt;/code&gt; arguments. This happens to be one of my favorite features of Rails 4.1 and up too.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;rake &lt;span class=&quot;nb&quot;&gt;test test&lt;/span&gt;/models/user_test.rb
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;rake &lt;span class=&quot;nb&quot;&gt;test test&lt;/span&gt;/integration/app_stories_test.rb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And it all just works! Thanks for reading!&lt;/p&gt;
</description>
        <pubDate>Sun, 08 Feb 2015 00:00:00 -0500</pubDate>
        <link>http://technology.customink.com//blog/2015/02/08/customizing-rake-tasks-in-rails-41-and-higher</link>
        <guid isPermaLink="true">http://technology.customink.com//blog/2015/02/08/customizing-rake-tasks-in-rails-41-and-higher</guid>
      </item>
    
      <item>
        <title>ActiveRecord 4.2&#39;s Type Casting</title>
        <description>&lt;p&gt;Last month &lt;a href=&quot;http://weblog.rubyonrails.org/2014/12/19/Rails-4-2-final/&quot;&gt;Rails 4.2&lt;/a&gt; was released and if you have been keeping up with my posts, I even covered &lt;a href=&quot;/blog/2014/09/16/from-rails-3.2-to-4.2&quot;&gt;how you can upgrade&lt;/a&gt; from 3.2 to 4.2 in one step! This speaks volumes to how easy it is to adopt to outward facing API changes within our beloved framework. But often times, version changes bring implementation changes that we never see. For example, all of Aaron Patterson&amp;#39;s work for &lt;a href=&quot;http://tenderlovemaking.com/2014/02/19/adequaterecord-pro-like-activerecord.html&quot;&gt;AdequateRecord Pro&amp;trade;&lt;/a&gt; are performance optimizations that affect no outward API interface at all. Unless you read the source, many of these awesome changes go unnoticed and that&amp;#39;s a damn shame because some of them can make our lives easier.&lt;/p&gt;

&lt;p&gt;Today I want to share some of the new hotness I found while working on the latest ActiveRecord &lt;a href=&quot;https://github.com/rails-sqlserver/activerecord-sqlserver-adapter&quot;&gt;SQL Server Adapter&lt;/a&gt;. Specifically, how ActiveRecord type casts values. Up until Rails 4.2, all type casting was done in class methods like &lt;code&gt;value_to_date&lt;/code&gt; implemented on the &lt;code&gt;ActiveRecord::ConnectionAdapters::Column&lt;/code&gt; object. Sean Griffin does a &lt;a href=&quot;http://robots.thoughtbot.com/how-rails-works-type-casting&quot;&gt;great job&lt;/a&gt; explaining this convoluted process. Warning, it&amp;#39;s kind of boring and a chore to read.&lt;/p&gt;

&lt;p&gt;This process has been around for as long as I can remember. It made it really hard to write good abstract OO code that casts values going into and out of the database. All that has changed with the new &lt;code&gt;ActiveRecord::Type&lt;/code&gt; namespace. All objects within this namespace are simple POROs with very obvious and well documented interfaces. The base class is &lt;code&gt;ActiveRecord::Type::Value&lt;/code&gt; and below is a slightly trimmed down version of that object, sans comments. Take a quick read.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ActiveRecord&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Type&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Value&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;type_cast_from_database&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;type_cast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;type_cast_from_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;type_cast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;type_cast_for_database&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;type_cast_for_schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;inspect&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;changed?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;old_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_new_value_before_type_cast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;old_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_value&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;changed_in_place?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;


      &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;type_cast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cast_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nil?&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cast_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Do you see what I see? This is amazing. I see an object that finally handles all of the following.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Casting raw DB values.&lt;/li&gt;
&lt;li&gt;Casting user input to prepare for DB quoting.&lt;/li&gt;
&lt;li&gt;Casting for default values in schema dumpers.&lt;/li&gt;
&lt;li&gt;Avoid &lt;code&gt;ActiveRecord::ConnectionAdapters::Column&lt;/code&gt; code bloat.&lt;/li&gt;
&lt;li&gt;So much more!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Case in point, a lot of database connection gems still return raw strings for every value. Sub classes of &lt;code&gt;Value&lt;/code&gt; can define their own &lt;code&gt;type_cast_from_database&lt;/code&gt; implementation to deal with this. For example, here is the &lt;code&gt;Integer&lt;/code&gt; object&amp;#39;s default behavior. Super easy!&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;type_cast_from_database&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nil?&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_i&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;One thing that Rails core team did to make this even better allows us to type check our Ruby values ahead of time during attribute assignment vs. when we save to the database. This is now done in the &lt;code&gt;Integer&lt;/code&gt; class using the &lt;code&gt;limit&lt;/code&gt; attribute parsed from the SQL type. Here are the salient points of that class.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ActiveRecord&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Type&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Value&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;
        &lt;span class=&quot;vi&quot;&gt;@range&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;max_value&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cast_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;ensure_in_range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ensure_in_range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cover?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;RangeError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; is out of range for &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; with limit &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;max_value&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;limit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 8 bits per byte with one bit for sign&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;min_value&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_value&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Any type aliased to use the &lt;code&gt;Integer&lt;/code&gt; value object will now type check that the value is within the accepted database range. As far as I can tell, only Integer objects in Rails core do this, but I plan on implementing these checks for Decimal and other values too. Here is how SQL Server&amp;#39;s &lt;code&gt;smallint(2)&lt;/code&gt; SQL type attribute behaves.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;vi&quot;&gt;@obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;small_int_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32_768&lt;/span&gt;
&lt;span class=&quot;vi&quot;&gt;@obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;small_int_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32_769&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; RangeError!&lt;/span&gt;

&lt;span class=&quot;vi&quot;&gt;@obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;small_int_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32_767&lt;/span&gt;
&lt;span class=&quot;vi&quot;&gt;@obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;small_int_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32_768&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; RangeError!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There is so much more that we can do with these objects. The PostgreSQL adapter already casts the JSON data type. I can even see SQL Server returning a Nokogiri object for an XML data type. The sky is the limit. The core &lt;code&gt;Value&lt;/code&gt; object allows the SQL Server Adapter to implement guards for different connection modes. Our &lt;code&gt;TinyTDS&lt;/code&gt; connection returns all DB values mapped to their proper Ruby primitive. To avoid wasting precious time, we bypass all Rails type casting in one single place now.&lt;/p&gt;

&lt;p&gt;These objects are a great step forward and they should open up all sorts of possibilities for gems to extend our DB objects. Thanks so much to Sean Griffin and anyone else working on ActiveRecord to make it better, faster, and easier to use!&lt;/p&gt;

&lt;h1 id=&quot;resources&quot;&gt;Resources&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://robots.thoughtbot.com/how-rails-works-type-casting&quot;&gt;How Rails&amp;#39; Type Casting Works&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 06 Jan 2015 03:29:00 -0500</pubDate>
        <link>http://technology.customink.com//blog/2015/01/06/activerecord-42s-type-casting</link>
        <guid isPermaLink="true">http://technology.customink.com//blog/2015/01/06/activerecord-42s-type-casting</guid>
      </item>
    
      <item>
        <title>RubyConf5k 2014 in San Diego</title>
        <description>&lt;p&gt;We were proud to organize and sponsor the &lt;a href=&quot;https://twitter.com/rubyconf5k&quot;&gt;RubyConf5k&lt;/a&gt; in San Diego for a second time. 75 conference attendees woke up early after a late night of Ruby karaoke for a scenic run around the marina. The camaraderie of the Ruby community was highlighted by the support the runners showed for each other. Many running a 5k for the first time. Congratulations to all the participants.&lt;/p&gt;

&lt;p&gt;Here are the &lt;a href=&quot;https://github.com/customink/rubyconf5k_2014_results&quot;&gt;official results&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://twitter.com/weexpectedTHIS&quot;&gt;Kyle Peyton&lt;/a&gt; 1st place Mens - 20m 21s 3ms&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://twitter.com/bridgetlandis&quot;&gt;Bridget Landis&lt;/a&gt; 1st place Ladies - 25m 29s 5ms&lt;/li&gt;
&lt;li&gt;Justin Schumacher 1st place Family - 27m 09s 5ms&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Join us next year to earn your own RubyConf5k T-Shirt.
Make sure to follow &lt;a href=&quot;https://twitter.com/rubyconf5k&quot;&gt;@RubyConf5k&lt;/a&gt; and sign up early
to guarantee your spot and CustomInk shirt.&lt;/p&gt;

&lt;h2 id=&quot;our-speedy-engineer-and-5k-organizer-stafford-explaining-the-course&quot;&gt;Our speedy engineer and 5k organizer Stafford explaining the course&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/content/rubyconf5k_2014/stafford-db1a644776b0d2f63d4b4616ee5f8d9c.jpg&quot; alt=&quot;Starting Line&quot;&gt;&lt;/p&gt;

&lt;h2 id=&quot;t-shirts-the-participants&quot;&gt;T-Shirts the participants&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/content/rubyconf5k_2014/shirts-a32adfd8bd38eaa9a4eda920a888c822.jpg&quot; alt=&quot;T-Shirts&quot;&gt;&lt;/p&gt;

&lt;h2 id=&quot;1st-place-kyle-peyton&quot;&gt;1st Place Kyle Peyton&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/content/rubyconf5k_2014/kylepeyton-e35535dc8747e1338192054b751d2f59.jpg&quot; alt=&quot;Kyle Peyton&quot;&gt;&lt;/p&gt;

&lt;h2 id=&quot;1st-place-bridget-landis&quot;&gt;1st Place Bridget Landis&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/content/rubyconf5k_2014/bridgetlandis-4e3ec7bae9a8888b5d81a71f33a7dfda.jpg&quot; alt=&quot;Bridget Landis&quot;&gt;&lt;/p&gt;

&lt;h2 id=&quot;1st-place-justin-schumacher&quot;&gt;1st Place Justin Schumacher&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/content/rubyconf5k_2014/justinschumacher-13b26d337d139f839a5a17ca48744208.jpg&quot; alt=&quot;Justin Schumacher&quot;&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 19 Nov 2014 08:00:00 -0500</pubDate>
        <link>http://technology.customink.com//blog/2014/11/19/rubyconf5k-2014</link>
        <guid isPermaLink="true">http://technology.customink.com//blog/2014/11/19/rubyconf5k-2014</guid>
      </item>
    
      <item>
        <title>eComic Con 2014</title>
        <description>&lt;p&gt;Halloween is a special time at CustomInk, especially for a group of technologists who have a healthy appreciation for Sci-Fi and comic books.  This year, our eCommerce group decided to hold an eComic-con and let our imaginations run wild.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h4 id=&quot;the-first-attendees-to-show-up&quot;&gt;The first attendees to show up&lt;/h4&gt;

&lt;p&gt;Early in the morning, we are very excited for everyone to arrive!&lt;/p&gt;

&lt;p&gt;&lt;img src=/assets/content/ecomiccon/first_attendees-3fd667dc4d601cb98bae1861013d3401.jpg alt=&quot;First Attendees&quot; class=&quot;tb-Img tb-Img--fancy&quot; /&gt;
&lt;img src=/assets/content/ecomiccon/first_attendees2-241c42e0f78f21a75e473e51f26fa4ba.jpg alt=&quot;More First Attendees&quot; class=&quot;tb-Img tb-Img--fancy&quot; /&gt;
&lt;img src=/assets/content/ecomiccon/by_the_stairs-a35b83253c13987ee7c70f7ad2ddc023.jpg alt=&quot;Even More First Attendees&quot; class=&quot;tb-Img tb-Img--fancy&quot; /&gt;
&lt;img src=/assets/content/ecomiccon/hanging_out-327cb3448c1917e38a80151b708a492c.jpg alt=&quot;Even Morest First Attendees&quot; class=&quot;tb-Img tb-Img--fancy&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;we-start-to-play&quot;&gt;We start to play&lt;/h4&gt;

&lt;p&gt;Everyone is here!  We can&amp;#39;t contain ourselves, we must reveal our moves.&lt;/p&gt;

&lt;p&gt;&lt;img src=/assets/content/ecomiccon/gogopowerrangers-77f1188680cd1cb716e5e56bb549d138.jpg alt=&quot;Power Rangers&quot; class=&quot;tb-Img tb-Img--fancy&quot; /&gt;
&lt;img src=/assets/content/ecomiccon/rocket-ec8b32e35698cebe6b351b9679cbd598.jpg alt=&quot;Rocket Raccoon&quot; class=&quot;tb-Img tb-Img--fancy&quot; /&gt;
&lt;img src=/assets/content/ecomiccon/strength_test-44caf097131fceb210ceeae15cd2265b.jpg alt=&quot;Strength Test&quot; class=&quot;tb-Img tb-Img--fancy&quot; /&gt;
&lt;img src=/assets/content/ecomiccon/drdoom_link-29f6107735c9a3885d613ded85dbb100.jpg alt=&quot;DrDoom Link&quot; class=&quot;tb-Img tb-Img--fancy&quot; /&gt;
&lt;img src=/assets/content/ecomiccon/morhpin_lunch-7c3a4ea7cad33bf10f6e9228d3115f91.jpg alt=&quot;DrDoom Link&quot; class=&quot;tb-Img tb-Img--fancy&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;we-start-to-work&quot;&gt;We start to work&lt;/h4&gt;

&lt;p&gt;Eventually, we realize there is work to do. At some point you forget you are even in costume.&lt;/p&gt;

&lt;p&gt;&lt;img src=/assets/content/ecomiccon/working_link-b43fd14efa9ad4d5d4732cb0bd8042a9.jpg alt=&quot;Saving Zelda?&quot; class=&quot;tb-Img tb-Img--fancy&quot; /&gt;
&lt;img src=/assets/content/ecomiccon/super_meeting-ae9cb1ca311fa73ea74e866738685ab7.png alt=&quot;Super Meeting&quot; class=&quot;tb-Img tb-Img--fancy sb-ContentImg--left&quot; /&gt;
&lt;img src=/assets/content/ecomiccon/kickass_thirsty-f9f106da1128c307755a9edd99bfe8d7.jpg alt=&quot;Kickass is Thirsty&quot; class=&quot;tb-Img tb-Img--fancy&quot; /&gt;
&lt;img src=/assets/content/ecomiccon/working_riker-6d382f826b7f6f14670d7cdfcd91b912.jpg alt=&quot;Riker&quot; class=&quot;tb-Img tb-Img--fancy&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;the-photo-shoot&quot;&gt;The Photo Shoot&lt;/h4&gt;

&lt;p&gt;We pile into the photo studio and find our counterparts.&lt;/p&gt;

&lt;p&gt;&lt;img src=/assets/content/ecomiccon/photo_thrones-56a0bb68c59c7117d6a0e77e1307e7d3.jpg alt=&quot;Game of Thrones&quot; class=&quot;tb-Img tb-Img--fancy&quot; /&gt;
&lt;img src=/assets/content/ecomiccon/photo_power-c75f480d68fc4d9e3fe0bcb92be8e783.jpg alt=&quot;Power Rangers&quot; class=&quot;tb-Img tb-Img--fancy&quot; /&gt;
&lt;img src=/assets/content/ecomiccon/photo_marvel-15d2e72878c54b4c3157f5a056deacd1.jpg alt=&quot;Marvel&quot; class=&quot;tb-Img tb-Img--fancy&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-whole-team&quot;&gt;The Whole Team&lt;/h3&gt;

&lt;p&gt;We put a lot of work into organizing our event and building our costumes. What a great day!
&lt;img src=/assets/content/ecomiccon/all_of_ecomiccon-be7911f0a6177ee3614213e84e3bb4e3.jpg alt=&quot;All of eComiccon&quot; class=&quot;tb-Img tb-Img--fancy&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 31 Oct 2014 09:00:00 -0400</pubDate>
        <link>http://technology.customink.com//blog/2014/10/31/ecomic-con-2014</link>
        <guid isPermaLink="true">http://technology.customink.com//blog/2014/10/31/ecomic-con-2014</guid>
      </item>
    
      <item>
        <title>Welcome Arild Shirazi!</title>
        <description>&lt;p&gt;&lt;img src=/assets/content/arild-shirazi-9583f83ac640ae421ec98a76f4e1459b.jpg alt=&quot;Arild Shirazi&quot; class=&quot;tb-Img tb-Img--responsive tb-Img--fancy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;He &lt;a href=&quot;http://technology.customink.com/blog/2014/09/26/ruby-meta-method-madness&quot;&gt;beat us to the punch&lt;/a&gt;, but we&amp;#39;d
like to give &lt;a href=&quot;https://github.com/ashirazi&quot;&gt;Arild&lt;/a&gt; a warm welcome to CustomInk.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;You may already know Arild as an organizer of RubyNation and NationJS. And you
may have run into him (no pun intended) on the local autocross circuit.&lt;/p&gt;

&lt;p&gt;On Danger Squad!, Arild is working on improvements to our &lt;a href=&quot;http://www.customink.com/lab&quot;&gt;design
lab&lt;/a&gt;. The lab, a substantial client-side
application, has served us well for over six years and has evolved to meet the
needs of our customers. In that time, web technologies have also advanced
dramatically. This presents an interesting challenge: how do we balance the
promise of new technologies with the safety of proven implementations?&lt;/p&gt;

&lt;p&gt;These are the types of questions Arild is helping us answer and we hope to talk
more about it here soon. In the meantime, welcome to the team Arild!&lt;/p&gt;
</description>
        <pubDate>Thu, 23 Oct 2014 00:00:00 -0400</pubDate>
        <link>http://technology.customink.com//blog/2014/10/23/welcome-arild-shirazi</link>
        <guid isPermaLink="true">http://technology.customink.com//blog/2014/10/23/welcome-arild-shirazi</guid>
      </item>
    
      <item>
        <title>Managing Your Local Project Repos</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://www.git-scm.com/&quot;&gt;Git&lt;/a&gt; is great for managing a project. And &lt;a href=&quot;http://github.com&quot;&gt;Github&lt;/a&gt; is a great way to share your git managed project with your teammates and the world. But, how do you manage all of those projects locally? I&amp;#39;m not claiming this is the only way or even the best way. It&amp;#39;s just my way of managing the repos I need to have locally. So let&amp;#39;s get down to it.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;projects-namespace&quot;&gt;Projects Namespace&lt;/h3&gt;

&lt;p&gt;I like to put all of the projects under a main projects folder. I use the name projects, but you could use whatever you like: workspace, repos, code, gits, etc...&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-Terminal256&quot; data-lang=&quot;Terminal256&quot;&gt;  projects/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Pretty simple stuff. What&amp;#39;s next?&lt;/p&gt;

&lt;h3 id=&quot;author/project-folder-structure&quot;&gt;Author/Project Folder Structure&lt;/h3&gt;

&lt;p&gt;Whenever I clone a repo I create a folder for the author or organization name that matches up with github then clone the project into that. An easy example would be projects under my account that were created by me. I don&amp;#39;t put forked projects under my name, but I will get to that later.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-Terminal256&quot; data-lang=&quot;Terminal256&quot;&gt;  projects/
  └── nhessler/
      ├── converserver/
      └── hacknut-theme/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And I have projects at customink that I work on so let&amp;#39;s add some of those projects in and see what things look like.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-Terminal256&quot; data-lang=&quot;Terminal256&quot;&gt;  projects/
  ├── customink/
  ¦    ├── fauxhai/
  ¦    ├── gigo/
  ¦    ├── secondbase/
  ¦    └── stoplight/
  └── nhessler/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This should be enough to see the basic structure of how I manage my projects. You can see that each project is located inside of a folder representing the originating author.&lt;/p&gt;

&lt;h3 id=&quot;local-projects&quot;&gt;Local Projects&lt;/h3&gt;

&lt;p&gt;This works great for projects on github, but what about projects you have only on your machine? Well, you could put them under the account you plan to push them to. But, that breaks the convention of projects living under their author namespace. And, it makes it hard to remember what has and hasn&amp;#39;t been pushed up under that account. So, until I&amp;#39;ve pushed a project to github I put them under the _local folder. The _ is added to make sure it&amp;#39;s always at the top of the author list.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-Terminal256&quot; data-lang=&quot;Terminal256&quot;&gt;  projects/
  ├── _local/
  ¦    ├── dotfiles/
  ¦    └── blog/
  ├── customink/
  └── nhessler/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I know, I know. I really should get those pushed to github. but at least I can easily see that they aren&amp;#39;t on github yet and resolve that issue quickly. The _local folder is also great for playing around with projects you don&amp;#39;t ever plan to push github. You can write some code, play around with it, and delete later. when it is time to push it to github then you can move it under the appropriate folder.&lt;/p&gt;

&lt;h3 id=&quot;forked-projects&quot;&gt;Forked Projects&lt;/h3&gt;

&lt;p&gt;As I said earlier, I deal with forked libraries a bit differently. Let&amp;#39;s look at a couple of those projects. Specifically, we&amp;#39;ll look at &lt;a href=&quot;https://github.com/robbyrussell/oh-my-zsh&quot;&gt;oh-my-zsh&lt;/a&gt; by Robby Russel, &lt;a href=&quot;https://github.com/bbatsov/prelude&quot;&gt;prelude&lt;/a&gt; by Bozhidar Batsov, and &lt;a href=&quot;https://github.com/oneKelvinSmith/monokai-emacs&quot;&gt;monokai-emacs&lt;/a&gt; by Kelvin Smith. First, let&amp;#39;s just see the directory structure for these projects.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-Terminal256&quot; data-lang=&quot;Terminal256&quot;&gt;  projects/
  ├── _local/
  ├── bbatsov/
  ¦   └── prelude/
  ├── customink/
  ├── nhessler/
  ├── oneKelvinSmith/
  ¦   └── monokai-emacs/
  └── robbyrussel/
      └── oh-my-zsh/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that each project is under the original author&amp;#39;s name. Why do I do this? There are a couple reasons. First, I like to remember where the projects came from and this helps remind me who the original authors are. Second, project names are not unique. There are forks of projects, and there are projects with the same name that are completely different. Doing a search on github for rails turned up 138K repositories and on the first page 7 out of ten were named &amp;#39;rails&amp;#39; the only difference was author name. the first two projects were &amp;#39;rails/rails&amp;#39; and &amp;#39;capistrano/rails&amp;#39;. Two projects I can easily see people forking. You could complain that maybe capistrano should have used the project name capistrano-rails over rails, but is it worth it? Finally, prelude and oh-my-zsh are libraries that were meant to be used by cloning them to your local machine, and I don&amp;#39;t need or want to fork them to use them. I can just clone them from the original repo.&lt;/p&gt;

&lt;h3 id=&quot;final-thoughts&quot;&gt;Final Thoughts&lt;/h3&gt;

&lt;p&gt;Here are some other things to think about that make this setup a little more useful.&lt;/p&gt;

&lt;p&gt;If you use ZSH it would be helpful to add your projects folder to the CDPATH environment variable. I also add the nhessler and customink folders. This way I can jump to my frequently used projects by name only.&lt;/p&gt;

&lt;p&gt;I also diverge a bit from how github recommends you &lt;a href=&quot;https://help.github.com/articles/fork-a-repo/&quot;&gt;fork and clone a repo&lt;/a&gt;. I still fork the repo, but I then clone the original and set up a remote called &amp;#39;fork&amp;#39; which points at my fork of the repo. I find this matches how I think about forked projects better and seems to be in line with my folder structure as well.&lt;/p&gt;

&lt;p&gt;If you have a workflow that you like to use for managing your repos that differs from, this I would love to hear about it.&lt;/p&gt;
</description>
        <pubDate>Wed, 22 Oct 2014 07:00:00 -0400</pubDate>
        <link>http://technology.customink.com//blog/2014/10/22/managing-your-local-project-repos</link>
        <guid isPermaLink="true">http://technology.customink.com//blog/2014/10/22/managing-your-local-project-repos</guid>
      </item>
    
      <item>
        <title>Open Sourcing a Gem: Part 2</title>
        <description>&lt;h2 id=&quot;considerations-when-open-sourcing&quot;&gt;Considerations when Open Sourcing&lt;/h2&gt;

&lt;p&gt;When open sourcing a gem (or any project, this post can be generalized to not just focus on gems), there are a number of things to consider. The first check is to ensure that the use case is general enough that it is likely to be helpful to other parties. Though the project might never gain many external users, it is a good sanity check before taking on the work to open source the project. Following this there are a number of things to think out, with the purpose of determining a track of work that needs to be taken (if any) before the gem can be open sourced.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;generalize-the-implementation&quot;&gt;Generalize the implementation&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Remove coupled business logic and application specific code.&lt;/li&gt;
&lt;li&gt;Ensure no keys/account information were stored in the repo (even in past commits). Typically not considered a good practice, but it is something to be aware of when releasing the source of a project publicly.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;set-bounds-on-the-responsibilities&quot;&gt;Set bounds on the responsibilities&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;What is the purpose of this gem and what needs is it fulfilling?&lt;/li&gt;
&lt;li&gt;Take a step back from how you currently use the library. What other potential use cases might others use it for? Is it worth generalizing the implementation to aid these other use cases?&lt;/li&gt;
&lt;li&gt;Set bounds on the responsibilities that the gem will take care of.&lt;/li&gt;
&lt;li&gt;What will the gem provide and what is left up to the user? In the case of Signalman, we allow users to customize the URL of the Signalman admin page, but it is up to the user to provide additional authentication besides obscurity. Signalman is a gem designed to aid with A/B testing, not authentication.

&lt;ul&gt;
&lt;li&gt;Try to stick to the gem&amp;#39;s core competencies. Do not add features at a whim to quell user requests. This can cause a gem to grow out of control and become hard to manage or even discern its original purpose/intent.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;consider-strategies-to-manage-repository-ownership&quot;&gt;Consider strategies to manage repository ownership&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Like it or not, becoming a maintainer is a big responsibility. If you are open sourcing a project with a team, this will greatly ease the burden, but you must still consider processes to manage external pull requests and issues that arise.&lt;/li&gt;
&lt;li&gt;Giving the user power and encouraging pull requests and a community that supports each other&amp;#39;s issues can also relieve the burden of being a project maintainer. You can help this process by adding documentation for contributing and making it easy for other parties to contribute to the project. This also means providing help to newer developers; you never know who might become a leading contributor in the future.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;more-from-this-series&quot;&gt;More from this series&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;/blog/2014/09/12/open-sourcing-a-gem-pt-1/&quot;&gt;Part 1&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 20 Oct 2014 00:00:00 -0400</pubDate>
        <link>http://technology.customink.com//blog/2014/10/20/open-sourcing-a-gem-pt-2</link>
        <guid isPermaLink="true">http://technology.customink.com//blog/2014/10/20/open-sourcing-a-gem-pt-2</guid>
      </item>
    
      <item>
        <title>Better Hash Injection using each_with_object</title>
        <description>&lt;p&gt;A common Ruby pattern for injecting values from an Array into to a Hash
is to use the Enumerable#inject method and pass the hash as the memo. If you
had an enumeration of User objects, you might convert them to a hash
with something like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;c1&quot;&gt;# build a hash of { name =&amp;gt; email }&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;inject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({})&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;memo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;email&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;memo&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# you must return the memo each time!&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While this will reduce the Array down to a Hash, it has the gotcha that
you must return the memo each time. Enumerable#inject sets the memo to the return value of the block.
If you forget to return the memo hash, your next memo will be set to the result of the assignment
which is user.email.&lt;/p&gt;

&lt;p&gt;There are some alternatives you can use to avoid the explicit return for the memo. Hash#merge is a
popular choice. Hash#merge will combine the current hash with the new values and return a new hash. Which sets
the memo to the new hash:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;c1&quot;&gt;# build a hash of { name =&amp;gt; email }&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;inject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({})&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;memo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Hash#merge returns a hash lest you forget to return the memo. It could be argued that using
merge is not clear in this use case. Using plain merge also creates a new hash each time. This
could be mitigated with the Hash#merge! which updates and returns the current hash. But it does
not clean up our ruby code. We&amp;#39;d prefer if our intentions were presented in a clear and concise way.&lt;/p&gt;

&lt;p&gt;Why are we so intent to use the Enumerable#inject method when building hashes? Enumerable#inject is wonderful when
reducing a list, like determining the sum of values from the list. For example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;   &lt;span class=&quot;c1&quot;&gt;# inject is great for reducing a list to a value&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;inject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But not so great when building a hash (see above). There is another way! Enumerable also has a less
commonly used method: Enumerable#each_with_object, which solves our issues. Enumerable#each_with_object
passes the same memo to each iteration of the block. It does not reassign it to the return value. This
gives us the behavior we expected with Enumerable#inject but without the caveats.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each_with_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({})&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# note object and memo reversed from #inject&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;memo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;email&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ah! Nice and clean. Our intentions are clear. The code in the block is exactly what you would expect. The block
is called for each element and the same memo object is passed in for each iteration. You
set the name/value in the hash and need not concern yourself with the return value.&lt;/p&gt;

&lt;p&gt;Using Enumerable#inject to build a hash never felt comfortable. It always felt like a hack. Ruby&amp;#39;s Enumerable#inject
was never a good fit for Hash building, but Enumerable#each_with_object fits just right.&lt;/p&gt;

&lt;p&gt;Enumerable is a powerful mixin. Even after many years of coding with it in Ruby, we find new ways of expressing
ourselves and revealing our intentions. Next time you have to reduce an Array to a Hash, don&amp;#39;t fall into
the #inject trap. Use Enumerable#each_with_object and impress your friends and family.&lt;/p&gt;
</description>
        <pubDate>Tue, 14 Oct 2014 00:00:00 -0400</pubDate>
        <link>http://technology.customink.com//blog/2014/10/14/better-hash-injection-using-each-with-object</link>
        <guid isPermaLink="true">http://technology.customink.com//blog/2014/10/14/better-hash-injection-using-each-with-object</guid>
      </item>
    
      <item>
        <title>Understanding and Using Sass Load Paths</title>
        <description>&lt;p&gt;One of the biggest hurdles in effectively using &lt;a href=&quot;http://sass-lang.com/&quot;&gt;Sass&lt;/a&gt; is correctly setting the load path when using Sass libraries. Surprisingly not all libraries set up the load paths correctly. Some libraries add themselves to the &lt;code&gt;Sass.load_paths&lt;/code&gt; or the &lt;code&gt;SASS_PATH&lt;/code&gt; environment variable, but stomp on paths that were already loaded, which introduces problems like requirements for the order dependencies are loaded. It is clear that the current state of things could use improvement.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;For those of you that are aware of the challenges using the &lt;code&gt;SASS_PATH&lt;/code&gt; environment variable and just want a solution to help manage and wire up the &lt;code&gt;SASS_PATH&lt;/code&gt;, the &lt;a href=&quot;https://rubygems.org/gems/sass_paths&quot;&gt;SassPaths gem&lt;/a&gt; provides utilities to easily include directories, Sass gems, and Bower Sass dependencies in the &lt;code&gt;SASS_PATH&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;why-do-load-paths-matter?&quot;&gt;Why do load paths matter?&lt;/h2&gt;

&lt;p&gt;The Sass load paths let Sass know the directories it should look in when trying to import files. Correctly setting up the load paths allow us to import a Sass library with its name, rather than having to use the relative path to the resource.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sass&quot; data-lang=&quot;sass&quot;&gt;&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;susy&#39;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// versus
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;bundle/ruby/2.1.0/gems/susy-2.1.3/sass/susy&#39;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It is important to write libraries such that they append to the Sass load paths, assuming that other libraries may be loaded before or after them, instead of overwriting any libraries that might have appended to the load paths first.&lt;/p&gt;

&lt;h2 id=&quot;where-sass-is-headed&quot;&gt;Where Sass is headed&lt;/h2&gt;

&lt;p&gt;To help solve the load path problem, Sass 3.2 introduced the &lt;code&gt;SASS_PATH&lt;/code&gt; environment variable, an environment variable that can be hooked into to set the load paths for Sass. As first specified in the &lt;a href=&quot;https://github.com/sass/sass/blob/stable/doc-src/SASS_CHANGELOG.md#smaller-improvements-2&quot;&gt;3.2 change log&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Sass.load_paths is initialized to the value of the SASS_PATH environment variable. This variable should contain a colon-separated list of load paths (semicolon-separated on Windows).&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;code&gt;SASS_PATH&lt;/code&gt; environment variable is not just an optional alternative, it is at the core of where Sass is headed regarding setting up/managing its load paths. In fact, Sass 3.4 introduces a backwards incompatibility with how the load path was handled before. As specified in the &lt;a href=&quot;https://github.com/sass/sass/blob/stable/doc-src/SASS_CHANGELOG.md#backwards-incompatibilities----must-read&quot;&gt;Sass 3.4 change log&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;The current working directory will no longer be placed onto the Sass load path by default. If you need the current working directory to be available, set SASS_PATH=. in your shell&amp;#39;s environment.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Another significant change occurring in the Sass community is that Sass no longer requires Ruby. &lt;a href=&quot;http://libsass.org/&quot;&gt;LibSass&lt;/a&gt; brings a C implementation of Sass to the table to remove the requirement of Ruby as well as provide a significant performance increase in compilation. LibSass also &lt;a href=&quot;https://github.com/sass/libsass/issues/90&quot;&gt;implements&lt;/a&gt; the &lt;code&gt;SASS_PATH&lt;/code&gt; environment variable so there is no denying that the &lt;code&gt;SASS_PATH&lt;/code&gt; is the accepted way forward. This is where the &lt;code&gt;SASS_PATH&lt;/code&gt; environment variable really shines, it can be configured to provide a common interface for setting up Sass load paths despite the implementation of Sass (Ruby, C, or otherwise).&lt;/p&gt;

&lt;p&gt;The problem with LibSass is that it currently only implements features up to Sass 3.2, meaning most notably, it does not support Sass maps. The good news is that the core team recently &lt;a href=&quot;https://github.com/sass/libsass/wiki/The-LibSass-Compatibility-Plan&quot;&gt;announced&lt;/a&gt; that they plan on getting LibSass to be 100% compatible with Ruby Sass.&lt;/p&gt;

&lt;h2 id=&quot;all-your-sass-paths-are-belong-to-us&quot;&gt;All Your Sass Paths Are Belong To Us&lt;/h2&gt;

&lt;p&gt;If &lt;code&gt;SASS_PATH&lt;/code&gt; is the way to go, why does it seem that so many projects are having difficulties setting the path correctly? While I cannot give a definitive answer, my guess is that it takes time for change to permeate through all resources and despites Sass&amp;#39; newfound maturity, users have grown accustomed to hacking their own paths together. We no longer need to hack together the load paths, these should just work as long as we use the provided environment variable as an interface.&lt;/p&gt;

&lt;p&gt;Though the environment variable provides a common interface to hook into, there are many ways Sass libraries might be pulled into a project. How do we rectify setting up the &lt;code&gt;SASS_PATH&lt;/code&gt; correctly when these paths might come via Ruby gems, Bower dependencies, or the file directory? We are releasing the &lt;a href=&quot;https://rubygems.org/gems/sass_paths&quot;&gt;SassPaths gem&lt;/a&gt; to provide a set of easy to use utility methods to include any Sass dependency, whether it comes from Bower, Ruby gems, or elsewhere. SassPaths also plays nicely with Ruby on Rails. You can read the &lt;a href=&quot;https://github.com/customink/sass_paths/blob/master/README.md&quot;&gt;documentation&lt;/a&gt; on GitHub, but I will provide a quick overview below.&lt;/p&gt;

&lt;h3 id=&quot;sasspaths-primer&quot;&gt;SassPaths Primer&lt;/h3&gt;

&lt;p&gt;First you will need to &lt;code&gt;bundle install&lt;/code&gt; the SassPaths gem in your application.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Gemfile.rb&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;sass_paths&#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now all you need is an initialization file that will run when your application starts, which will make use of the SassPaths utilities to setup the &lt;code&gt;SASS_PATH&lt;/code&gt;. If you are using Rails, you can simply add this file to your initializers directory.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# sass_paths_init.rb&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;sass_paths&#39;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# append a directory, or list of directories to SASS_PATH&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;SassPaths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/my/first/sass/path&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;/my/second/sass/path&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# append a Ruby gem&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;SassPaths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append_gem_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gem_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;directory_in_gem_that_contains_sass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# append all Sass Bower components&#39; directories&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;SassPaths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append_bower_components&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bower_components_directory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;acknowledgements&quot;&gt;Acknowledgements&lt;/h4&gt;

&lt;p&gt;Many thanks to my fellow CustomInk teammates, Stafford Brunk and Ken Collins. Stafford co-authored the gem with me and Ken has been a driving force in adopting the &lt;code&gt;SASS_PATH&lt;/code&gt; environment variable as well as &lt;a href=&quot;https://github.com/at-import/Sassy-Maps/pull/6&quot;&gt;epic pull requests&lt;/a&gt; to fix the problems existing repositories have with the &lt;code&gt;SASS_PATH&lt;/code&gt;.&lt;/p&gt;
</description>
        <pubDate>Thu, 09 Oct 2014 00:00:00 -0400</pubDate>
        <link>http://technology.customink.com//blog/2014/10/09/understanding-and-using-sass-load-paths</link>
        <guid isPermaLink="true">http://technology.customink.com//blog/2014/10/09/understanding-and-using-sass-load-paths</guid>
      </item>
    
      <item>
        <title>Taking a peek at Active Record Proxies</title>
        <description>&lt;p&gt;If you&amp;#39;ve worked in a Rails project before, you&amp;#39;ve undoubtedly set up associations beteween your models. Active Record provides a clean and simple way in setting up these associations, while hiding a lot of the complexity behind the scenes.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;One thing that I found interesting is how method calls are forwarded between associated models. Let&amp;#39;s take a look at a simple example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Team&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:players&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Players&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;belongs_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:team&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When we say &lt;code&gt;team.players&lt;/code&gt;, what are we really working with? One&amp;#39;s first reaction might be to inspect it&amp;#39;s class. When inspecting &lt;code&gt;team.players&lt;/code&gt;, we get back an &lt;code&gt;Array&lt;/code&gt;, but Rails is intentionally lying to us. It&amp;#39;s actually an Active Record class called CollectionProxy!&lt;/p&gt;

&lt;h3 id=&quot;association-proxies&quot;&gt;Association Proxies&lt;/h3&gt;

&lt;p&gt;So what exactly is this proxy class? From the &lt;a href=&quot;http://api.rubyonrails.org/classes/ActiveRecord/Associations/CollectionProxy.html&quot;&gt;Rails documentation&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Association proxies in Active Record are middlemen between the object that holds the association, known as the @owner, and the actual associated object, known as the @target.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In our case, the &lt;code&gt;@owner&lt;/code&gt; is the team while the &lt;code&gt;@target&lt;/code&gt; is the players collection. &lt;/p&gt;

&lt;p&gt;Back to the original question, how does &lt;code&gt;team.players.class&lt;/code&gt; return an Array? The CollectionProxy class does some metaprogramming to make the magic happen. &lt;/p&gt;

&lt;p&gt;First it undefines it&amp;#39;s own &lt;code&gt;#class&lt;/code&gt; method using &lt;code&gt;undef_method&lt;/code&gt; &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Rails 3.2&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Associations::ActiveRecord::CollectionProxy&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;instance_methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;undef_method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/^(?:nil\?|send|object_id|to_a)$|^__|^respond_to|proxy_/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Secondly, it implements &lt;code&gt;#method_missing&lt;/code&gt; to delegate unknown methods to the &lt;code&gt;@target&lt;/code&gt;, or in our case, the players array.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Rails 3.2&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Within def method_missing(method, *args, &amp;amp;block)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;respond_to?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proxy_association&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;klass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;respond_to?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;respond_to?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;load_target&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;respond_to?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NoMethodError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/ for #&amp;lt;.*$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; via proxy for &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Therefore, our call to &lt;code&gt;class&lt;/code&gt; will be picked up by method_missing.&lt;/p&gt;

&lt;p&gt;By having this proxy class, ActiveRecord can hook into certain methods and determine whether to perform database queries or used cache records.&lt;/p&gt;
</description>
        <pubDate>Tue, 07 Oct 2014 00:00:00 -0400</pubDate>
        <link>http://technology.customink.com//blog/2014/10/07/rails-association-proxies</link>
        <guid isPermaLink="true">http://technology.customink.com//blog/2014/10/07/rails-association-proxies</guid>
      </item>
    
      <item>
        <title>Unit Testing Sass Frameworks</title>
        <description>&lt;p&gt;Building the &lt;a href=&quot;/blog/2014/09/08/building-the-customink-living-style-guide&quot;&gt;living style guide&lt;/a&gt; for &lt;a href=&quot;http://www.customink.com&quot;&gt;CustomInk&amp;#39;s&lt;/a&gt; new mobile/responsive sites required that we stand on the shoulders of other great frameworks. All of them well authored and hence well tested. But as we built more tools on top of these giants, we felt the need to test our own framework&amp;#39;s code and thus began the search for Sass/CSS testing methods. After surveying the current state of testing, I found myself let down.&lt;/p&gt;

&lt;p&gt;To be fair, there are some really clever solutions for this problem and some may work for you. One example is the &lt;a href=&quot;https://github.com/ericam/true&quot;&gt;True&lt;/a&gt; unit test framework for Sass. This project is written by Eric Suzanne for his awesome &lt;a href=&quot;https://github.com/ericam/susy&quot;&gt;Susy&lt;/a&gt; grid framework. True allows you to write assertions in Sass itself but is limited to only value-based assertions. Since our living style guide is built within a Ruby gem, we felt that a solution closer to Ruby would fit our needs. That said, the solutions I propose below can be used by any Sass framework if you choose to test that framework with Ruby.&lt;/p&gt;

&lt;h3 id=&quot;sass-framework-extensions&quot;&gt;Sass Framework Extensions&lt;/h3&gt;

&lt;p&gt;First, we need some Sass to test. Our awesome framework wants more Sass list power! So we created these two fancy Sass functions below for accessing the first or last item of a list.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scss&quot; data-lang=&quot;scss&quot;&gt;&lt;span class=&quot;k&quot;&gt;@function&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;my-first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;@return&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;nth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@function&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;my-last&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;@return&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;nth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;From here, let&amp;#39;s pretend that these extensions are loaded whenever you &lt;code&gt;@import &amp;quot;my_framework&amp;quot;;&lt;/code&gt;. With great power comes great responsibility, hence we need to test them. But how?&lt;/p&gt;

&lt;h3 id=&quot;enter-ruby-here-doc-strings&quot;&gt;Enter Ruby Here-Doc Strings&lt;/h3&gt;

&lt;p&gt;I have always wanted to use one of the many Ruby &lt;a href=&quot;http://makandracards.com/makandra/1675-using-heredoc-for-prettier-ruby-code&quot;&gt;here-doc&lt;/a&gt; string methods and testing Sass felt like a great opportunity to pay closer attention to these. Here is what I mocked up for our ideal Minitest assertion syntax. It uses the &lt;code&gt;&amp;lt;&amp;lt;-FLAG&lt;/code&gt; vs the &lt;code&gt;&amp;lt;&amp;lt;FLAG&lt;/code&gt; here-doc termination sequence so that indentation is maintained.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;my-red&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;assert_sass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SASS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CSS&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
    .test { color: $my-red; }
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;  SASS&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
    .test { color: #ee3524; }
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;  CSS&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This looks really clean to me. It is easy to identify that we have some Sass at the top that we want to render to CSS below. If you are lucky, your editor will even syntax highlight each here-doc string too. Astute testing fans might complain that our fictional &lt;code&gt;assert_sass&lt;/code&gt; arguments&amp;#39; are backwards and that the expected CSS value needs to be the first parameter. I get it, but I think it looks and reads cleaner the other way around. And yes, I know it is &lt;a href=&quot;http://sassnotsass.com&quot;&gt;Sass not SASS&lt;/a&gt; but I wanted to stick with here-doc conventions and uppercase my termination sequences.&lt;/p&gt;

&lt;h3 id=&quot;implementation-time&quot;&gt;Implementation Time&lt;/h3&gt;

&lt;p&gt;Now that the vision is out of the way, we need to make &lt;code&gt;assert_sass&lt;/code&gt; work. Our project added the following Ruby methods to a &lt;code&gt;SassTestHelpers&lt;/code&gt; module that was in turn mixed into our base spec case. The details of where you put them in your own project is up to you.&lt;/p&gt;

&lt;p&gt;That out of the way, the first thing we will need is a helper to render Sass.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;render_sass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:syntax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:scss&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;key?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:syntax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:compact&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;key?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Sass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Engine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;render&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first argument here is a template string to render and some options to pass down to the Sass rendering engine. Set the default syntax to your own needs. But I suggest keeping the &lt;code&gt;:style&lt;/code&gt; option set to &lt;code&gt;:compact&lt;/code&gt;. We felt this was the best output method for tests. Lastly, this method does not leverage the Sass cache for safety. Just say no to Heisenbugs!&lt;/p&gt;

&lt;p&gt;Now we need a method to render a string of Sass within our framework&amp;#39;s context. Luckily our gem already adds itself to the Sass load path via the &lt;code&gt;SASS_PATH&lt;/code&gt; environment variable. So all we have to do is import our awesome framework before whatever Sass we want to test. Again, Ruby&amp;#39;s here-doc strings come in handy.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;render_my_framework&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;render_sass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TEMPLATE&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
    @import &quot;my_framework&quot;;
    &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;  TEMPLATE&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So with only two helper methods, we can finally implement &lt;code&gt;assert_sass&lt;/code&gt;. Since Minitest::Spec builds on top of unit style assertions, we delegate our assertion to &lt;code&gt;assert_equal&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;assert_sass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sass_template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expected_css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expected_css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;squish&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;actual&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render_my_framework&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sass_template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;squish&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;assert_equal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actual&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This time we make sure to switch the expected and actual to line up with the proper expectation order. If we did not do this, the test error output would be backwards. Lastly, we are using ActiveSupport &lt;a href=&quot;http://apidock.com/rails/ActiveSupport/CoreExtensions/String/Filters/squish&quot;&gt;squish&lt;/a&gt; string extension which removes consecutive whitespace not only from the ends of a string, but from within the middle too. This makes your CSS assertions tolerant to irrelevant white space introduced by indented here-doc strings.&lt;/p&gt;

&lt;h3 id=&quot;final-sass-tests&quot;&gt;Final Sass Tests&lt;/h3&gt;

&lt;p&gt;The final tests for our Sass framework&amp;#39;s list extensions are below.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;my-first&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;assert_sass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SASS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CSS&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
    $list: (one two three);
    .test { content: my-first($list); }
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;  SASS&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
    .test { content: one; }
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;  CSS&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;my-last&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;assert_sass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SASS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CSS&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
    $list: (one two three);
    .test { content: my-last($list); }
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;  SASS&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
    .test { content: three; }
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;  CSS&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The result is a simple declarative test style that boosts our confidence level as we move our living style guide&amp;#39;s Sass framework forward. We can literally test anything from values to full expressions. Ruby is a great tool for testing and makes authoring Sass frameworks fun. I hope that you can use something like this within your own project and thanks for reading!&lt;/p&gt;

&lt;h3 id=&quot;other-resources&quot;&gt;Other Resources&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/blog/2014/09/08/building-the-customink-living-style-guide/&quot;&gt;Building the CustomInk Living Style Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ericam/true&quot;&gt;True Sass Unit Testing Framework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/cburgmer/csscritic&quot;&gt;CSS Critic Regression Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://makandracards.com/makandra/1675-using-heredoc-for-prettier-ruby-code&quot;&gt;Ruby here-doc Strings&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 30 Sep 2014 00:00:00 -0400</pubDate>
        <link>http://technology.customink.com//blog/2014/09/30/unit-testing-sass-frameworks</link>
        <guid isPermaLink="true">http://technology.customink.com//blog/2014/09/30/unit-testing-sass-frameworks</guid>
      </item>
    
      <item>
        <title>Ruby Meta - Method Madness</title>
        <description>&lt;p&gt;Ruby metaprogramming is fun and very rewarding, but also a little bewildering. One of the great things about Ruby is that you can dynamically add methods to objects.  Ruby gives us &lt;code&gt;#eval&lt;/code&gt;, &lt;code&gt;#instance_eval&lt;/code&gt;, and &lt;code&gt;#class_eval&lt;/code&gt; for this purpose, but the names aren’t as clear as one might expect, and can lead to some confusion. Hopefully the code examples below help clarify how each is used, and get on on the way to meta-mastery.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;One important thing to remember in Ruby is that objects are instances of a class, but classes are also objects... classes are instances of class &lt;code&gt;Class&lt;/code&gt;!!&lt;/p&gt;

&lt;p&gt;&lt;code&gt;class_eval(string)&lt;/code&gt; means that we are defining a class, and we are eval&amp;#39;ing in that context basically, the equivalent of:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ClassDemo&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Demo 1 - &lt;code&gt;class_eval&lt;/code&gt; on a class:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;speak_method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;def speak; puts &quot;hi&quot;; end&#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ClassDemo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;ClassDemo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;class_eval&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;speak_method&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;ClassDemo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;speak&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# hi&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;ClassDemo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;speak&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# NoMethodError: undefined method `speak&#39; for ClassDemo:Class&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Demo 1 corollary - &lt;code&gt;class_eval&lt;/code&gt; on an instance:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# No such thing!&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ClassDemo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;class_eval&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;speak_method&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# NoMethodError: undefined method `class_eval&#39; for #&amp;lt;ClassDemo:0x...&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;instance_eval(string)&lt;/code&gt; means that we are eval&amp;#39;ing for a specific instance when instance_eval&amp;#39;ing on a class, that instance is the class&amp;#39;s instance!!&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InstanceDemo&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Demo 2 - &lt;code&gt;instance_eval&lt;/code&gt; on an instance:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;speak_method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;def speak; puts &quot;hi&quot;; end&#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InstanceDemo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;id1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;InstanceDemo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;id2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;InstanceDemo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;id1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;instance_eval&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;speak_method&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;id1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;speak&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# hi&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;id2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;speak&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# NoMethodError: undefined method `speak&#39; for #&amp;lt;InstanceDemo:0x...&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Demo 2 corollary - &lt;code&gt;instance_eval&lt;/code&gt; on a class:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;speak_method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;def speak; puts &quot;hi&quot;; end&#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InstanceDemo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;InstanceDemo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;instance_eval&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;speak_method&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;InstanceDemo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;speak&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# hi&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;InstanceDemo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;speak&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# NoMethodError: undefined method `speak&#39; for #&amp;lt;InstanceDemo:0x...&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So hopefully this helps clarify the distinctions between &lt;code&gt;#eval&lt;/code&gt;, &lt;code&gt;#class_eval&lt;/code&gt;, and &lt;code&gt;#instance_eval&lt;/code&gt;. The next time you want to dynamically modify the methods to objects (and classes), you’ll know which of these methods to choose!&lt;/p&gt;
</description>
        <pubDate>Fri, 26 Sep 2014 00:00:00 -0400</pubDate>
        <link>http://technology.customink.com//blog/2014/09/26/ruby-meta-method-madness</link>
        <guid isPermaLink="true">http://technology.customink.com//blog/2014/09/26/ruby-meta-method-madness</guid>
      </item>
    
      <item>
        <title>Migrating Session Flash from Rails 3.0.x to 3.2.x</title>
        <description>&lt;p&gt;When upgrading a high-traffic Rails application from 3.0.x to 3.2.x, existing
sessions with Flash data will raise &lt;strong&gt;dump format error&lt;/strong&gt; during the session unmarshalling
step of the users next request. For an ostensibly minor patch &lt;a href=&quot;http://semver.org/&quot;&gt;(see semver)&lt;/a&gt;, breaking
user sessions is an unexpected surprise and a real bummer for your users.&lt;/p&gt;

&lt;p&gt;The Rails breaking change to &lt;code&gt;FlashHash&lt;/code&gt; was to stop inheriting from Hash:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Rails 3.0 - See: http://git.io/X8WqIw&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FlashHash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hash&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Rails 3.2 - See: http://git.io/jJ_Qhw&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FlashHash&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Dealing with serialization errors can be notoriously difficult, even more so because these were occurring deep
in the framework. So, we monkey patched &lt;code&gt;ActiveRecord::SessionStore::Session&lt;/code&gt; to remove the offending Flash data.
The possible loss was a notification displayed on the page, the benefit was maintaining user sessions across the
upgrade deployment.&lt;/p&gt;

&lt;p&gt;If we catch the &lt;strong&gt;dump format error&lt;/strong&gt;, assume it&amp;#39;s the Flash and delete it, the remainder of the session
may be unmarshalled and accessed.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SessionStore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;class_eval&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;

 &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;unmarshal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;

   &lt;span class=&quot;n&quot;&gt;marshalled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;decoded&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;decode64&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;marshalled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Marshal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decoded&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ArgumentError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ae&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ae&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/dump format error/&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;with_alternate_flash_klass&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;marshalled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Marshal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decoded&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;marshalled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;flash&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ae&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

   &lt;span class=&quot;n&quot;&gt;marshalled&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

 &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We start by monkey patching the &lt;code&gt;ActiveRecord::SessionStore::Session#unmarshal&lt;/code&gt; method to rescue
&lt;code&gt;ArgumentError&lt;/code&gt;. &lt;a href=&quot;https://github.com/rails/rails/blob/3-2-stable/activerecord/lib/active_record/session_store.rb#L59-L61&quot;&gt;see original method&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If the &lt;code&gt;ArgumentError&lt;/code&gt; message is &lt;strong&gt;dump format error&lt;/strong&gt;, we use a back-ported &lt;code&gt;FlashHash&lt;/code&gt; implementation and attempt to decode again. This
time we delete the &amp;#39;flash&amp;#39; data and return the unmarshalled session. Going forward, the session should be valid because new Flash data will
be from the current &lt;code&gt;FlashHash&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;In the monkey patched &lt;code&gt;ActiveRecord::SessionStore::Session#unmarshal&lt;/code&gt; above, you&amp;#39;ll notice the &lt;code&gt;with_alternate_flash_klass&lt;/code&gt; block
for the second attempt to unmarshal. This method takes the block to execute and handles the redefining of the &lt;code&gt;FlashHash&lt;/code&gt; constant for you. It
conveniently restores the &lt;code&gt;FlashHash&lt;/code&gt; after the unmarshalling.&lt;/p&gt;

&lt;p&gt;First, we create helper method to dynamically create the alternate &lt;code&gt;FlashHash&lt;/code&gt; class:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;alternate_flash_klass&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActionDispatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Flash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;FlashHash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ancestors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;include?&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hash&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#rails3.2 FlashHash&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;
        &lt;span class=&quot;vi&quot;&gt;@used&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
        &lt;span class=&quot;vi&quot;&gt;@closed&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
        &lt;span class=&quot;vi&quot;&gt;@flashes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
        &lt;span class=&quot;vi&quot;&gt;@now&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#rails3.0 FlashHash&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;
        &lt;span class=&quot;vi&quot;&gt;@used&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using &lt;code&gt;Class.new()&lt;/code&gt;, we have the option of passing in a parent, which we do for the rails 3.0 version.&lt;/p&gt;

&lt;p&gt;Next, we need a method to swap the &lt;code&gt;FlashHash&lt;/code&gt; and execute a block:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;with_alternate_flash_klass&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;temporary_flash_hash_klass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alternate_flash_klass&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;original_flash_hash_klass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActionDispatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Flash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;FlashHash&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;ActionDispatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Flash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:remove_const&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:FlashHash&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;ActionDispatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Flash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;const_set&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;FlashHash&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temporary_flash_hash_klass&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt;

  &lt;span class=&quot;no&quot;&gt;ActionDispatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Flash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:remove_const&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:FlashHash&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;ActionDispatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Flash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;const_set&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;FlashHash&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;original_flash_hash_klass&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This saves the current &lt;code&gt;FlashHash&lt;/code&gt; in &lt;code&gt;original_flash_hash_klass&lt;/code&gt;, redefines the constant. When the block
is yielded, the unmarshal is attempted with the back-ported &lt;code&gt;FlashHash&lt;/code&gt;. Then we restore the original &lt;code&gt;FlashHash&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Astute readers, will notice &lt;code&gt;alternate_flash_klass&lt;/code&gt; will provide a back-port or forward-port implementation of &lt;code&gt;FlashHash&lt;/code&gt;.
This allows us to deploy Rails 3.2 and rollback to Rails 3.0. If you deployed Rails 3.2, allowed some sessions to be
persisted, then rolled back, those sessions would be corrupt. This implementation supports going forward and backward
with only a loss of Flash notifications.&lt;/p&gt;

&lt;h3 id=&quot;config/initializers/rails32_session_upgrade_patches.rb&quot;&gt;config/initializers/rails32_session_upgrade_patches.rb&lt;/h3&gt;

&lt;p&gt;You can add this code to an initialization file. You may only need it for 30 days or until your sessions expire. We
have a &lt;strong&gt;warn&lt;/strong&gt; so your reminded this monkey patch is still present in your code.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# ActionDispatch::Flash::FlashHash changed between 3.0 and 3.2&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Rails 3.0.x FlashHash inherits from Hash, this was removed in Rails 3.2.x&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# if a session was created in 3.0.x, after deploy we would receive&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# &#39;dump format error&#39; when trying to deserialize the session&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# this monkey patch attempts to unmarshal with an alternate version&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# of FlashHash and deletes it if successful&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;warn&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;[TEMPORARY] Loading session monkey patches for Rails 3.0.x =&amp;gt; 3.2.x upgrade&quot;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SessionStore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;class_eval&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;unmarshal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;marshalled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;decoded&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;decode64&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;marshalled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Marshal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decoded&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ArgumentError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ae&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ae&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/dump format error/&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;with_alternate_flash_klass&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;marshalled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Marshal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decoded&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;marshalled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;flash&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ae&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;marshalled&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;alternate_flash_klass&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActionDispatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Flash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;FlashHash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ancestors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;include?&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hash&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#rails3.2 FlashHash&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;
          &lt;span class=&quot;vi&quot;&gt;@used&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
          &lt;span class=&quot;vi&quot;&gt;@closed&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
          &lt;span class=&quot;vi&quot;&gt;@flashes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
          &lt;span class=&quot;vi&quot;&gt;@now&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#rails3.0 FlashHash&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;
          &lt;span class=&quot;vi&quot;&gt;@used&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;with_alternate_flash_klass&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;temporary_flash_hash_klass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alternate_flash_klass&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;original_flash_hash_klass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActionDispatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Flash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;FlashHash&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;ActionDispatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Flash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:remove_const&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:FlashHash&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;ActionDispatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Flash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;const_set&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;FlashHash&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temporary_flash_hash_klass&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt;

    &lt;span class=&quot;no&quot;&gt;ActionDispatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Flash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:remove_const&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:FlashHash&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;ActionDispatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Flash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;const_set&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;FlashHash&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;original_flash_hash_klass&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;bonus!-tests&quot;&gt;Bonus! Tests&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; you will need to copy session from your application for these
tests to pass. The session data below is invalid.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;test_helper&#39;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Rails32SessionUpgradePatchesTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveSupport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TestCase&lt;/span&gt;

  &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;remove flash from rails 3.0.x sessions in rails 3.2.x&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rails30_session&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;7CUkiDnByb2R1Y3RpZAY6BkVGSSIKMDExMDQGOwBUSSIMbGFiX3VybAY7
    AEYiNGh0dHA6Ly93d3cuY3VzdG6taW5rLmNvbS9sYWI/Y2lkPWNobTAtMDAx
    akxVVlYyOWVxVHRPQk9ES1NCNFliVjVWUT0GOwBGSSIKZmxhc2gGOwBGSUM6
    JUFjdGlvbkRpc3BhdGNoOjpGbGFzaDo6Rmxhc2hIYXNoewY6CmVycm9yewc6
    IGluZm9ybWF0aW9uLgY7AEY6DG1lc3NhZ2VJIiZQbGVhc2UgZmlsbCBpbiBh
    IHJlY2lwaWVudCBiZWxvdy4GOwBGBjoKQHVzZWRvOghTZXQGOgpAaGFzaHsG
    OwdU&#39;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SessionStore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;unmarshal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rails30_session&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assert_nil&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;flash&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/^3\.2/&lt;/span&gt;

  &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;remove flash from rails 3.2.x sessions in rails 3.0.x&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rails32_session&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;7BkkiCmZsYXNoBjoGRUZvOiVBY3Rpb25EaXNwYXRjaDo6Rmxhc2g6OkZs
    YXNoSGFzaAk6CkB1c2VkbzoIU2V0BjoKQGhhc2h7BjoJd2FyblQ6DEBjbG9z
    ZWRGOg1AZmxhc2hlc3sGOwp7BjoMbWVzc2FnZUkiAcJQbGVhc2Ugbm90ZSB0
    dHdvcmsgYmVmb3JlIHByb2NlZWRpbmcgd2l0aCBwcm9kdWN0aW9uLiBQbGVh
    bWVudCB3aXRoIGEgbGluayB0byB5b3VyIGZpbmFsIHBpY3R1cmUgcHJvb2Zz
    LgY7AEY6CUBub3dvOiRBY3Rpb25EaXNwYXRjaDo6Rmxhc2g6OkZsYXNoTm93
    BjoLQGZsYXNoQAc=&#39;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SessionStore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;unmarshal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rails32_session&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assert_nil&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;flash&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/^3\.0/&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;pretty?&quot;&gt;Pretty?&lt;/h3&gt;

&lt;p&gt;No, it&amp;#39;s not pretty. But it will help you overcome an unexpected &lt;strong&gt;dump format error&lt;/strong&gt; when deploying
a Rails 3.2 upgrade.&lt;/p&gt;
</description>
        <pubDate>Tue, 23 Sep 2014 00:00:00 -0400</pubDate>
        <link>http://technology.customink.com//blog/2014/09/23/migrating-session-flash-from-rails-30x-to-32x</link>
        <guid isPermaLink="true">http://technology.customink.com//blog/2014/09/23/migrating-session-flash-from-rails-30x-to-32x</guid>
      </item>
    
      <item>
        <title>Single Class vs. Multi Class CSS</title>
        <description>&lt;p&gt;As I have mentioned previously in my post on &lt;a href=&quot;/blog/2014/08/26/modular-css-with-suit/&quot;&gt;Modular CSS&lt;/a&gt;, structuring Sass/CSS is hard. One of the best ways to determine how clean and well structured the resulting CSS within a project is, is to take a look at the markup being used in project. Overly nested elements typically mean overly nested CSS and if you find it difficult to discern the purpose of the classes on those elements, the CSS itself is probably not semantically written. To add insult to injury, the more classes we add to each element, the harder it becomes to read. What if there was a better way? What if we could just write a single class that provides all the styling we need for a given element?&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;single-class-css&quot;&gt;Single Class CSS&lt;/h3&gt;

&lt;p&gt;Let&amp;#39;s give the single class approach a try. To keep it simple we will style a button (for the purposes of this example we will use &lt;a href=&quot;/blog/2014/08/26/modular-css-with-suit/&quot;&gt;SUIT CSS&lt;/a&gt; to give our CSS semantic meaning). We will assume that we might have different types of buttons, or modifications of the same button, so let&amp;#39;s write a single class for each type of button we may want on our website.&lt;/p&gt;

&lt;p&gt;First let&amp;#39;s model the HTML we would like to generate, and then build the CSS around that model.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Btn&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Just a Button&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Btn--disabled&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Disabled Button&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Btn-secondary&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Secondary Button&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Btn-secondary--disabled&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Secondary Disabled Button&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Wow, that keeps the DOM very clean, and by using SUIT, our classes are very semantic and easy to understand.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.Btn&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;5rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.Btn--disabled&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;5rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.Btn-secondary&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;5rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.Btn-secondary--disabled&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;light-grey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;5rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;http://sassmeister.com/gist/ad10c8d57ac2807bcfc8&quot; class=&quot;sb-Btn sb-Btn--secondary sb-Btn--responsive&quot;&gt;Play with this example in Sassmeister&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The CSS we have written is awfully repetitive. We can improve this by using a preprocessor like Sass.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sass&quot; data-lang=&quot;sass&quot;&gt;&lt;span class=&quot;nv&quot;&gt;%Btn-base&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5px&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;.5rem&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@mixin&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ColoredBtn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;@extend&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%Btn-base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$color&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$background-color&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.Btn&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;@include&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;ColoredBtn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// .Btn--disabled
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--disabled&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;@include&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;ColoredBtn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// .Btn-secondary
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-secondary&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;@include&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;ColoredBtn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// .Btn-secondary--disabled
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-secondary--disabled&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;@include&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;ColoredBtn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;light-grey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;http://sassmeister.com/gist/b36147e990969e8ce40d&quot; class=&quot;sb-Btn sb-Btn--secondary sb-Btn--responsive&quot;&gt;Play with this example in Sassmeister&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While the Sass ends up being a lot cleaner than the equivalent CSS, let&amp;#39;s further evaluate this single class approach. So far it is quite appealing, but how does it hold up in a non-trivial example?&lt;/p&gt;

&lt;p&gt;You may have already noticed one of the chinks in the single class armor, &lt;code&gt;.Btn-secondary--disabled&lt;/code&gt;. At first you may be pleased, and even feel clever at how easily we were able to compose our styles with Sass into the easy to use package of a single class. The potential problem is what if we have more classes that can be composed? We will have to create a single class to represent each of these compositions. If we want to be add a modifier that controls the button&amp;#39;s size, we will end up with permutations like &lt;code&gt;.Btn-secondary--small--disabled&lt;/code&gt; and &lt;code&gt;.Btn-secondary--large--disabled&lt;/code&gt;. Or maybe it is &lt;code&gt;.Btn-secondary--disabled--large&lt;/code&gt;? We either will have to remember the order of all of our modifiers, or generate even more CSS by representing each ordering with the same CSS. The single class approach is starting to lose its appeal. The alternative approach is to compose our styles with multiple classes via the multi class approach.&lt;/p&gt;

&lt;h4 id=&quot;multi-class-css&quot;&gt;Multi Class CSS&lt;/h4&gt;

&lt;p&gt;Rather than using a single class to represent all the styles for each element, we can use multiple classes in concert to get the desired effect. We will continue to use the button example from above. Again, the first thing we will start with is our HTML, which we can use as a contract for the CSS we write.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Btn&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Just a Button&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Btn Btn--disabled&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Disabled Button&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Btn Btn-secondary&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Secondary Button&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Btn Btn-secondary Btn--disabled&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Secondary Disabled Button&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Based on this HTML, the multi class Sass would be as follows.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sass&quot; data-lang=&quot;sass&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.Btn&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5px&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;.5rem&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// .Btn-secondary
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-secondary&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// .Btn--disabled
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--disabled&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grey&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;http://sassmeister.com/gist/5d97c03de86bd194a007&quot; class=&quot;sb-Btn sb-Btn--secondary&quot;&gt;Play with this example in Sassmeister&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first thing you will notice about the multi class approach is that there is significantly less Sass required. This is because we do not need to generate the CSS for each combination of styles we might need. Instead we can just create the smallest pieces and compose them to get any combination of styles we desire.&lt;/p&gt;

&lt;p&gt;Multi class CSS lends itself well to writing semantic, modular CSS. If the composability doesn&amp;#39;t win you over just look at the difference in the generated CSS from our two Sass examples.&lt;/p&gt;

&lt;h4 id=&quot;single-class-generated-css&quot;&gt;Single Class Generated CSS&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.Btn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.Btn--disabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.Btn-secondary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.Btn-secondary--disabled&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;5rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.Btn&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.Btn--disabled&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.Btn-secondary&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.Btn-secondary--disabled&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;light-grey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;multi-class-generated-css&quot;&gt;Multi Class Generated CSS&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.Btn&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;5rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.Btn-secondary&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.Btn--disabled&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Both the Sass and generated CSS are simpler and more concise in this trivial example. Imagine how many more single classes would need to be generated for a large web application, a class for each possible combination of style groupings. This would grow at an exponential rate, and become unmanageable rather quickly. Its multi class equivalent would generate the minimal pieces and enable the user to combine these classes in a number of ways in the DOM, a much more flexible approach. Single classes would also be very difficult to extend, which would be terrible in any application and even more so in a CSS framework.&lt;/p&gt;

&lt;p&gt;Though a single class approach may be tempting at first glance, reconsider before you make the leap. A multi class approach will pay off in the long run and will help enable you to write simple, but powerful classes to accomplish any styling need you may have.&lt;/p&gt;

&lt;h3 id=&quot;further-reading&quot;&gt;Further Reading&lt;/h3&gt;

&lt;p&gt;I highly recommend this &lt;a href=&quot;http://nicolasgallagher.com/about-html-semantics-front-end-architecture/&quot;&gt;article&lt;/a&gt; on HTML semantics by Nicolas Gallagher, which takes a look at semantic CSS, including the multi class vs single class issue.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;sub&gt;Reposted from &lt;a href=&quot;http://inlehmansterms.net/2014/09/19/single-class-vs-multi-class-css/&quot; rel=&quot;canonical&quot;&gt;Jonathan&amp;#39;s blog- In Lehman&amp;#39;s Terms&lt;/a&gt;.&lt;/sub&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 19 Sep 2014 00:00:00 -0400</pubDate>
        <link>http://technology.customink.com//blog/2014/09/19/single-class-vs-multi-class-css</link>
        <guid isPermaLink="true">http://technology.customink.com//blog/2014/09/19/single-class-vs-multi-class-css</guid>
      </item>
    
      <item>
        <title>From Rails 3.2 to 4.2</title>
        <description>&lt;p&gt;Last week I set out to upgrade &lt;a href=&quot;https://homemarks.com/&quot;&gt;HomeMarks&lt;/a&gt;, a personal bookmarking project of mine. This application sat on a very &lt;a href=&quot;https://homemarks.com/blog/2014-02-26-homemarks-v3-launches&quot;&gt;recent upgrade&lt;/a&gt; to Rails 3.2. It is written as an API to both an iOS and HTML JavaScript interface. It is by no means huge and should represent a nominal service oriented application. Here are some stats:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;8 Models (450 LOC)&lt;/li&gt;
&lt;li&gt;11 Controllers (550 LOC)&lt;/li&gt;
&lt;li&gt;2 Mailers (50 LOC)&lt;/li&gt;
&lt;li&gt;8 Libraries (500 LOC)&lt;/li&gt;
&lt;li&gt;Using Ruby 2.1.2.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The application is heavily tested with an emphasis on controller and integrations. It uses a standard Rails test setup with simple &lt;a href=&quot;https://github.com/metaskills/minitest-spec-rails#readme&quot;&gt;minitest-spec-rails&lt;/a&gt; usage. Integrations are done using the Capybara DSL with the &lt;a href=&quot;https://github.com/teampoltergeist/poltergeist&quot;&gt;Poltergeist&lt;/a&gt; driver. JavaScript tests use &lt;a href=&quot;https://github.com/jfirebaugh/konacha&quot;&gt;Konacha&lt;/a&gt; which leverage MochaJS and the Chai assertion library.&lt;/p&gt;

&lt;p&gt;With the introductions out of the way let&amp;#39;s do some fun upgrade work! Here is a step by step process of how I tackled the task and I hope you find it useful.&lt;/p&gt;

&lt;h3 id=&quot;grease-the-wheels&quot;&gt;Grease The Wheels&lt;/h3&gt;

&lt;p&gt;The first step I always recommend for any Rails upgrade is to update your entire bundle with your current Rails semver as the only gem constraint. The goal here is to have no gem versions other than &lt;code&gt;~&amp;gt; 3.2&lt;/code&gt; for Rails itself in your Gemfile - hence allowing Bundler to do all the work during your big 4.2 update. For this reason you should delete any explicit gem version specs and run &lt;code&gt;bundle update&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;During this time you will want to remove any non-essential gems as well. Great examples are test related gems. Spending time debugging any non-essential gem during an upgrade process is the worst time spent of all. Likewise, identify gems that are obsolete in your target upgrade. In my application, good examples were the &lt;code&gt;mail_view&lt;/code&gt; and the &lt;code&gt;quiet_assets&lt;/code&gt; gems. Hopefully your application has a tagging convention for notes when upgrading. At CustomInk, we use &lt;code&gt;PENDING: [Rails4]...&lt;/code&gt; style comment tags.&lt;/p&gt;

&lt;p&gt;Once done, update your master branch with this work and get that deployed. This is your new base for the push to Rails 4.2.&lt;/p&gt;

&lt;h3 id=&quot;make-a-template&quot;&gt;Make A Template&lt;/h3&gt;

&lt;p&gt;We want to reference a fresh 4.2 application as a guide. This will come in handy in many ways later on. During the time of this article Rails 4.2 was in beta2, so all examples will use that version. Please adjust your commands/examples as newer versions are released.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;gem install rails 4.2.0.beta1
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;rbenv rehash
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;rails new myapp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;the-big-bundle-update&quot;&gt;The Big Bundle Update&lt;/h3&gt;

&lt;p&gt;We need to focus on the Gemfile first. Start by changing that &lt;code&gt;~&amp;gt; 3.2&lt;/code&gt; twiddle-wakka to our target version of &lt;code&gt;~&amp;gt; 4.2.0.beta2&lt;/code&gt; as our Rails gem version. Go through your notes and delete those obsolete gems too and make any adjustments to any pessimistic version if you noted any.&lt;/p&gt;

&lt;p&gt;In Rails 4.2, there is no such thing as an &lt;code&gt;assets&lt;/code&gt; group for gems. So I removed my &lt;code&gt;group :assets&lt;/code&gt; and flattened my asset gems to the root of the Gemfile. I do suggest maintaining an comment and clustering your asset gems in your Gemfile as a way to keep them organized. Due to &lt;code&gt;sass-rails&lt;/code&gt; being in beta, I ended up with something like this.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;bcrypt-ruby&#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;pg&#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;rails&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;~&amp;gt; 4.2.0.beta2&#39;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# PENDING: [Rails 4.2] Remove wakka.&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Assets&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;bourbon&#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;coffee-rails&#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;jquery-rails&#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;sass-rails&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;~&amp;gt; 5.0.0.beta1&#39;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# PENDING: [Rails 4.2] Remove wakka.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;uglifier&#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Lastly, I find it extremely useful to delete the &lt;code&gt;Gemfile.lock&lt;/code&gt; now. In my experience Bundler will have a much better time coping by allowing the entire dep graph to be rebuilt. Now go for the big update with a simple bundle install.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;$ bundle install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you run into any problems here, take them on one by one. In some cases you could be using a gem that does not optimistically include 4.x versions. Before proceeding, find each project&amp;#39;s issue tracker and do a little research. If you encounter resistance, look broadly first and avoid hacking around it. This could be your time to shine and help with an open source pull request.&lt;/p&gt;

&lt;p&gt;Once you are bundled, you are ready for the next step. &lt;strong&gt;Avoid the temptation to launch your application or running tests!&lt;/strong&gt; You are no where near ready for that, so slow your roll. We still have some good work to do.&lt;/p&gt;

&lt;h3 id=&quot;the-mimic-process&quot;&gt;The Mimic Process&lt;/h3&gt;

&lt;p&gt;This is a great time to open the template application we created above. It is a very straightforward process to go through each of the application&amp;#39;s files &amp;amp; folders and mimic the template within your own application.&lt;/p&gt;

&lt;p&gt;In my experience I have seen a lot of pain in converting over &lt;code&gt;config/environments&lt;/code&gt; files to the newer format. If you have never done so, I highly recommend following a simple practice that makes upgrading of these files easier in the future. Always keep the environment file largely untouched and add your configs to the bottom of each below a comment like this.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;configure&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# ... Rails generated ...&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# My Configs&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ----------&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;action_mailer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;show_previews&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This makes updating these files in the future go much quicker. Here are some general notes I had when doing my entire mimesis process.&lt;/p&gt;

&lt;h4 id=&quot;environments-&amp;amp;-initializers&quot;&gt;Environments &amp;amp; Initializers&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Removed &lt;code&gt;config.filter_parameters&lt;/code&gt; from application.rb to config/initializers/filter_parameter_logging.rb&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;config.assets.precompile&lt;/code&gt; and &lt;code&gt;config.assets.version&lt;/code&gt; have moved to config/initializers/assets.rb&lt;/li&gt;
&lt;li&gt;Many files now use the &lt;code&gt;Rails.application&lt;/code&gt; singleton resource vs &lt;code&gt;MyApp::Application&lt;/code&gt; constant.&lt;/li&gt;
&lt;li&gt;New &lt;code&gt;config.active_support.test_order = :random&lt;/code&gt; added in test environment file.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;concerns-directories&quot;&gt;Concerns Directories&lt;/h4&gt;

&lt;p&gt;I fully embraced the new concern directories. I created both &lt;code&gt;app/controllers/concerns/.keep&lt;/code&gt; and &lt;code&gt;app/models/concerns/.keep&lt;/code&gt;. I found there were a few files in my lib directory that were actually concerns. For example, I moved both my AuthenticatedSystem and RenderInvalidRecord modules to the controller concerns. This allowed me to remove any hacks I had for setting the auto load path on the lib directory too.&lt;/p&gt;

&lt;h4 id=&quot;bin-directory-&amp;amp;-spring&quot;&gt;Bin Directory &amp;amp; Spring&lt;/h4&gt;

&lt;p&gt;I have been using both bundler bin stubs and Spring in all of my 3.2 applications. Now that Rails supports both the local &lt;code&gt;bin&lt;/code&gt; directory and Spring in an integrated way, I wanted to follow the golden path of least resistance.&lt;/p&gt;

&lt;p&gt;The first step was to blow away my entire bin directory and just copy over the one from the application template. These new bin files for &lt;code&gt;rake&lt;/code&gt; and &lt;code&gt;rails&lt;/code&gt; leverage the Spring preloader. Make sure to delete your local or global bundle config for installing bins too. Do this with &lt;code&gt;bundle config --delete bin&lt;/code&gt;. Now, instead of having Bundler install bin stubs for every gem which could conflict with the preloader bins, we should be explicit on a per gem basis. For example, this would install the bins for guard.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;$ bundle binstubs guard
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Lastly, if you have never done so, change your shell&amp;#39;s &lt;code&gt;PATH&lt;/code&gt; to look for the local &lt;code&gt;./bin&lt;/code&gt; directory before any others. I do this after my rbenv initialization.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;rbenv init -&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./bin:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;routes-file&quot;&gt;Routes File&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Removed my &lt;code&gt;match&lt;/code&gt; methods in favor of &lt;code&gt;get&lt;/code&gt; verb method.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;new-test-directories&quot;&gt;New Test Directories&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Renamed &lt;code&gt;test/functional&lt;/code&gt; folder to &lt;code&gt;test/controllers&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Renamed &lt;code&gt;test/unit&lt;/code&gt; folder to &lt;code&gt;test/models&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Created a &lt;code&gt;test/mailers&lt;/code&gt; folder and moved all my mailer tests from units to it.&lt;/li&gt;
&lt;li&gt;Renamed &lt;code&gt;ActionController::IntegrationTest&lt;/code&gt; to &lt;code&gt;ActionDispatch::IntegrationTest&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;framework-changes&quot;&gt;Framework Changes&lt;/h3&gt;

&lt;p&gt;Now is the time where you can start to run your tests and identify what needs to change. I recommend starting with the model tests and moving on from there. Though I am a big fan of Guard for automatic test runs, Rails now has a new option when using rake. Just pass the filename after the test argument. For example, this would run a single model test and since the new &lt;code&gt;bin/rake&lt;/code&gt; file uses Spring, you can run this command over and over again very quickly.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;$ rake test test/models/user_test.rb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Below are things I found while moving through my tests. I have organized them by framework. They are by no means comprehensive and your application may expose more differences between Rails 3.2 and 4.2.&lt;/p&gt;

&lt;h4 id=&quot;activerecord&quot;&gt;ActiveRecord&lt;/h4&gt;

&lt;p&gt;You are going to see a lot of &lt;code&gt;ArgumentError: Unknown key: ...&lt;/code&gt; errors. The reason is that Rails 4.0 now requires that scopes use a callable object such as a Proc or lambda. I saw these errors mostly on &lt;code&gt;:order&lt;/code&gt; and the &lt;code&gt;:readonly&lt;/code&gt; option arguments. Here are a few before/after examples.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Old&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:foos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;order: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;position&#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:bars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;through: :foos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;readonly: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;order: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;foos.position, bars.position&#39;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# New&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:foos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;position&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:bars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;foos.position, bars.position&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;readonly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;through: :foos&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Seems the callable object has to be the second argument and you can easily chain the scopes within. I took a wild guess that the &lt;code&gt;readyonly&lt;/code&gt; scope took an optional &lt;code&gt;false&lt;/code&gt; argument and was handsomely rewarded.&lt;/p&gt;

&lt;p&gt;I also got a few good &lt;code&gt;ArgumentError: The provided regular expression is using multiline anchors (^ or $) ...&lt;/code&gt; errors. This was easy to fix by using the suggested \A and \z instead. Really happy to see the framework warning on this common errors when using regular expressions for validations.&lt;/p&gt;

&lt;p&gt;I deleted all the &lt;code&gt;attr_accesible&lt;/code&gt; declarations from my models and switched to strong parameters in the controllers. If you are new to strong parameters, &lt;a href=&quot;http://easyactiverecord.com/blog/2014/04/01/rails4-strong-parameters-and-the-attr-accessible-macro&quot;&gt;check out this article&lt;/a&gt; which goes into great depth on the topic. Alternatively, you can start using strong parameters before you upgrade to Rails 4.x by using the backward compatible &lt;a href=&quot;https://github.com/rails/strong_parameters&quot;&gt;strong parameters gem&lt;/a&gt;. A great strategy to ease large application transitions. Thanks to &lt;a href=&quot;http://about.me/cmar&quot;&gt;Chris Mar&lt;/a&gt; for pointing out this approach to our team.&lt;/p&gt;

&lt;p&gt;The class &lt;code&gt;update_all&lt;/code&gt; no longer takes a second conditions argument. I always disliked methods that took two option hashes and this is a great change. For example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Old&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;update_all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;author: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;David&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;title: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Rails&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# New&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;title: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Rails&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;update_all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;author: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;David&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Lastly, the &lt;code&gt;all&lt;/code&gt; method no longer takes finder options.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Old&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conditions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;ken@metaskills.net&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# New&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;ken@metaskills.net&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;actionmailer&quot;&gt;ActionMailer&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;#deliver&lt;/code&gt; method is deprecated and will be removed in Rails 5. Now that Rails 4.2 has &lt;code&gt;ActiveJob&lt;/code&gt; the preferred way to deliver emails via it would be to call &lt;code&gt;#deliver_later&lt;/code&gt; or &lt;code&gt;#deliver_now&lt;/code&gt;. Since the default queue adapter for ActiveJob is &lt;code&gt;:inline&lt;/code&gt;, just go ahead and switch things to the deliver later method. You can then change your queue adapter and create workers later on if needed.&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;_path&lt;/code&gt; url methods in mailers will now result in a &lt;code&gt;DEPRECATION WARNING... cannot be used here as a full URL is required&lt;/code&gt; message. Unless you were manually augmenting these paths to have a host, this is a good thing and will keep developers from including partial URLs in mailers.&lt;/p&gt;

&lt;p&gt;MailView is now fully integrated into ActionMailer. Read &lt;a href=&quot;http://brewhouse.io/blog/2013/12/17/whats-new-in-rails-4-1.html&quot;&gt;this article&lt;/a&gt; for full details. If you have never used MailView in a Rails 3 application, it allows you to develop your mails in the browser as if they were controller view. When moving from old MailView support to Rails 4.x usage, follow these steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add &lt;code&gt;config.action_mailer.show_previews&lt;/code&gt; to config/environments/development.rb file.&lt;/li&gt;
&lt;li&gt;Moved previous mailer previews to new &lt;code&gt;test/mailers/previews&lt;/code&gt; directory.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;actionpack&quot;&gt;ActionPack&lt;/h4&gt;

&lt;p&gt;Partials can no longer have &lt;code&gt;-&lt;/code&gt; hyphens in the filename. I had to change a few.&lt;/p&gt;

&lt;p&gt;There is a new and &lt;a href=&quot;https://github.com/rails/rails/blob/master/actionpack/lib/action_controller/metal/request_forgery_protection.rb&quot;&gt;better request forgery protection&lt;/a&gt; in Rails 4.x. Read the source link for full error messages and documentation. In my case, I had already redefined a protected &lt;code&gt;protect_against_forgery?&lt;/code&gt; for a special controller and needed to only add &lt;code&gt;skip_before_action :verify_authenticity_token&lt;/code&gt; to my filters to fully work around the security warning.&lt;/p&gt;

&lt;h4 id=&quot;asset-pipeline&quot;&gt;Asset Pipeline&lt;/h4&gt;

&lt;p&gt;The biggest issue that I had is that asset compilation no longer generates non-digest filenames for each asset. This &lt;a href=&quot;https://github.com/rails/sprockets-rails/issues/49&quot;&gt;github issue&lt;/a&gt; explains the rationale, but I do believe there are some corner cases where you do want to reference the non-digest asset filename.&lt;/p&gt;

&lt;p&gt;If after careful examination you find yourself in need of this corner case, do not disable digests for all files. Instead install the &lt;a href=&quot;https://github.com/alexspeller/non-stupid-digest-assets&quot;&gt;non-stupid-digest-assets&lt;/a&gt; gem which allows you to whitelist specific asset files and thereby including a non-digest filename along with the fingerprinted filenames for said asset(s). I recommend putting the &lt;code&gt;NonStupidDigestAssets.whitelist&lt;/code&gt; settings at the bottom of the new &lt;code&gt;config/initializers/assets.rb&lt;/code&gt; file.&lt;/p&gt;

&lt;h4 id=&quot;testing&quot;&gt;Testing&lt;/h4&gt;

&lt;p&gt;The Rails testing task strategy has changed a lot. By default now, when you run &lt;code&gt;rake test&lt;/code&gt; all models, mailers, controllers and integrations are run in one collective suite run. If you are interested in learning how, read the &lt;a href=&quot;https://github.com/rails/rails/blob/master/railties/lib/rails/test_unit/testing.rake&quot;&gt;testing.rake&lt;/a&gt; source. I also talked about how to add different directories to this process within a &lt;a href=&quot;https://github.com/metaskills/minitest-spec-rails/issues/49&quot;&gt;github issues under the minitest-spec-rails&lt;/a&gt; project where &lt;a href=&quot;http://blowmage.com&quot;&gt;Mike Moore&lt;/a&gt; contributed a few helpful hints too.&lt;/p&gt;

&lt;p&gt;The reason I mention this is that it is somewhat common to expect your Capybara enhanced integrations to run in a distinct process. Because of this, it is also common to see monkey patches to the ActiveRecord connection pool to support integration tests that leverage DB transactions. Depending on your setup, you may be required to make a few tweaks.&lt;/p&gt;

&lt;h3 id=&quot;in-closing&quot;&gt;In Closing&lt;/h3&gt;

&lt;p&gt;Upgrading Rails applications used to be a pain! My recent upgrade only took two evenings of my spare time. In my opinion Rails 3.1 and up have become much more stable for both application and gem authors to leverage the framework. Thus making upgrades approachable. Keep your applications small and focused as a way to win the upgrade wars!&lt;/p&gt;

&lt;p&gt;In closing, thanks for reading and I hope you found this information helpful. If you have any questions, feel free to ask in the comments. Cheers!&lt;/p&gt;
</description>
        <pubDate>Tue, 16 Sep 2014 00:00:00 -0400</pubDate>
        <link>http://technology.customink.com//blog/2014/09/16/from-rails-3.2-to-4.2</link>
        <guid isPermaLink="true">http://technology.customink.com//blog/2014/09/16/from-rails-3.2-to-4.2</guid>
      </item>
    
      <item>
        <title>Fall College Recruiting Schedule</title>
        <description>&lt;p&gt;Fall is in the air and so our engineers will be heading back to college!&lt;/p&gt;

&lt;p&gt;We are looking for Summer 2015 interns and early career software engineer hires. You can learn more about our early career software engineer position by visiting our careers page: &lt;a href=&quot;http://www.customink.com/about/jobs/openings&quot;&gt;http://www.customink.com/about/jobs/openings&lt;/a&gt;&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;We would love to speak with CS, CIS, and HCI students, so please look for us at one of the following locations:&lt;/p&gt;

&lt;h4 id=&quot;pennapps&quot;&gt;PennApps&lt;/h4&gt;

&lt;p&gt;September 12th - 14th&lt;br/&gt;
&lt;a href=&quot;http://2014f.pennapps.com&quot;&gt;http://2014f.pennapps.com&lt;/a&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;

&lt;h4 id=&quot;viginia-tech&quot;&gt;Viginia Tech&lt;/h4&gt;

&lt;p&gt;September 15th&lt;br/&gt;
&lt;a href=&quot;http://www.cs.vt.edu/partnering/events&quot;&gt;http://www.cs.vt.edu/partnering/events&lt;/a&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;

&lt;h4 id=&quot;carnegie-mellon-university&quot;&gt;Carnegie Mellon University&lt;/h4&gt;

&lt;p&gt;September 16th&lt;br/&gt;
&lt;a href=&quot;http://engineering.cmu.edu/companies/toc/index.html&quot;&gt;http://engineering.cmu.edu/companies/toc/index.html&lt;/a&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;

&lt;h4 id=&quot;university-of-virgina&quot;&gt;University of Virgina&lt;/h4&gt;

&lt;p&gt;September 16th&lt;br/&gt;
&lt;a href=&quot;http://www.seas.virginia.edu/admin/careerdev/general.php&quot;&gt;http://www.seas.virginia.edu/admin/careerdev/general.php&lt;/a&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;

&lt;h4 id=&quot;university-of-maryland&quot;&gt;University of Maryland&lt;/h4&gt;

&lt;p&gt;September 18th&lt;br/&gt;
&lt;a href=&quot;http://www.careercenter.umd.edu/events_description.cfm?event_id=4870&quot;&gt;http://www.careercenter.umd.edu/events_description.cfm?event_id=4870&lt;/a&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;

&lt;h4 id=&quot;george-mason-university&quot;&gt;George Mason University&lt;/h4&gt;

&lt;p&gt;October 1st&lt;br/&gt;
&lt;a href=&quot;https://careers.gmu.edu/employers/events/fairs&quot;&gt;https://careers.gmu.edu/employers/events/fairs&lt;/a&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 12 Sep 2014 13:00:00 -0400</pubDate>
        <link>http://technology.customink.com//blog/2014/09/12/fall-college-recruiting-schedule</link>
        <guid isPermaLink="true">http://technology.customink.com//blog/2014/09/12/fall-college-recruiting-schedule</guid>
      </item>
    
      <item>
        <title>Open Sourcing a Gem: Part 1</title>
        <description>&lt;h3 id=&quot;the-signalman-gem&amp;#39;s-origins&quot;&gt;The Signalman gem&amp;#39;s origins&lt;/h3&gt;

&lt;p&gt;As any company grows, it reaches a point where it is no longer in the &amp;quot;startup phase&amp;quot;. No longer can the target market arbitrarily be redefined or features be pushed out at a whim. At this point, analytics and A/B testing become increasingly important. A few years ago, we found this to be a point of pain at CustomInk and sought to create a more robust solution to meet our needs. Thus Signalman was born.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Though Signalman has evolved since its conception, its primary function has remained to make A/B testing easier and easily repeatable.&lt;/p&gt;

&lt;h3 id=&quot;why-are-we-open-sourcing-the-gem?&quot;&gt;Why are we open sourcing the gem?&lt;/h3&gt;

&lt;p&gt;The real question is why not? We found that Signalman seemed to cover a general enough use case that it would be applicable to other teams outside of CustomInk. Since Signalman would be helpful to other teams doing split testing, then it is clear that open sourcing the gem would be beneficial to the community. As a team, we use a lot of open source software, in fact, most of our stack is composed of open source projects. We are heavy consumers of open source so we like to return the favor whenever we can. Open sourcing a project also can provide the benefit of users outside of the organization improving the gem itself, which is an added bonus.&lt;/p&gt;

&lt;p&gt;Stay tuned for future posts leading up to Signalman&amp;#39;s public release that will highlight various details in the process of open sourcing a gem.&lt;/p&gt;

&lt;h3 id=&quot;more-from-this-series&quot;&gt;More from this series&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;/blog/2014/10/20/open-sourcing-a-gem-pt-2/&quot;&gt;Part 2&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 12 Sep 2014 00:00:00 -0400</pubDate>
        <link>http://technology.customink.com//blog/2014/09/12/open-sourcing-a-gem-pt-1</link>
        <guid isPermaLink="true">http://technology.customink.com//blog/2014/09/12/open-sourcing-a-gem-pt-1</guid>
      </item>
    
      <item>
        <title>Building the CustomInk Living Style Guide</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://twitter.com/metaskills&quot;&gt;Ken Collins&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/inLehmans_Terms&quot;&gt;Jonathan Lehman&lt;/a&gt; will be presenting &amp;quot;Like A Ross! - Building The CustomInk.com Living Style Guide&amp;quot; at &lt;a href=&quot;http://sassydc.github.io/&quot;&gt;SassyDC&lt;/a&gt; this Wednesday, September 10th.&lt;/p&gt;

&lt;p&gt;Be sure to register if you plan on attending: &lt;a href=&quot;https://nvite.com/SassyDC/f4a&quot;&gt;https://nvite.com/SassyDC/f4a&lt;/a&gt;&lt;/p&gt;

&lt;!--more--&gt;

&lt;h4 id=&quot;event-description&quot;&gt;Event description&lt;/h4&gt;

&lt;p&gt;We would like to share our thoughts and process behind CustomInk&amp;#39;s new mobile-first responsive Sass framework. Be prepared for a lively group discussion and bring your a-game of questions as we talk about our process and technical building blocks for our new living style guide.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Enacting Change with Living Style Guides&lt;/li&gt;
&lt;li&gt;Existing Framework or Building New&lt;/li&gt;
&lt;li&gt;Grid &amp;amp; Technology Choices&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;event-update&quot;&gt;Event Update&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/assets/content/like-a-ross-e421a05d733c41d6a41186348ae14f80.jpg&quot; class=&quot;tb-Img tb-Img--responsive tb-Img--fancy&quot; alt=&quot;Jonathan Lehman and Ken Collins presenting Like A Ross! - Building the CustomInk Living Style Guide.&quot; /&gt;
The event was a great success! Big thanks to &lt;a href=&quot;https://twitter.com/mylifeasalllly&quot;&gt;Ally Palanzi&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/xiwcx&quot;&gt;Welch Canavan&lt;/a&gt; for organizing the SassyDC group and allowing us to present and share our experiences. Huge thanks to &lt;a href=&quot;http://www.voxmedia.com&quot;&gt;Vox Media&lt;/a&gt; for hosting the event. Check out the &lt;a href=&quot;https://www.flickr.com/photos/xiwcx/sets/72157647060090380/&quot;&gt;photos of the event&lt;/a&gt; on Flickr!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/metaskills/like-a-ross-building-the-customink-dot-com-living-style-guide&quot; class=&quot;sb-Btn sb-Btn--responsive sb-Btn--primary&quot;&gt;View Slides&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Shout out to those that attended the dinner afterward or live tweeting. It was great to meet you all!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://twitter.com/heymikeflores&quot;&gt;Mike Flores&lt;/a&gt; with the &lt;a href=&quot;https://twitter.com/heymikeflores/status/509839386792706048&quot;&gt;SUIT vs. BEM&lt;/a&gt; tweet.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://twitter.com/taupecat&quot;&gt;Tracy Rōtton&lt;/a&gt; we wish you the best at &lt;a href=&quot;https://twitter.com/CSSDevConf&quot;&gt;CSSDevConf&lt;/a&gt;. Thanks for the &lt;a href=&quot;https://twitter.com/taupecat/status/509892259920482304&quot;&gt;mention&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://twitter.com/JohnnyReading&quot;&gt;John Reading&lt;/a&gt; for the &lt;a href=&quot;https://twitter.com/JohnnyReading/status/509837477226741760&quot;&gt;TNG References&lt;/a&gt; tweet.&lt;/li&gt;
&lt;li&gt;Lastly both &lt;a href=&quot;https://twitter.com/javierios&quot;&gt;Javier Rios&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/hilliuse&quot;&gt;Hillius Ettinoffe&lt;/a&gt; for the great dinner conversation.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;resources&quot;&gt;Resources&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Blog Posts&lt;/em&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/blog/2014/08/26/modular-css-with-suit/&quot;&gt;Modular CSS With SUIT CSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/blog/2014/09/01/a-new-living-style-guide/&quot;&gt;A New Living Style Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/blog/2014/09/19/single-class-vs-multi-class-css/&quot;&gt;Single Class vs Multi Class CSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/blog/2014/09/30/unit-testing-sass-frameworks&quot;&gt;Unit Testing Sass Frameworks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/blog/2014/10/09/understanding-and-using-sass-load-paths/&quot;&gt;Understanding and Using Sass Load Paths&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Presentation Slide Decks&lt;/em&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/metaskills/like-a-ross-building-the-customink-dot-com-living-style-guide&quot;&gt;Like a Ross!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://slides.com/jonathanlehman/an-adventure-in-style#/&quot;&gt;An Adventure in Style&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 08 Sep 2014 09:00:00 -0400</pubDate>
        <link>http://technology.customink.com//blog/2014/09/08/building-the-customink-living-style-guide</link>
        <guid isPermaLink="true">http://technology.customink.com//blog/2014/09/08/building-the-customink-living-style-guide</guid>
      </item>
    
      <item>
        <title>A New Living Style Guide</title>
        <description>&lt;p&gt;Here at CustomInk we are building the foundation necessary to move forward with creating a new, fully responsive CustomInk experience. Because we have such a large codebase, and customer experience is our #1 priority, we performed exhaustive research and became fully prepared in all departments before we even thought about writing a line of code.&lt;/p&gt;

&lt;p&gt;Our UX team prepared by familiarizing themselves with the popular responsive grid systems and frameworks. They learned how to write the HTML and CSS of a page utilizing these frameworks, a skill they would soon use to mock out our new layouts in HTML and CSS- something never before done by a UX team at CustomInk.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;On the technology side, we researched the many grid systems available to us, along with some popular SASS libraries and CSS naming conventions. Common themes in our research were &lt;strong&gt;simplicity&lt;/strong&gt; and &lt;strong&gt;consistency&lt;/strong&gt;. We were setting the stage for how CustomInk would move forward, and we had to do it well.&lt;/p&gt;

&lt;p&gt;For our grid system we chose to use the &lt;a href=&quot;http://susy.oddbird.net/&quot;&gt;Susy&lt;/a&gt; grid. For those not familiar with the Susy, it is a simple, standalone grid system that integrates smoothly with &lt;a href=&quot;http://breakpoint-sass.com/&quot;&gt;Breakpoint&lt;/a&gt; for powerful media-query controls.&lt;/p&gt;

&lt;p&gt;For our mixin library we wanted just that, a mixin library. We thought about using &lt;a href=&quot;http://compass-style.org/&quot;&gt;Compass&lt;/a&gt; but it was much larger than what we needed. &lt;a href=&quot;http://bourbon.io/&quot;&gt;Bourbon&lt;/a&gt; - a lightweight SASS mixing library - was perfect for our needs.&lt;/p&gt;

&lt;p&gt;Now we had the tools in place to move forward, but we needed to determine how to move forward. What type of naming conventions would we apply to our CSS to produce the simplicity and consistency vital to our implementation? First and foremost, we would need to namespace our styles. Goes without saying, right?&lt;/p&gt;

&lt;p&gt;The next step would be determining a consistent naming convention to apply to our namespaced styles. After all, having consistency in convention would produce greater readability and an orderly structure for our classes. We took a deep-dive into &lt;a href=&quot;http://bem.github.io/bem-method/html/all.en.html&quot;&gt;BEM&lt;/a&gt; and &lt;a href=&quot;https://github.com/suitcss/suit/blob/master/doc/README.md&quot;&gt;SUIT&lt;/a&gt; and ultimately chose to move forward using the SUIT syntax.&lt;/p&gt;

&lt;p&gt;From there we had the tools in place to begin building our new living style guide. This living style guide will be used by the UX team when mocking out new responsive layouts, and of course by our engineers to build our new responsive experience.&lt;/p&gt;
</description>
        <pubDate>Mon, 01 Sep 2014 09:00:00 -0400</pubDate>
        <link>http://technology.customink.com//blog/2014/09/01/a-new-living-style-guide</link>
        <guid isPermaLink="true">http://technology.customink.com//blog/2014/09/01/a-new-living-style-guide</guid>
      </item>
    
      <item>
        <title>Dynamic SVGs Using &amp;lt;defs&amp;gt; Elements &amp;amp; JavaScript</title>
        <description>&lt;p&gt;The scalable vector graphics format has a really nifty way to define and reuse objects. It does this by allowing objects or paths to be defined in the &lt;code&gt;&amp;lt;defs&amp;gt;&lt;/code&gt; element and then used one or many times with the &lt;code&gt;&amp;lt;use&amp;gt;&lt;/code&gt; element. It is a great way to keep your SVG&amp;#39;s file size low. Even better, it makes for a great programmatic interface to dynamically compose an image.&lt;/p&gt;

&lt;!-- read more --&gt;

&lt;p&gt;While designing the third iteration of my personal &lt;a href=&quot;http://metaskills.net/&quot;&gt;MetaSkills.net&lt;/a&gt; blog, I decided to carry the retro space theme into the background of the fixed left navigation area. The design called for something like this image below. Besides the planet, it has three distinct types of stars that are scattered all over the place. Each has a different scale and opacity with plans to animate a few.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/content/svg-planet-stars-0319932d2bc35a68a723534571b5e01a.png&quot; class=&quot;tb-Img tb-Img--responsive-ctr tb-Img--fancy&quot; alt=&quot;MetaSkills.net Planet &amp; Stars SVG Example&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So where to start? We could export a final pre-designed SVG image from any type of vector program – but that would bloat the file size since it would copy and paste each star&amp;#39;s path. It would also make animating distinct stars tricky and require post production edits. Lastly, who has time to randomly scatter stars? Not me! So let&amp;#39;s program up a solution that solves all of this for us. Here is the base SVG structure that we are going to work with.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;svg&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;version=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1.1&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;300px&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;700px&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;viewBox=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0 0 300 700&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;preserveAspectRatio=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;xMidYMax slice&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.w3.org/2000/svg&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;xmlns:xlink=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.w3.org/1999/xlink&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;defs&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Define star objects here. --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/defs&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;style&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    .star    { fill: #95a8b1; }
    .burst   { fill: #e4522a; }
    .steeler { fill: #fffbe1; }
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;rect&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;100%&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;100%&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;fill=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#052838&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;g&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;starfield&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Use stars objects here. --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/g&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/ecmascript&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Dynamically create stars here. --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Our image will have a slender vertical portrait area to match the general proportions of the sidebar. The SVG is setup to preserve the &lt;a href=&quot;http://www.justinmccandless.com/blog/Making+Sense+of+SVG+viewBox&amp;#x27;s+Madness&quot;&gt;aspect ratio&lt;/a&gt; in such a way that allows the bottom planet to always be in view when scaled. We have a &lt;code&gt;&amp;lt;defs&amp;gt;&lt;/code&gt; area where we can add reusable objects, an in-line style sheet for our awesome CSS, and a &lt;code&gt;&amp;lt;g&amp;gt;&lt;/code&gt; starfield element to hold each star. Lastly, a place to write some JavaScript.&lt;/p&gt;

&lt;h3 id=&quot;base-star-objects&quot;&gt;Base Star Objects&lt;/h3&gt;

&lt;p&gt;Adding these to our SVG is really easy. I started by creating a canvas in my favorite vector program, &lt;a href=&quot;http://bohemiancoding.com/sketch/&quot;&gt;Sketch&lt;/a&gt;. We want to make sure our exported paths start at 0,0 position and are are generally the size you expect to use them. This will help you later when translating these paths to different positions.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/content/svg-our-awesome-sketch-1490a58ac9b77cfe15b8e1a266ba1262.png&quot; class=&quot;tb-Img tb-Img--responsive-ctr tb-Img--fancy&quot; alt=&quot;Setting up our base stars in the Sketch v3 application.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I exported each star type as an SVG and then copied the path into the &lt;code&gt;&amp;lt;defs&amp;gt;&lt;/code&gt; area of our template above. When you do this make sure that each path has its own unique id. Also, you may want to optimize your paths. Many programs export 6 or more decimal points for a path&amp;#39;s data. I recommend running them through some sort of &lt;a href=&quot;http://petercollingridge.appspot.com/svg_optimiser&quot;&gt;SVG optimiser&lt;/a&gt; or tweaking your export settings if your art program has them. Now we have our reusable path objects, see below. Examples have truncated &lt;code&gt;d&lt;/code&gt; attributes for brevity.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;defs&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;path&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;star&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;d=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;M2.395,0.409 C2.026,0.973 ... Z&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/path&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;path&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;burst&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;d=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;M6.092,4.816 L1.661,3.4 ... Z&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/path&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;path&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;steeler&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;d=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;M3.231,6.211 L0,5.830 ... Z&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/path&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/defs&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;using-defined-objects&quot;&gt;Using Defined Objects&lt;/h3&gt;

&lt;p&gt;If we were to view our SVG now, it would be pretty boring and contain only the colored background rect. So lets add some stars by using the defined objects above. We do this with the &lt;code&gt;&amp;lt;use&amp;gt;&lt;/code&gt; element by setting each &lt;code&gt;xlink:href&lt;/code&gt; to the id of that object we want to target. To move and size each star, we use the SVG &lt;code&gt;transform&lt;/code&gt; attribute to both translate and scale each star. Adding these elements right before the JavaScript tag will create the following image.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;use&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xlink:href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#star&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;transform=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;translate(10,10) scale(1.0)&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;star&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;use&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xlink:href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#burst&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;transform=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;translate(30,20) scale(1.0)&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;burst&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;use&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xlink:href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#steeler&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;transform=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;translate(60,10) scale(1.5)&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;steeler&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/assets/content/svg-planet-stars-v1-0a702030ad99e0797508925b75e659dc.png&quot; class=&quot;tb-Img tb-Img--responsive-ctr tb-Img--fancy&quot; alt=&quot;MetaSkills.net Planet &amp; Stars SVG Example&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Still kind of boring... and who has time to stochastically place several dozen stars around the canvas? Time for some JavaScript automation.&lt;/p&gt;

&lt;h3 id=&quot;svgs-&amp;amp;-javascript&quot;&gt;SVGs &amp;amp; JavaScript&lt;/h3&gt;

&lt;p&gt;Yes! SVGs are distinct documents that can have their own CSS and JavaScript. But in order for this JavaScript to execute, we must embed it into the parent HTML document. Linking to an SVG via an &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag will not allow this due to security concerns. We can get around that issue by using an &lt;code&gt;&amp;lt;object&amp;gt;&lt;/code&gt; tag instead.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;object&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;our-awesome.svg&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;image/svg+xml&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/object&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that our SVG&amp;#39;s JavaScript will execute, how do we go about adding &lt;code&gt;&amp;lt;use&amp;gt;&lt;/code&gt; elements to our SVG&amp;#39;s document? Fortunately the techniques are very similar to how you would do this with vanilla JavaScript and the HTML DOM. The minor difference is that we have to use two namespaces. One for creating elements and the second for adding the xlink attribute. I recommend we start our JavaScript off with these namespaces as vars. We also want to create variables for our canvas width and height. Finally, we want a handle to our starfield group element.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xmlns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;http://www.w3.org/2000/svg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;xlinkns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;http://www.w3.org/1999/xlink&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;700&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;starfield&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;starfield&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;random-javascript-helpers&quot;&gt;Random JavaScript Helpers&lt;/h3&gt;

&lt;p&gt;Before we just start adding some stars, we need some random functions to help us position and scale our stars. I like to start low level and build up. So here is our random function that takes a min and max value.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;randomBase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;randomBase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// 229.5510318595916&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;randomBase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// -22.134714818093926&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Building on that, we want to made a random position function to help place each star in our field. This helper only needs the &lt;code&gt;max&lt;/code&gt; argument which will be either our &lt;code&gt;width&lt;/code&gt; or &lt;code&gt;height&lt;/code&gt;. Notice too how it blankets our canvas area by setting the minimal and maximum to -50 and +50. This will ensure each star could be placed slightly off canvas and keeping them from appearing clustered toward the middle. We also floor the return value, no decimals are needed for position.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;randomPos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;randomBase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here is our random scale function which takes a &lt;code&gt;min&lt;/code&gt; and &lt;code&gt;max&lt;/code&gt; threshold. This will allow us to adjust the weight of each star type in the cluster and possibly adjust the exported size differences from our image program into the &lt;code&gt;&amp;lt;defs&amp;gt;&lt;/code&gt; area. This function returns a two decimal float value.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;randomScale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;parseFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;randomBase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toFixed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;randomScale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 0.6&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;randomScale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 0.85&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, here is a helper function that builds on top of &lt;code&gt;randomScale&lt;/code&gt;. It takes a star &lt;code&gt;name&lt;/code&gt; and returns the proper value.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;randomScaleNamed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;star&#39;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scale&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;randomScale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;burst&#39;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scale&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;randomScale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;steeler&#39;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scale&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;randomScale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scale&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;adding-use-elements&quot;&gt;Adding Use Elements&lt;/h3&gt;

&lt;p&gt;Now that we have the boring random functions out of the way, time to create our star-agnostic &lt;code&gt;addElement&lt;/code&gt; function. This will create a new &lt;code&gt;&amp;lt;g&amp;gt;&lt;/code&gt; element for each star&amp;#39;s &lt;code&gt;&amp;lt;use&amp;gt;&lt;/code&gt; element. The group is for placement and size, the use is for twinkle and shine animations.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;g&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElementNS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;xmlns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;g&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElementNS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;xmlns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;use&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;translate(&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;randomPos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;,&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;randomPos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;) &#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;&#39;scale(&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;randomScaleNamed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;)&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setAttributeNS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;class&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setAttributeNS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;xlinkns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;xlink:href&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;#&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setAttributeNS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;transform&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;starfield&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This function ends by placing the newly created element within the starfield. For example, calling &lt;code&gt;addElement(&amp;#39;burst&amp;#39;)&lt;/code&gt; once would create this.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;g&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;starfield&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;g&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;transform=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;translate(58,151) scale(0.9)&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;use&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xlink:href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#burst&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;burst&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;/g&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/g&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To add a bunch of stars!&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addElements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;addElements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;steeler&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;addElements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;burst&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;addElements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;star&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;going-further&quot;&gt;Going Further&lt;/h3&gt;

&lt;p&gt;Thanks for reading this far! If you are interested in how I handled star animations using Bourbon &amp;amp; Sass, check out &lt;a href=&quot;https://gist.github.com/metaskills/f3be83a2cabf9e1061fc&quot;&gt;this gist&lt;/a&gt; on GitHub for my source code. It also shows how I animated the planet to spin at the bottom of the image and cover the background stars.&lt;/p&gt;

&lt;p&gt;I hope you have as much fun as I have with animating SVGs using JavaScript and Sass! See a full working example on &lt;a href=&quot;http://metaskills.net/2014/08/29/dynamic-svgs-using-defs-elements-and-javascript&quot;&gt;my blog&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/SVG/Element/defs&quot;&gt;SVG &lt;code&gt;&amp;lt;defs&amp;gt;&lt;/code&gt; documentation on MDN&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/SVG/Element/use&quot;&gt;SVG &lt;code&gt;&amp;lt;use&amp;gt;&lt;/code&gt; documentation on MDN&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.justinmccandless.com/blog/Making+Sense+of+SVG+viewBox&amp;#x27;s+Madness&quot;&gt;Making Sense of SVG viewBox&amp;#39;s Madness&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bohemiancoding.com/sketch/&quot;&gt;Sketch v3 - Lightweight Design Program&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://petercollingridge.appspot.com/svg_optimiser&quot;&gt;SVG Optimiser Tools &amp;amp; Experiments&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 29 Aug 2014 00:00:00 -0400</pubDate>
        <link>http://technology.customink.com//blog/2014/08/29/dynamic-svgs-using-defs-elements-and-javascript</link>
        <guid isPermaLink="true">http://technology.customink.com//blog/2014/08/29/dynamic-svgs-using-defs-elements-and-javascript</guid>
      </item>
    
      <item>
        <title>Modular CSS with SUIT CSS</title>
        <description>&lt;p&gt;Structuring CSS is hard. I have worked on many projects where the CSS was just an afterthought, a hack to get the page to look a particular way. With the increasing interest in frontend tools and development, these days are behind us.&lt;/p&gt;

&lt;p&gt;Ask yourself the question, &amp;quot;how and why do we apply structure to the code we write?&amp;quot; Now you might wonder, why don&amp;#39;t we apply these same rules and considerations to the CSS (and Sass) that we write? There is no reason to skimp on our style architecture. One way we can bring clarity and structure is by writing modular CSS with the &lt;a href=&quot;http://suitcss.github.io&quot;&gt;SUIT CSS&lt;/a&gt; convention.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;suit-css-introduction&quot;&gt;SUIT CSS Introduction&lt;/h3&gt;

&lt;p&gt;Let&amp;#39;s dive right into it. The basic structure of SUIT is as follows:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.namespace-ComponentName-descendantName--modifierName.is-stateName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.u-utilityName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It might look weird at first as it is different than the CSS you have written in the past, but bear with me, it&amp;#39;s purpose will become clear. This is not necessarily what each of your class declarations will look like, but is meant to serve as a guide and reference to writing semantic SUIT CSS. Each declaration you make will probably contain parts of the structure above.&lt;/p&gt;

&lt;h4 id=&quot;breaking-it-down&quot;&gt;Breaking it down&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;namespace&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;namespace&lt;/code&gt; is optional and allows you to write CSS that will not conflict with any other libraries. This is written in camel case.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ComponentName&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;ComponentName&lt;/code&gt; is your top level component such as &lt;code&gt;Form&lt;/code&gt;. This is written in pascal case.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;descendantName&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;descendantName&lt;/code&gt; is a part of your component that is applying styles on the components behalf. Your &lt;code&gt;Form&lt;/code&gt; component might have a &lt;code&gt;group&lt;/code&gt; descendant, &lt;code&gt;Form-group&lt;/code&gt;. This is written in camel case and follows the base component with a &lt;code&gt;-&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;modifierName&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;modifierName&lt;/code&gt; is a presentation class that modifies the base class in some way. Ex: &lt;code&gt;Form--small&lt;/code&gt;, &lt;code&gt;Form--large&lt;/code&gt;, &lt;code&gt;Btn--primary&lt;/code&gt;, etc. This is written in camel case and follows the base component with a &lt;code&gt;--&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;is-stateName&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;is-stateName&lt;/code&gt; represents the current state of the element (if any). Ex: &lt;code&gt;is-disabled&lt;/code&gt;, &lt;code&gt;is-active&lt;/code&gt;, etc. This is written in camel case and is unlike the previous examples as it is a separate class added to an element.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;u-utilityName&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;u-utilityName&lt;/code&gt; is the odd one. The utility class does not apply to a single component, but is general enough in nature that it can add styling to just about any component. Ex: &lt;code&gt;u-inlineBlock&lt;/code&gt;, &lt;code&gt;u-floatRight&lt;/code&gt;, &lt;code&gt;u-clearfix&lt;/code&gt;, etc. &lt;a href=&quot;http://www.basscss.com/&quot;&gt;BASSCSS&lt;/a&gt; has many good example utility classes (though not written in a strict SUIT CSS syntax).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;a-practical-example&quot;&gt;A Practical Example&lt;/h3&gt;

&lt;p&gt;Let&amp;#39;s get some SUIT under our belts with an actual example. We will build out the &amp;quot;awesome box&amp;quot; component.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sass&quot; data-lang=&quot;sass&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// sass
&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.my-AwesomeBox&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1rem&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;250px&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// .my-AwesomeBox--small
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--small&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// .my-AwesomeBox-title
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-title&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1rem&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// .my-AwesomeBox--large
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--large&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2rem&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// .my-AwesomeBox.is-selected
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.is-selected&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.my-u-center&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;text-align&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;c&quot;&gt;/* generated css */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.my-AwesomeBox&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;250px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.my-AwesomeBox--small&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.my-AwesomeBox-title&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.my-AwesomeBox-title--large&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.my-AwesomeBox.is-selected&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.my-u-center&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;text-align&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;http://sassmeister.com/gist/a166888f44271c291c80&quot; class=&quot;sb-Btn sb-Btn--secondary sb-Btn--responsive&quot;&gt;Play with this example in Sassmeister&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;why?&quot;&gt;Why?&lt;/h3&gt;

&lt;p&gt;While it might feel strange at first glance, give SUIT a shot (or at least another modular CSS variant like &lt;a href=&quot;http://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/&quot;&gt;BEM&lt;/a&gt;). Writing CSS/Sass in this manner provides a number of great benefits:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Consistency and structure

&lt;ul&gt;
&lt;li&gt;This is much better than a hodgepodge of arbitrary CSS randomly strung about with no semantic meaning&lt;/li&gt;
&lt;li&gt;Anyone can enter the project and easily understand and contribute&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Separation of concerns&lt;/li&gt;
&lt;li&gt;Promotes reuse of code by creating the building blocks for the site with components&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://nicolasgallagher.com/about-html-semantics-front-end-architecture/&quot;&gt;Semantic syntax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Composable and extendable CSS

&lt;ul&gt;
&lt;li&gt;Modularity makes it easy to extend components and compose components to get the sum of their parts&lt;/li&gt;
&lt;li&gt;This is particularly useful for building style frameworks as it allows users of the framework to easily make it their own without fighting the framework&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;p&gt;&lt;sub&gt;Reposted from &lt;a href=&quot;http://inlehmansterms.net/2014/08/25/modular-css-with-suitcss/&quot; rel=&quot;canonical&quot;&gt;Jonathan&amp;#39;s blog- In Lehman&amp;#39;s Terms&lt;/a&gt;.&lt;/sub&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 26 Aug 2014 00:00:00 -0400</pubDate>
        <link>http://technology.customink.com//blog/2014/08/26/modular-css-with-suit</link>
        <guid isPermaLink="true">http://technology.customink.com//blog/2014/08/26/modular-css-with-suit</guid>
      </item>
    
      <item>
        <title>Welcome John Dyer!</title>
        <description>&lt;p&gt;&lt;img src=/assets/content/john-dyer-first-deploy-a40aad36a02236382fd0338d400a73e2.jpg alt=&quot;John Dyer&quot; class=&quot;tb-Img tb-Img--responsive tb-Img--fancy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;CustomInk technology is proud to announce that &lt;a href=&quot;https://github.com/lbrapid&quot;&gt;John Dyer&lt;/a&gt; is our newest Inker! Following the new hire tradition, John pushed his first deploy within a couple days of arrival.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;John joins us from &lt;a href=&quot;http://spreecommerce.com&quot;&gt;Spree Commerce&lt;/a&gt;, where he worked as a core contributer to their open source e-commerce platform.&lt;/p&gt;

&lt;p&gt;We just moved our oldest, and biggest application fully onto the asset pipeline. And, for his first deploy, John dove into the deep end and helped with some much needed cleanup. He&amp;#39;ll be looking into some test suite upgrades next. Fixing tests, he&amp;#39;ll know more about the application in no time.&lt;/p&gt;

&lt;p&gt;Welcome to the team John!&lt;/p&gt;
</description>
        <pubDate>Fri, 22 Aug 2014 15:30:00 -0400</pubDate>
        <link>http://technology.customink.com//blog/2014/08/22/welcome-john-dyer</link>
        <guid isPermaLink="true">http://technology.customink.com//blog/2014/08/22/welcome-john-dyer</guid>
      </item>
    
      <item>
        <title>Tapas Time!</title>
        <description>&lt;p&gt;The engineering team at CustomInk is always looking to learn new things.  We&amp;#39;ve come to realize that the density of the information is not always the most important thing.  Rather, exploring a single idea in depth can be a lot of fun.&lt;/p&gt;

&lt;p&gt;Avdi Grimm&amp;#39;s &lt;a href=&quot;http://www.rubytapas.com&quot;&gt;Ruby Tapas&lt;/a&gt; has provided us with a really simple way to execute on this idea.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;We started by purchasing a (very affordable) site license so that every engineer could easily access the content. We thought that it would be great to listen to these little nuggets of information on our own time to level up our skills.  It was interesting to see how quickly found ourselves wanting to chat about an episode we had recently reviewed, only to find that people had listened to a different episode all together.&lt;/p&gt;

&lt;p&gt;Our solution was simple:  Start at episode 1 and have a regular &amp;quot;Tapas Talk&amp;quot; after our daily standup to explore the topic.  The Tapas Talk is optional, and since each episode is only a few minutes, it&amp;#39;s very easy to catch up if you get behind.&lt;/p&gt;

&lt;p&gt;We find ourselves regularly gathering around an editor to explore a concept and are often suprised at what we learn.&lt;/p&gt;

&lt;p&gt;A happy team is a team that learns together.&lt;/p&gt;
</description>
        <pubDate>Fri, 15 Aug 2014 15:24:00 -0400</pubDate>
        <link>http://technology.customink.com//blog/2014/08/15/tapas-time</link>
        <guid isPermaLink="true">http://technology.customink.com//blog/2014/08/15/tapas-time</guid>
      </item>
    
      <item>
        <title>Learning Ruby on Rails</title>
        <description>&lt;p&gt;Learning a new programming language is not easy, and learning a new framework on top of that is definitely not easy, unless you have the right resources and mentors.&lt;/p&gt;

&lt;p&gt;Here at CustomInk they have provided me with an environment that facilitates learning and produces results. This has made my journey of learning ruby on rails substantially easier. On my first day it seemed that the team had planned out my journey very well. I began my introduction to both the ruby language and the rails framework through an online educational program provided by Envy Labs, called Code School.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Code School, continues to provide me with a high level knowledge of both ruby and rails. Envy labs accomplishes this through online courses that push you to apply your knowledge on exercises. These exercises allow you comprehend how such concepts are used in real world programming challenges.&lt;/p&gt;

&lt;p&gt;Overall I am fairly happy with the experience that Envy Labs had provided. However, I personally felt that just using Code School would not be beneficial to my success. Therefore, I utilized other tools and resources to speed up my learning process. Below I will mention a couple of other resources that I have pushed onto the learning stack.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://rubymonk.com/&quot;&gt;Ruby Monk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://guides.rubyonrails.org/index.html&quot;&gt;Rails Guides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://pragprog.com/book/rails4/agile-web-development-with-rails-4&quot;&gt;Agile Web Development with Rails 4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These additional resources have allowed me to fill in the gaps, and get a better depth level knowledge of both ruby and rails. It seemed that it would be quite easy to dive into rails without having a good grasp of the framework, since rails generates so much code for you. However, I really did not want to proceed this way. Instead, I wanted to obtain a depth level of knowledge, due to the complexity of CustomInk&amp;#39;s applications.&lt;/p&gt;

&lt;p&gt;Is my method of learning rails correct? No. People have different learning styles; therefore, no approach is perfect. You must tailor the learning process to meet your needs and ensure your success. In my case, using code school, extra resources, analyzing well written code, and building simple rails applications has allowed me to learn and apply my knowledge. In no form am I a solid Ruby on Rails developer. However, using these tools I can make great efforts to become better as I continue my journey.&lt;/p&gt;
</description>
        <pubDate>Tue, 12 Aug 2014 11:00:00 -0400</pubDate>
        <link>http://technology.customink.com//blog/2014/08/12/learning-ruby-on-rails</link>
        <guid isPermaLink="true">http://technology.customink.com//blog/2014/08/12/learning-ruby-on-rails</guid>
      </item>
    
      <item>
        <title>0-60 in ten weeks at CustomInk’s eCommerce Technology Department</title>
        <description>&lt;p&gt;Going from 0 to 60 miles per hour in ten weeks is impossibly slow for any sports car, but for a summer internship - starting as a novice developer just learning the ropes of CustomInk Tech, to ending the summer developing alongside full-time engineers has been a fast and exciting ride.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;http://technology-customink-com.s3.amazonaws.com/images/summer_at_customink.png&quot; alt=&quot;Summer at CustomInk&quot; class=&quot;tb-Img tb-Img--responsive tb-Img--fancy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At CustomInk, the bar is set extremely high for being a developer in the eCommerce Technology department as well as being a resourceful mentor. Most of what has made my summer both productive, efficient, and awesome was the willingness of the full-time engineers to help me get up to speed on working with real world problems that CustomInk Tech solves each day. From my first day at the office, I felt a sense that I wasn’t &amp;quot;just an intern” but that the people on CustomInk’s eCommerce Tech team cared that I was there for the summer, recognized I could help benefit the team, and helped enable me to do so.&lt;/p&gt;

&lt;p&gt;From working alongside UX designers, learning important DevOps practices, taking care of routine site maintenance, strategizing for large data migrations, refactoring sections of an extensive test suite, developing the code behind new business initiatives, and continually learning and testing my development knowledge and practices are just a few facets of CustomInk Tech I had the privilege to experience over the course of my 10 weeks here.&lt;/p&gt;

&lt;p&gt;To any upperclass college students looking for a summer internship or early career position in a fast-paced and collaborative software engineering environment, I highly recommend researching and applying for the opportunities with CustomInk’s eCommerce Technology department. Some important skills and familiar tools to have would include; a growing proficiency in Ruby, JavaScript, and Git, experience with the development of a Rails application, work well in a collaborative environment,  understanding proper data modeling practices and techniques, being good friends with the command line, and being able to communicate and understand complex and sometime novel technical problems and ideas with fellow engineers and non-engineers.&lt;/p&gt;

&lt;p&gt;Overall, I could not have asked for a more challenging, educating, and enjoyable summer internship experience. I feel that this experience has left me well prepared  for the next steps of my career after my senior year at Carnegie Mellon. A huge thanks to everyone on the team who has made this an amazing summer!&lt;/p&gt;
</description>
        <pubDate>Fri, 25 Jul 2014 11:00:00 -0400</pubDate>
        <link>http://technology.customink.com//blog/2014/07/25/anthcor-summer-internship</link>
        <guid isPermaLink="true">http://technology.customink.com//blog/2014/07/25/anthcor-summer-internship</guid>
      </item>
    
      <item>
        <title>Welcome Hunter Madison!</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://technology-customink-com.s3.amazonaws.com/images/hunter_madison.jpg&quot; alt=&quot;Hunter Madison&quot; class=&quot;tb-Img tb-Img--responsive tb-Img--fancy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hunter joins CustomInk for the summer as a development intern on the DangerSquad!&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;He recently finished upgrading our Clipart application from Ruby 1.8.7 (it&amp;#39;s a
classic!) to 1.9.3. This is a mission-critical app that gets plenty of
traffic, so he worked closely with our webops group to roll this out to production
without downtime or disruption (just in time to upgrade to Ruby 2.1).&lt;/p&gt;

&lt;p&gt;Data grows ever faster and knowing exactly where and how fast it grows has
become an important metric to watch.  Hunter is currently working on a utility to monitor the growth of data in CustomInk applications.&lt;/p&gt;

&lt;p&gt;Welcome to the team Hunter!&lt;/p&gt;
</description>
        <pubDate>Tue, 08 Jul 2014 07:18:00 -0400</pubDate>
        <link>http://technology.customink.com//blog/2014/07/08/welcome-hunter-madison</link>
        <guid isPermaLink="true">http://technology.customink.com//blog/2014/07/08/welcome-hunter-madison</guid>
      </item>
    
      <item>
        <title>Build Better Teams with Dashing Dashboards</title>
        <description>&lt;p&gt;Around here, we love our dashboards. They are the modern water cooler gathering spot. Inkers gather around
and watch the latest T-Shirt designs and track sales across the country. We built the first dashboard as
a spare time experiment, but they quickly grew into an important part of our culture.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Our engineers &lt;a href=&quot;http://twitter.com/cmar&quot;&gt;Chris Mar&lt;/a&gt; and &lt;a href=&quot;http://twitter.com/karledurante&quot;&gt;Karle Durante&lt;/a&gt;
demonstrated at &lt;a href=&quot;http://www.rubynation.org/&quot;&gt;Ruby Nation 2014&lt;/a&gt; just how easy it is to
create and deploy your own dashboards. They showed how to identify key metrics for your project,
aggregate the data, and share it with your team.&lt;/p&gt;

&lt;script async class=&quot;speakerdeck-embed&quot; data-id=&quot;0772bb20d2d901311e317a88ebacabb8&quot;
data-ratio=&quot;1.33333333333333&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;
</description>
        <pubDate>Tue, 17 Jun 2014 07:18:00 -0400</pubDate>
        <link>http://technology.customink.com//blog/2014/06/17/build-better-teams-with-dashing-dashboards</link>
        <guid isPermaLink="true">http://technology.customink.com//blog/2014/06/17/build-better-teams-with-dashing-dashboards</guid>
      </item>
    
      <item>
        <title>Welcome Anthony Corletti!</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://technology-customink-com.s3.amazonaws.com/images/anthony_corletti.png&quot; alt=&quot;Summer at CustomInk&quot; class=&quot;tb-Img tb-Img--responsive tb-Img--fancy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As a rising senior at Carnegie Mellon Unviersity, Anthony joins CustomInk Tech for the summer as a development intern in the Tako Stand!&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Welcome to the team Anthony!&lt;/p&gt;
</description>
        <pubDate>Mon, 19 May 2014 07:18:00 -0400</pubDate>
        <link>http://technology.customink.com//blog/2014/05/19/welcome-anthony-corletti</link>
        <guid isPermaLink="true">http://technology.customink.com//blog/2014/05/19/welcome-anthony-corletti</guid>
      </item>
    
      <item>
        <title>Instrumenting Your Code With ActiveSupport Notifications</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://f.cloud.github.com/assets/2381/1786122/793bf63a-68ef-11e3-8bfc-bd1959c4730b.jpg&quot; alt=&quot;Moving past the supernatural ability to garner information from the log!&quot; class=&quot;tb-Img tb-Img--responsive tb-Img--fancy&quot; /&gt;
Have you ever wondered how tools like New Relic are able to gain valuable metrics to your Rails application&amp;#39;s internals? Or maybe you are interested in learning how to write your own libraries and gems so they can be instrumented using those same techniques? Once again the answer is to look deep into the Rails source code – and the answer is &lt;a href=&quot;http://apidock.com/rails/ActiveSupport/Notifications&quot;&gt;&lt;code&gt;ActiveSupport::Notifications&lt;/code&gt;&lt;/a&gt;. A simple and powerful instrumentation API for Ruby available in Rails v3.0 and upward.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Today I want to share a working example of how you might use ActiveSupport::Notifications. Instead of presenting some contrived code, I thought it would be fun to &lt;a href=&quot;http://vimeo.com/17420638#t=27m27s&quot;&gt;freedom-patch&lt;/a&gt; a popular gem so that we can garner supernatural metrics that would have otherwise been lost or hidden deep in our log. For this exercise I have chosen the &lt;a href=&quot;https://github.com/nulayer/subexec&quot;&gt;Subexec&lt;/a&gt; gem. Subexec is a simple library that spawns an external command with an optional timeout parameter. It is used by other gems like &lt;a href=&quot;https://github.com/minimagick/minimagick&quot;&gt;MiniMagick&lt;/a&gt; – a popular minimal replacement for RMagick.&lt;/p&gt;

&lt;h2 id=&quot;building-subexec::notifications&quot;&gt;Building Subexec::Notifications&lt;/h2&gt;

&lt;p&gt;Our goal will be to build a new gem called subexec-notifications that instruments all commands run by the Subexec library. Once completed, third-party subscribers would be able collect these metrics thereby opening up developer/operational insights into how long certain commands were taking and on which server(s).&lt;/p&gt;

&lt;p&gt;Lucky for us, the Subexec gem has one interface, the &lt;code&gt;Subexec#run!&lt;/code&gt; method. So our work is going to be straight forward. All we have to do is &lt;a href=&quot;http://erniemiller.org/2011/02/03/when-to-use-alias_method_chain/&quot;&gt;alias method chain&lt;/a&gt; that instance method and wrap it with some instrumentation. Assuming you are up to speed on this practice, here is our new implementation.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run_with_notifications!&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;sub: &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;hostname: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;gethostname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;ActiveSupport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Notifications&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;instrument&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;subexec.run&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;run_without_notifications!&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This small snippet of code exemplifies how simple it is to instrument our code. The Notifications instrument class method takes two arguments, a string for the name and an optional payload hash. The name will be used by subscribers and the payload hash can contain anything you want.&lt;/p&gt;

&lt;p&gt;Since the Subexec instance has tons of valuable information like the commands output, process id, exit status, and the command string itself - I decided to include it with our payload. The host name is provided with the payload to help us aggregate or subdivide our metrics for each server.&lt;/p&gt;

&lt;p&gt;Believe it or not, that pretty much wraps up all that is needed for our new gem&amp;#39;s code. Everything else like tests and gem structure are orthogonal to our learning today. But please, browse the entire &lt;a href=&quot;https://github.com/customink/subexec-notifications&quot;&gt;subexec-notifications&lt;/a&gt; gem if you are interested in how it is put together.&lt;/p&gt;

&lt;h2 id=&quot;choosing-a-metrics-service&quot;&gt;Choosing A Metrics Service&lt;/h2&gt;

&lt;p&gt;So now we have a way to instrument all of our system commands, but how do we collect and view that data? To be honest, your options are incredibly numerous at this point. While learning ActiveSupport::Notifications myself, these two services kept appearing.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.datadoghq.com&quot;&gt;Datadog - Monitoring Service&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://metrics.librato.com&quot;&gt;Librato - Highly Scalable Metrics, Monitoring &amp;amp; Alerts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My examples below will use Librato since I found their service extremely simple to use. I was able to quickly get metrics submitted to them and viewable via their dashboard gauges. Librato also has a very nice presence on Github and some impressive tools for Ruby. Datadog is no slouch in any of these areas either. So please use what best fits your own needs.&lt;/p&gt;

&lt;p&gt;IMPORTANT: The example Rails application code that follows makes direct use of the &lt;a href=&quot;https://github.com/librato/librato-metrics&quot;&gt;librato-metrics&lt;/a&gt; gem. This means that submissions will happen synchronously while your application is running. You would never do this in your Rails application! If you choose to use Librato, please use the &lt;a href=&quot;https://github.com/librato/librato-rails&quot;&gt;librato-rails&lt;/a&gt; gem instead. Metrics are then delivered asynchronously behind the scenes so they won&amp;#39;t affect the performance of your requests. Other possibilities would be to use background jobs or some other worker message queue.&lt;/p&gt;

&lt;h2 id=&quot;subscribing-to-events&quot;&gt;Subscribing To Events&lt;/h2&gt;

&lt;p&gt;Assuming we have a Rails application that makes use of MiniMagick, Subexec or both, all we have to do now is bundle up our new notification gem along with librato-metrics.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# In Gemfile&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;subexec-notifications&#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;librato-metrics&#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we need to subscribe to the &lt;code&gt;subexec.run&lt;/code&gt; events that we instrumented in the subexec-notifications gem. For a Rails application, this is best done in an initializer named after the gem.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# In config/initializers/subexec_notifications.rb&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;ActiveSupport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Notifications&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;subscribe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;subexec.run&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Subscribers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SubexecLibrato&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;publishing-metrics&quot;&gt;Publishing Metrics&lt;/h2&gt;

&lt;p&gt;As you can see in the code above, subscribing to an event will yield an array of arguments. Technically, these will be the name of the event, a few timestamps, a unique id, and the payload. Because dealing with individual arguments is not very object-oriented, I always recommend creating an event object using the &lt;code&gt;ActiveSupport::Notifications::Event&lt;/code&gt; class. It consumes these arguments and gives you a clean interface to the &lt;code&gt;duration&lt;/code&gt; of the event, &lt;code&gt;payload&lt;/code&gt;, and more.&lt;/p&gt;

&lt;p&gt;To accomplish this in one place for our publishing code, I created a simple base class for all our subscribers to inherit from. This base class creates our &lt;code&gt;event&lt;/code&gt; object as well as a &lt;code&gt;process&lt;/code&gt; method that subclasses must implement.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# In app/models/subscribers/base.rb&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Subscribers&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Base&lt;/span&gt;

    &lt;span class=&quot;kp&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:event&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@event&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveSupport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Notifications&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;process&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NotImplementedError&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now to the fun part, sending some metrics to Librato. Below is the full implementation of our &lt;code&gt;SubexecLibrato&lt;/code&gt; event consumer. This creates two different types of metrics. One for each command/binary that was run and the other for the host the commands are run on. Each of these metrics will allow us to build some interesting gauges. The Librato site has a great developer section titled &lt;a href=&quot;http://dev.librato.com/v1/metrics&quot;&gt;What Are Metrics&lt;/a&gt; that can guide you on what type of data you may want to submit.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# In app/models/subscribers/subexec_librato.rb&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Subscribers&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SubexecLibrato&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;process&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;sub&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;dur&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;duration&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:hostname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;current&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;Librato&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Metrics&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;submit&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;subexec.hosts&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;measure_time: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;value: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;source: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;Librato&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Metrics&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;submit&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;subexec.types&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;measure_time: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;value: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;source: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;viewing-metrics&quot;&gt;Viewing Metrics&lt;/h2&gt;

&lt;p&gt;Here are what each of these metrics look like in Librato. To generate some commands, I wrote a small tests case that did some random MiniMagick commands along with a few &lt;code&gt;echo&lt;/code&gt; and &lt;code&gt;uptime&lt;/code&gt; commands. All of these ran on my local machine.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://f.cloud.github.com/assets/2381/1786123/794fa874-68ef-11e3-896c-7d1ff0c64fa0.png&quot; class=&quot;tb-Img tb-Img--responsive-ctr tb-Img--fancy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://f.cloud.github.com/assets/2381/1786124/79513810-68ef-11e3-915c-3278d1394f8d.png&quot; class=&quot;tb-Img tb-Img--responsive-ctr tb-Img--fancy&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;in-closing&quot;&gt;In Closing&lt;/h2&gt;

&lt;p&gt;Hopefully these simple examples we built will help get you excited both about instrumenting your application as well as collecting and viewing those metrics. If you are hungry for more, check out the links in the resources below. You can even dig deep into the Rails source to see where and how it uses ActiveSupport::Notifications. Thanks!&lt;/p&gt;

&lt;h2 id=&quot;other-resources&quot;&gt;Other Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://apidock.com/rails/ActiveSupport/Notifications&quot;&gt;APIdock ActiveSupport::Notifications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/nextmat/digging-deep-with-activesupportnotifications&quot;&gt;Digging Deep with ActiveSupport::Notifications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/customink/subexec-notifications&quot;&gt;Final Subexec::Notifications Gem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.datadoghq.com&quot;&gt;Datadog - Monitoring Service&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/DataDog&quot;&gt;Datadog - On Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://metrics.librato.com&quot;&gt;Librato - Highly Scalable Metrics, Monitoring &amp;amp; Alerts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/librato&quot;&gt;Librato - On Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 19 Dec 2013 13:36:00 -0500</pubDate>
        <link>http://technology.customink.com//blog/2013/12/19/instrumenting-your-code-with-activesupport-notifications</link>
        <guid isPermaLink="true">http://technology.customink.com//blog/2013/12/19/instrumenting-your-code-with-activesupport-notifications</guid>
      </item>
    
      <item>
        <title>Welcome Michael Peteuil!</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://technology-customink-com.s3.amazonaws.com/images/welcome_michael_peteuil.jpg&quot; alt=&quot;Michael Peteuil&quot; class=&quot;tb-Img tb-Img--responsive tb-Img--fancy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Michael has joined CustomInk and is a member of the Wildcards Fireteam. He&amp;#39;s been focusing on our new text generation service. And will be helping us with a big upgrade on our main Rails project.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Welcome to the team Michael!&lt;/p&gt;
</description>
        <pubDate>Sun, 01 Dec 2013 07:18:00 -0500</pubDate>
        <link>http://technology.customink.com//blog/2013/12/01/welcome-michael-peteuil</link>
        <guid isPermaLink="true">http://technology.customink.com//blog/2013/12/01/welcome-michael-peteuil</guid>
      </item>
    
      <item>
        <title>Upper Lipsters 2013</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://technology-customink-com.s3.amazonaws.com/images/upperlipsters.jpg&quot; alt=&quot;upperlipsters&quot; class=&quot;tb-Img tb-Img--responsive tb-Img--fancy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Our hipster engineers donated their upper lips to change the face of men’s health. They formed
the &lt;a href=&quot;http://moteam.co/lipsters&quot;&gt;Upper Lipsters&lt;/a&gt; and raised $4,202 to support men&amp;#39;s health
awareness.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;They sold these &lt;a href=&quot;https://www.booster.com/lipsters2013&quot;&gt;sweet v-neck shirts&lt;/a&gt; using CustomInk&amp;#39;s Booster
campaign platform. And even received support from the &lt;a href=&quot;https://www.booster.com/lipstersmosistas2013&quot;&gt;Mo&amp;#39; Sistas&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The culmination of weeks of growing is the photo shoot in our professional studio. Followed by the soothing
relief of a clean shave, the heartfelt joy of charity and the planning for next years `stache.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://technology-customink-com.s3.amazonaws.com/images/2013-12-02_movember_portraits.jpg&quot; alt=&quot;upperlipsters&quot; class=&quot;tb-Img tb-Img--responsive-ctr tb-Img--fancy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://technology-customink-com.s3.amazonaws.com/images/2013-12-02_movember_portraits121.jpg&quot; alt=&quot;upperlipsters&quot; class=&quot;tb-Img tb-Img--responsive-ctr tb-Img--fancy&quot; /&gt;
&lt;img src=&quot;http://technology-customink-com.s3.amazonaws.com/images/2013-12-02_movember_portraits158.jpg&quot; alt=&quot;upperlipsters&quot; class=&quot;tb-Img tb-Img--responsive-ctr tb-Img--fancy&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 30 Nov 2013 13:36:00 -0500</pubDate>
        <link>http://technology.customink.com//blog/2013/11/30/upper-lipsters</link>
        <guid isPermaLink="true">http://technology.customink.com//blog/2013/11/30/upper-lipsters</guid>
      </item>
    
      <item>
        <title>Welcome Jonathan Lehman!</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://technology-customink-com.s3.amazonaws.com/images/jonathan_lehman.jpg&quot; alt=&quot;Jonathan Lehman&quot; class=&quot;tb-Img tb-Img--responsive tb-Img--fancy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Jonathan joins CustomInk from &lt;a href=&quot;http://www.wm.edu/&quot;&gt;William &amp;amp; Mary&lt;/a&gt; where he  studied Computer Science powered by bread ends and house dressing at the local &lt;a href=&quot;http://www.cheeseshopwilliamsburg.com/&quot;&gt;Cheese Shop&lt;/a&gt;. He joins the Ironborn Industries fireteam.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;He will be working on &lt;a href=&quot;http://booster.com&quot;&gt;Booster&lt;/a&gt; - the best way to raise money and awareness for your cause, passion
or project.&lt;/p&gt;

&lt;p&gt;Welcome to the team Jonathan!&lt;/p&gt;
</description>
        <pubDate>Thu, 31 Oct 2013 13:36:00 -0400</pubDate>
        <link>http://technology.customink.com//blog/2013/10/31/welcome-jonathan-lehman</link>
        <guid isPermaLink="true">http://technology.customink.com//blog/2013/10/31/welcome-jonathan-lehman</guid>
      </item>
    
      <item>
        <title>Halloween Costume Winners!</title>
        <description>&lt;p&gt;What happens when you challenge a group of engineers to a costume contest? They go BIG. CustomInk has
a spirit of creativity and inkers approach the art Halloween Costuming very seriously. All of
our e-commerce fireteams joined together to recreate Toy Story.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;The company voted among the hundreds of wonderful costumes. This year our island of misfit engineers,
UX designers and product managers took first place.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://technology-customink-com.s3.amazonaws.com/images/halloween2013.jpg&quot; alt=&quot;Halloween Winners&quot; class=&quot;tb-Img tb-Img--responsive-ctr tb-Img--fancy&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 31 Oct 2013 07:08:00 -0400</pubDate>
        <link>http://technology.customink.com//blog/2013/10/31/halloween-costume-winners</link>
        <guid isPermaLink="true">http://technology.customink.com//blog/2013/10/31/halloween-costume-winners</guid>
      </item>
    
      <item>
        <title>Welcome Ryan Billings!</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://technology-customink-com.s3.amazonaws.com/images/ryan_billings.jpg&quot; alt=&quot;Ryan Billings&quot; class=&quot;tb-Img tb-Img--responsive tb-Img--fancy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ryan joins CustomInk as a software engineer. He recently added features that
allow our staff to quickly cancel and refund orders on &lt;a href=&quot;http://www.booster.com&quot;&gt;Booster&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt; 

&lt;p&gt;We&amp;#39;re fans of lean product development, so it&amp;#39;s not uncommon to deploy features
with simple implementations in order to quickly learn about our customers.
Alas, there comes a time to pay the piper: the manual order cancelation process
we got by with was becoming a burden.&lt;/p&gt;

&lt;p&gt;Just as important, we realized that our financial data model no longer
reflected our reality; a refactor was in order. Ever the consummate team
player, Ryan worked with engineers and stakeholders to design a better data
model. Through a series of deploys, he updated the system with no downtime or
impact on customers or client applications.&lt;/p&gt;

&lt;p&gt;Finally, Ryan made quick work of the actual cancel feature, a good sign that we
had refactored correctly.&lt;/p&gt;

&lt;p&gt;Welcome to the team, Ryan! We’re glad you’re here.&lt;/p&gt;
</description>
        <pubDate>Tue, 15 Oct 2013 13:36:00 -0400</pubDate>
        <link>http://technology.customink.com//blog/2013/10/15/welcome-ryan-billings</link>
        <guid isPermaLink="true">http://technology.customink.com//blog/2013/10/15/welcome-ryan-billings</guid>
      </item>
    
      <item>
        <title>Chris Mar is an Inker</title>
        <description>&lt;p&gt;CustomInk technology is proud to announce that &lt;a href=&quot;https://github.com/cmar&quot;&gt;Chris Mar&lt;/a&gt; is our newest Inker!  Following the new hire tradition, Chris pushed his first deploy to &lt;a href=&quot;http://www.booster.com&quot;&gt;Booster.com&lt;/a&gt; within hours of arrival.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://technology-customink-com.s3.amazonaws.com/images/chris_mar_first_deploy.jpg&quot; alt=&quot;Chris&#39; first deploy&quot; class=&quot;tb-Img tb-Img--responsive tb-Img--fancy&quot; /&gt;&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Chris joins us from &lt;a href=&quot;http://spreecommerce.com&quot;&gt;Spree Commerce&lt;/a&gt;, where he worked as a core contributer to their open source e-commerce platform.  Chris is also a co-organizer of &lt;a href=&quot;http://rubyloco.com/&quot;&gt;Ruby LoCo&lt;/a&gt;, a Loudoun County, Virgina based Ruby user group.
You can hear him every third Friday on the &lt;a href=&quot;http://ruby5.envylabs.com&quot;&gt;Ruby5&lt;/a&gt; podcast.&lt;/p&gt;

&lt;p&gt;If you missed Chris at &lt;a href=&quot;http://rubydcamp.org/&quot;&gt;Ruby DCamp&lt;/a&gt; last weekend, then be sure to look out for him at &lt;a href=&quot;http://rubyconf.org&quot;&gt;RubyConf&lt;/a&gt; this November.&lt;/p&gt;
</description>
        <pubDate>Tue, 01 Oct 2013 08:38:00 -0400</pubDate>
        <link>http://technology.customink.com//blog/2013/10/01/chris-mar-is-an-inker</link>
        <guid isPermaLink="true">http://technology.customink.com//blog/2013/10/01/chris-mar-is-an-inker</guid>
      </item>
    
      <item>
        <title>Welcome Lisa Pourkhomami!</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://technology-customink-com.s3.amazonaws.com/images/lisap.jpg&quot; alt=&quot;Lisa Pourkhomami&quot; class=&quot;tb-Img tb-Img--responsive tb-Img--fancy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Lisa joins CustomInk as a software engineer. She recently completed integrating payment processing into our new cart for &lt;a href=&quot;http://campaigns.customink.com&quot;&gt;CustomInk Campaigns&lt;/a&gt;, a huge upgrade in our user experience.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;We are organized into small fire teams, each with a product manager, user experience designer, and a handful of software engineers. We succeed when we work together, balancing getting it done and getting it right. Lucky for &lt;em&gt;Danger Squad!&lt;/em&gt;, Lisa brings an awesome mix of pragmatism and attention to detail to the team.&lt;/p&gt;

&lt;p&gt;She also brings a broad skill set, which is great because we tackle projects at every level of the stack. Sometimes it&amp;#39;s a responsive customer experience, other times it&amp;#39;s extracting a new web service. And it&amp;#39;s always measured and analyzed in frightening detail.&lt;/p&gt;

&lt;p&gt;Welcome to the team, Lisa. We&amp;#39;re looking forward to great things!&lt;/p&gt;
</description>
        <pubDate>Mon, 24 Jun 2013 10:43:00 -0400</pubDate>
        <link>http://technology.customink.com//blog/2013/06/24/welcome-lisa-pourkhomami</link>
        <guid isPermaLink="true">http://technology.customink.com//blog/2013/06/24/welcome-lisa-pourkhomami</guid>
      </item>
    
      <item>
        <title>Welcome Sukhada Kulkarni</title>
        <description>&lt;p&gt;CustomInk technology is very excited to welcome one of our new summer interns, &lt;a href=&quot;http://www.sukhadakulkarni.com&quot;&gt;Sukhada Kulkarni&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://technology-customink-com.s3.amazonaws.com/images/sukhada_deploy.jpg&quot; alt=&quot;Sukhada&#39;s First Day&quot; class=&quot;tb-Img tb-Img--responsive tb-Img--fancy&quot; /&gt;&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Sukhada started her internship with CustomInk on Monday and wasted no time jumping into our code base!  After getting acquainted with CustomInk, and getting her development environment setup, Sukhada deployed her first changes this afternoon to &lt;a href=&quot;http://campaigns.customink.com&quot;&gt;CustomInk | Campaigns&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Sukhada lives in Cincinnati, Ohio and is a Computer Science major at &lt;a href=&quot;http://www.cmu.edu&quot;&gt;Carnegie Mellon University&lt;/a&gt;.  She will intern with us through the summer and we are looking forward to the great things that we&amp;#39;ll accomplish together.&lt;/p&gt;

&lt;p&gt;This is our third year hosting &lt;a href=&quot;http://technology.customink.com/blog/2012/05/24/welcome-interns/&quot;&gt;interns&lt;/a&gt; from Carnegie Mellon and we&amp;#39;re are looking forward to many more.&lt;/p&gt;
</description>
        <pubDate>Wed, 05 Jun 2013 21:35:00 -0400</pubDate>
        <link>http://technology.customink.com//blog/2013/06/05/welcome-sukhada-kulkarni</link>
        <guid isPermaLink="true">http://technology.customink.com//blog/2013/06/05/welcome-sukhada-kulkarni</guid>
      </item>
    
      <item>
        <title>Bootstrap Your Next Project With The HolyGrailHarness</title>
        <description>&lt;p&gt;The &lt;a href=&quot;https://github.com/metaskills/holy_grail_harness&quot;&gt;HolyGrailHarness&lt;/a&gt; is a curated Rails application prototype that focuses on simple test patterns for Ruby &amp;amp; JavaScript!&lt;/p&gt;

&lt;p&gt;Unlike normal &lt;a href=&quot;http://guides.rubyonrails.org/rails_application_templates.html&quot;&gt;Rails Application Templates&lt;/a&gt; or more modern Rails application generators like &lt;a href=&quot;http://railsapps.github.com/rails-composer/&quot;&gt;Rails Composer&lt;/a&gt;, the HolyGrailHarness is a basic Rails application that can be considered a prototype and customized via a simple setup script. It is also somewhat opinionated in that it promotes simple and powerful testing choices and focuses on using Ruby 1.9 and up, MiniTest::Spec, Capybara, Poltergeist/PhantomJS, and Konacha. More details on each component and what HolyGrailHarness provides are below.&lt;/p&gt;

&lt;p&gt;The HolyGrailHarness is perfect for any of the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Bootstrapping your next Rails application.&lt;/li&gt;
&lt;li&gt;Learning and promoting MiniTest::Spec&lt;/li&gt;
&lt;li&gt;Modern JavaScript testing setups.&lt;/li&gt;
&lt;li&gt;Teaching Rails and/or JavaScript at your next meetup.&lt;/li&gt;
&lt;/ul&gt;

&lt;!--more--&gt;

&lt;h1 id=&quot;usage&quot;&gt;Usage&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/metaskills/holy_grail_harness/archive/master.zip&quot;&gt;Download&lt;/a&gt; the project.&lt;/li&gt;
&lt;li&gt;Now from the root of &amp;quot;holy_grail_harness&amp;quot; directory.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;bundle install
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;thor setup my_app_name
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Make sure to replace &lt;code&gt;my_app_name&lt;/code&gt; above with the name of your new Rails application. The setup script has a few options, but the end result will be a new Rails application all ready to go. &lt;strong&gt;So why not a normal Rails application template?&lt;/strong&gt; Although, Rails application templates provide a really nice feature set. It was much easier to bootstrap a new Rails application using this prototype method. The end result is a cleaner Gemfile and application setup that can be vetted and tested from within HolyGrailHarness itself.&lt;/p&gt;

&lt;p&gt;The script will rename your directory and prompt you to &lt;code&gt;cd&lt;/code&gt; to that directory. Once you do that, run &lt;code&gt;rake test:all&lt;/code&gt; to see that everything is working.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ../my_app_name
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;rake &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;:all
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;rails-3&quot;&gt;Rails 3&lt;/h1&gt;

&lt;p&gt;This application prototype will focus on the latest Rails version. At this time, the bundle is locked down to v3.2.9. As Rails updates and is compatible with each component, so will this prototype application be updated. The bundle includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/evrone/quiet_assets&quot;&gt;QuietAssets&lt;/a&gt; gem for silent pipeline logging.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/macournoyer/thin/&quot;&gt;Thin&lt;/a&gt; webserver. Primarily to be automatically used by Konacha but also good for development if you are not using something like &lt;a href=&quot;http://pow.cx&quot;&gt;Pow&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;testing&quot;&gt;Testing&lt;/h1&gt;

&lt;h3 id=&quot;minitest::spec-all-the-way-across-the-sky!&quot;&gt;MiniTest::Spec All The Way Across The Sky!&lt;/h3&gt;

&lt;p&gt;Don&amp;#39;t wait for Rails 4 to use MiniTest::Spec! This application is using the &lt;a href=&quot;https://github.com/metaskills/minitest-spec-rails&quot;&gt;minitest-spec-rails&lt;/a&gt; gem which forces &lt;code&gt;ActiveSupport::TestCase&lt;/code&gt; to subclass &lt;code&gt;MiniTest::Spec&lt;/code&gt;. This means that you can start using the MiniTest&amp;#39;s Spec or Unit structure and assertions directly within the familiar Rails unit, functional, or integration directories. For full details, check out the &lt;a href=&quot;https://github.com/metaskills/minitest-spec-rails&quot;&gt;minitest-spec-rails&lt;/a&gt; documentation or some of the &lt;a href=&quot;https://github.com/metaskills/holy_grail_harness/blob/master/test/functional/application_controller_test.rb&quot;&gt;test shims&lt;/a&gt; within HolyGrailHarness. For example, a &lt;code&gt;test/unit/user_test.rb&lt;/code&gt; might look like this.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;test_helper&#39;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveSupport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TestCase&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:bob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:bob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:admin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:admin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;must respond true to #admin? for administrators only&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;admin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;must_be&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:admin?&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;wont_be&lt;/span&gt;   &lt;span class=&quot;ss&quot;&gt;:admin?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;capybara-integration-tests-with-poltergeist-using-phantomjs&quot;&gt;Capybara Integration Tests With Poltergeist Using PhantomJS&lt;/h3&gt;

&lt;p&gt;You don&amp;#39;t need Cucumber to write good integration tests. Instead use the basic &lt;a href=&quot;https://github.com/jnicklas/capybara#the-dsl&quot;&gt;Capybara DSL&lt;/a&gt; directly within a Rails integration tests with the most bad ass driver available, &lt;a href=&quot;https://github.com/jonleighton/poltergeist&quot;&gt;Poltergeist&lt;/a&gt;, which is built on top of &lt;a href=&quot;http://phantomjs.org&quot;&gt;PhantomJS&lt;/a&gt;. Never again worry about installing Qt so you can compile capybara-webkit, just go download a &lt;a href=&quot;http://phantomjs.org/download.html&quot;&gt;pre-compiled PhantomJS binary&lt;/a&gt; for your specific platform and enjoy 20% faster integration test runs vs capybara-webkit.&lt;/p&gt;

&lt;p&gt;Integration tests are still within the &lt;code&gt;ActionDispatch::IntegrationTest&lt;/code&gt; class and as promised, MiniTest::Spec is available here too. Each test file needs to require the &lt;a href=&quot;https://github.com/metaskills/holy_grail_harness/blob/master/test/test_helper_integration.rb&quot;&gt;test_helper_integration&lt;/a&gt; which provides the following base features.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sets page size to that of a 13&amp;quot; MacBook Air.&lt;/li&gt;
&lt;li&gt;Resets Capybara sessions after each test.&lt;/li&gt;
&lt;li&gt;Provides a &lt;code&gt;#save_and_open_page&lt;/code&gt;, or &lt;code&gt;#page!&lt;/code&gt; for short, screen shot method.&lt;/li&gt;
&lt;li&gt;Ensures a single ActiveRecord DB connection for transactional test runs.&lt;/li&gt;
&lt;li&gt;An &lt;code&gt;#execjs&lt;/code&gt; helper for bridging Ruby and the JavaScript under test.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;HolyGrailHarness comes with a integration test example in the &lt;a href=&quot;https://github.com/metaskills/holy_grail_harness/blob/master/test/integration/application_test.rb&quot;&gt;test/integration/application_test.rb&lt;/a&gt; file. An integration test might look something like this.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;test_helper_integration&#39;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ApplicationTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActionDispatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;IntegrationTest&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;before&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root_path&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:h1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;h1&#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;renders&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;must_be&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:present?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;konacha-javascript-tests-using-phantomjs&quot;&gt;Konacha JavaScript Tests Using PhantomJS&lt;/h3&gt;

&lt;p&gt;Move over Jasmine(rice), &lt;a href=&quot;https://github.com/jfirebaugh/konacha&quot;&gt;Konacha&lt;/a&gt; is the way to test your JavaScript now. Konacha is a Rails engine that allows you to test your JavaScript with the &lt;a href=&quot;http://visionmedia.github.com/mocha/&quot;&gt;Mocha&lt;/a&gt; test framework and &lt;a href=&quot;http://chaijs.com&quot;&gt;Chai&lt;/a&gt; assertion library. Konacha&amp;#39;s killer feature is a sandboxed &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; for each test spec to run within as well as full Rails asset pipeline integration. The HolyGrailHarness does all the work to get your Konacha &lt;a href=&quot;https://github.com/metaskills/holy_grail_harness/tree/master/spec/javascripts&quot;&gt;&lt;code&gt;spec/javascripts&lt;/code&gt;&lt;/a&gt; directory all setup and ready to go. Highlights include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An &lt;a href=&quot;https://github.com/metaskills/holy_grail_harness/blob/master/config/initializers/konacha.rb&quot;&gt;initializer&lt;/a&gt; that sets up Poltergeist as the Capybara driver.&lt;/li&gt;
&lt;li&gt;A directory structure for model, view, and controller specs.&lt;/li&gt;
&lt;li&gt;A &lt;a href=&quot;https://github.com/metaskills/holy_grail_harness/blob/master/spec/javascripts/spec_helper.js.coffee&quot;&gt;&lt;code&gt;spec_helper.js.coffee&lt;/code&gt;&lt;/a&gt; for your specs to require. Provides global setup, configurations and vendor requires.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;HolyGrailHarness also has a &lt;a href=&quot;https://github.com/metaskills/holy_grail_harness/tree/master/spec/javascripts/spec_helper&quot;&gt;&lt;code&gt;spec/javascripts/spec_helper&lt;/code&gt;&lt;/a&gt; directory meant for helpers and extensions that should be available to all specs. We have included a &lt;a href=&quot;https://github.com/metaskills/holy_grail_harness/blob/master/spec/javascripts/spec_helper/fixtures.js.coffee&quot;&gt;&lt;code&gt;fixtures.js.coffee&lt;/code&gt;&lt;/a&gt; file that demonstrates how to setup JSON data fixtures for use from anything to stubbing requests to instantiating new model objects. We also have a &lt;a href=&quot;https://github.com/metaskills/holy_grail_harness/blob/master/spec/javascripts/spec_helper/helpers.js.coffee&quot;&gt;&lt;code&gt;helpers.js.coffee&lt;/code&gt;&lt;/a&gt; file that exposes a few top level functions that make debugging your JavaScript easy. Below are the vendored JavaScript libraries that are required by the &lt;code&gt;spec_helper&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://sinonjs.org&quot;&gt;Sinon.JS&lt;/a&gt; - For spies, stubs, faking time, etc.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/appendto/jquery-mockjax&quot;&gt;jQuery Mockjax&lt;/a&gt; - Best way to mock jQuery&amp;#39;s AJAX functions.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/chaijs/chai-jquery&quot;&gt;Chai jQuery&lt;/a&gt; - Chai assertions for jQuery.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://github.com/NV/jsDump&quot;&gt;jsDump&lt;/a&gt; - Used by the &lt;code&gt;myLog()&lt;/code&gt; helper.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Because your CI system should run all your tests, the HolyGrailHarness has added a Rake task to the test namespace that runs the default rails test task (units, functional, integrations) then your Konacha tests.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;rake &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;:all     &lt;span class=&quot;c&quot;&gt;# Runs all Rails tests, then Konacha tests.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;guard&quot;&gt;Guard&lt;/h3&gt;

&lt;p&gt;TDD in style and run your tests when you hit save! Both &lt;a href=&quot;https://github.com/guard/guard-minitest&quot;&gt;guard-minitest&lt;/a&gt; and &lt;a href=&quot;https://github.com/alexgb/guard-konacha&quot;&gt;guard-konacha&lt;/a&gt; are bundled and ready to go. A basic &lt;code&gt;Guardfile&lt;/code&gt; is already setup too. Unlike most, this one is split into two groups &lt;code&gt;:ruby&lt;/code&gt; or &lt;code&gt;:js&lt;/code&gt;. This lets you focus on either everything or a specific language for your tests.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;guard             &lt;span class=&quot;c&quot;&gt;# Monitor both Ruby and JavaScript tests.&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;guard -g ruby     &lt;span class=&quot;c&quot;&gt;# Monitor Ruby tests.&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;guard -g js       &lt;span class=&quot;c&quot;&gt;# Monitor JavaScript tests.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The Guardfile assumes you are running OS X and wish to use the Ruby GNTP (Growl Notification Transport Protocol). If this is not the case, consult the Guard documentation on different &lt;a href=&quot;https://github.com/guard/guard#system-notifications&quot;&gt;system notification&lt;/a&gt; alternatives.&lt;/p&gt;

&lt;h3 id=&quot;factories-and-fixtures&quot;&gt;Factories And Fixtures&lt;/h3&gt;

&lt;p&gt;ActiveRecord YAML fixtures suck, but so do slow tests that rely on an empty database with excessive setups based on factories. The answer? Take advantage of the best each has to offer. Use factories to populate fixtures into the test database while leveraging database transactions during your test runs. The end result is a known factory story with the ability to create more test data as needed using the same factories. Allowing factories to properly hook into model logic means no more decomposing business logic into YAML text files. How?&lt;/p&gt;

&lt;p&gt;The HolyGrailHarness bundles the &lt;a href=&quot;https://github.com/metaskills/named_seeds&quot;&gt;named_seeds&lt;/a&gt; gem along with the &lt;a href=&quot;https://github.com/thoughtbot/factory_girl&quot;&gt;factory_girl&lt;/a&gt; gem. The NamedSeeds library checks for the existence of a &lt;a href=&quot;https://github.com/metaskills/holy_grail_harness/blob/master/db/test/seeds.rb&quot;&gt;&lt;code&gt;db/test/seeds.rb&lt;/code&gt;&lt;/a&gt; file and if present, loads that file. Just like Rails&amp;#39; own &lt;code&gt;db/seeds.rb&lt;/code&gt; anything in this file goes. The only difference is that this seed file is populated right before you tests are run so they persist between transactions. You also get the benefit of using this same seed data in development as part of the normal Rails &lt;code&gt;db:setup&lt;/code&gt; process. Read the &lt;a href=&quot;https://github.com/metaskills/named_seeds#namedseeds&quot;&gt;full documentationn&lt;/a&gt; on their site on how to use it. Below is a brief example.&lt;/p&gt;

&lt;p&gt;Create factories in the &lt;code&gt;test/factories&lt;/code&gt; directory. Note, factories are best when they make &lt;code&gt;valid garbage™&lt;/code&gt;, so the HolyGrailHarness also requires the &lt;a href=&quot;https://github.com/sevenwire/forgery&quot;&gt;forgery&lt;/a&gt; gem to help with that.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# In test/factories/user_factory.rb&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;FactoryGirl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;factory&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:user&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Forgery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;first_name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Forgery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first_name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;last_name&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Forgery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first_name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;   &lt;span class=&quot;s1&quot;&gt;&#39;test&#39;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When making seed data, be explicit with your attributes that may be forged in the factory, database seeds should be consistent and have meaningful attributes. In this example we are creating an admin user. Note too how we are using &lt;code&gt;NamedSeeds.identify&lt;/code&gt; which mimics AcctiveRecord&amp;#39;s fixture identity. This gives us a handle to the fixture within our tests. We also create the &lt;code&gt;@admin&lt;/code&gt; instance variable because we might want to use that user later on in the fixture story.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# In db/test/seeds.rb&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;factory_girl&#39;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;FactoryGirl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find_definitions&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FactoryGirl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Syntax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Methods&lt;/span&gt;

&lt;span class=&quot;vi&quot;&gt;@admin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;id: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;NamedSeeds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;identify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:admin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                       &lt;span class=&quot;ss&quot;&gt;first_name: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Admin&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;last_name: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;User&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;email: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;admin@test.com&#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Lastly, in your &lt;a href=&quot;https://github.com/metaskills/holy_grail_harness/blob/master/test/test_helper.rb&quot;&gt;&lt;code&gt;test/test_helper.rb&lt;/code&gt;&lt;/a&gt; file, declare that you have a named seed to the users model. This will allow your tests to act just like those with ActiveRecord fixtures and use the &lt;code&gt;users(:admin)&lt;/code&gt; helper to get to that seeded fixture.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# In test/test_helper.rb&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ActiveSupport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TestCase&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;named_seeds&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:users&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;mvc-javascript&quot;&gt;MVC JavaScript&lt;/h1&gt;

&lt;p&gt;The HolyGrailHarness wants you to use some type MV* structure for your JavaScript. The setup script supports &lt;a href=&quot;http://spinejs.com&quot;&gt;Spine.js&lt;/a&gt; as an option, however you can decline and all traces of Spine.js will be removed. If so, the following features will still remain.&lt;/p&gt;

&lt;p&gt;A single JavaScript &lt;a href=&quot;https://github.com/metaskills/holy_grail_harness/blob/master/app/assets/javascripts/holy_grail_harness/lib/namespaces.js.coffee&quot;&gt;namespace&lt;/a&gt; on the window object. This namespace creates a model, view, controller object structure that direly matches to the &lt;a href=&quot;https://github.com/metaskills/holy_grail_harness/tree/master/app/assets/javascripts/holy_grail_harness&quot;&gt;&lt;code&gt;app/assets/javascripts/#{my_app_name}/(model|view|controller)&lt;/code&gt;&lt;/a&gt; directory structure within the Rails asset pipeline. This JavaScript namespace and matching directories will be changed to your new application name as part of the setup task. Here is an example of a User model whose corresponding file would be found in the &lt;code&gt;app/assets/javascripts/my_app_name/models/user.js.coffee&lt;/code&gt; file.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffeescript&quot; data-lang=&quot;coffeescript&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MyAppName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Models&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;View&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;configure&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;User&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;id&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;email&#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The main &lt;a href=&quot;https://github.com/metaskills/holy_grail_harness/blob/master/app/assets/javascripts/application.js&quot;&gt;&lt;code&gt;application.js&lt;/code&gt;&lt;/a&gt; file requires all vendor frameworks, then the &lt;a href=&quot;https://github.com/metaskills/holy_grail_harness/blob/master/app/assets/javascripts/holy_grail_harness/index.js.coffee&quot;&gt;&lt;code&gt;index.js.coffee&lt;/code&gt;&lt;/a&gt; within your application name directory. Use this file to boot your JavaScript application and/or setup your root view controller.&lt;/p&gt;

&lt;p&gt;Also included is the &lt;a href=&quot;https://github.com/nathansobo/space-pen&quot;&gt;SpacePen&lt;/a&gt; view framework. SpacePen is a powerful and minimalist client-side view framework authored in CoffeeScript. It is actually a jQuery subclass which makes your views really easy to traverse and respond to controller events. Read my &lt;a href=&quot;http://metaskills.net/2012/05/22/view-controller-patterns-with-spine-js-and-spacepen/&quot;&gt;&lt;em&gt;View Controller Patterns With Spine.js &amp;amp; SpacePen&lt;/em&gt;&lt;/a&gt; article to learn why views should not be dumb and how you can take advantage of SpacePen no matter what JavaScript MV* framework you use.&lt;/p&gt;

&lt;h3 id=&quot;with-spine.js&quot;&gt;With Spine.js&lt;/h3&gt;

&lt;p&gt;If you choose to use Spine.js as your JavaScript MVC structure, the setup script will create a git submodule to the Spine repository to the &lt;code&gt;vendor/assets/javascripts/spine&lt;/code&gt; directory. This allows your project to use the the source CoffeeScript files, which makes for a wonderful &lt;a href=&quot;http://metaskills.net/2012/01/15/rails-and-spine-js-using-the-coffeescript-source/&quot;&gt;learning experience&lt;/a&gt; to both Spine.js and idomatic CoffeeScript.&lt;/p&gt;

&lt;p&gt;By default the &lt;a href=&quot;https://github.com/metaskills/holy_grail_harness/blob/master/app/assets/javascripts/holy_grail_harness/index.js.coffee&quot;&gt;&lt;code&gt;index.js.coffee&lt;/code&gt;&lt;/a&gt; will require all Spine components. This includes manager (stacks), ajax, route, and relation. Remove anything that you do not need. This file also defines the root view controller along with a &lt;code&gt;MyAppName.App.Index.init()&lt;/code&gt; class level initialization function. This is called in the main &lt;a href=&quot;https://github.com/metaskills/holy_grail_harness/blob/master/app/views/layouts/application.html.erb&quot;&gt;&lt;code&gt;application.html.erb&lt;/code&gt;&lt;/a&gt; layout file for you too. Likewise, the application init is done in the Mocha before filters mentioned above in both the &lt;a href=&quot;https://github.com/metaskills/holy_grail_harness/blob/master/spec/javascripts/spec_helper.js.coffee&quot;&gt;&lt;code&gt;spec_helper.js.coffee&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://github.com/metaskills/holy_grail_harness/blob/master/spec/javascripts/spec_helper/fixtures.js.coffee&quot;&gt;&lt;code&gt;fixtures.js.coffee&lt;/code&gt;&lt;/a&gt; files. If you examine these files closely, you will see how they make use of Mocha&amp;#39;s &lt;code&gt;done()&lt;/code&gt; callback so that you can cleanly abstract AJAX mocks and anything else related to your JavaScript application&amp;#39;s boot process. Here is an example of how you might setup your &lt;code&gt;initApplication()&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffeescript&quot; data-lang=&quot;coffeescript&quot;&gt;&lt;span class=&quot;vi&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;initApplication&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;bob&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyAppName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Seeds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bob&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mockjax&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/users/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;responseText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyAppName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bobInitial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;responseText&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;MyAppName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Models&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fetch&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;MyAppName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Models&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;one&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;refresh&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;No JavaScript project should be without a local notification system to help keep disparate components up to date. Thankfully, Spine&amp;#39;s event module makes a local PubSub system a breeze. The HolyGrailHarness has a &lt;a href=&quot;https://github.com/metaskills/holy_grail_harness/blob/master/app/assets/javascripts/holy_grail_harness/lib/notifications.js.coffee&quot;&gt;&lt;code&gt;notifications.js.coffee&lt;/code&gt;&lt;/a&gt; that exposes a class level &lt;code&gt;bind()&lt;/code&gt; and &lt;code&gt;trigger()&lt;/code&gt; to any event string/namespace you want. To make more simple, we recommend creating class level functions that expose the event name as the function name and pass the args to the &lt;code&gt;handle()&lt;/code&gt; function. We have done this for the &lt;code&gt;MyAppName.Notifications.appReady()&lt;/code&gt; to demonstrate. Calling this function will trigger the &lt;code&gt;app.ready&lt;/code&gt; event and passing a function to this function will bind that function to the same event name.&lt;/p&gt;

&lt;h1 id=&quot;sass-&amp;amp;-compass&quot;&gt;Sass &amp;amp; Compass&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;http://sass-lang.com&quot;&gt;Sass&lt;/a&gt; is the only way to write CSS for today&amp;#39;s modern web applications. &lt;a href=&quot;http://compass-style.org&quot;&gt;Compass&lt;/a&gt; is the CSS framework that no Sass user should go without. Together they provide a foundation for writing beautiful CSS using pre-built time saving functions. The HolyGrailHarness includes both the &lt;a href=&quot;https://github.com/rails/sass-rails&quot;&gt;sass-rails&lt;/a&gt; and &lt;a href=&quot;https://github.com/Compass/compass-rails&quot;&gt;compass-rails&lt;/a&gt; gems.&lt;/p&gt;

&lt;p&gt;To get you started on the right path, we have also created a basic structure within the &lt;code&gt;app/assets/stylesheets&lt;/code&gt; asset pipeline directory to help you organize your Sass files. Here is the directory structure below.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;├── application.css
├── application
│   ├── _layout.scss
│   ├── index.scss
│   ├── components
│   │   └── _foo.scss
└── shared
    ├── _animations.scss
    ├── _fonts.scss
    ├── _mixins.scss
    ├── _placeholders.scss
    ├── _variables.scss
    └── base.scss
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;the-application.css-file.&quot;&gt;The application.css file.&lt;/h3&gt;

&lt;p&gt;Never write CSS in &lt;code&gt;application.css&lt;/code&gt;. Say what? I know right, but trust me. Just consider this file a top level bundle dependency that only requires other top level bundle assets. Here is the contents of that file. Notice how it requires a bundle called twitter and an index. One is for twitter bootstrap, see section below, and the other is the index to your own Sass framework.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;c&quot;&gt;/*
 *= require application/twitter
 *= require application/index
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;the-shared-directory.&quot;&gt;The shared directory.&lt;/h3&gt;

&lt;p&gt;Think of this as your own Compass framework. The &lt;a href=&quot;https://github.com/metaskills/holy_grail_harness/blob/master/app/assets/stylesheets/shared/base.scss&quot;&gt;&lt;code&gt;base.scss&lt;/code&gt;&lt;/a&gt; is your single file to &lt;code&gt;@import&lt;/code&gt; to get everything loaded and ready to go. &lt;strong&gt;Nothing in any of the shared files should generate CSS!&lt;/strong&gt; Importing &lt;code&gt;shared/base&lt;/code&gt; should act just like importing &lt;code&gt;compass&lt;/code&gt;. Use these files for setting your own variables and creating misc helper functions &amp;amp; mixins. There is a variables file for... variables! Another for animations, fonts and mixins too.&lt;/p&gt;

&lt;p&gt;Pay special attention to the &lt;code&gt;_placeholders.scss&lt;/code&gt; file. If you do not know about Sass 3.2&amp;#39;s placeholder selectors (silent classes) and how they make presentational classes efficiently extended by semantic ones, then I highly suggest you read Dale Sande&amp;#39;s presentation titled &lt;a href=&quot;https://speakerdeck.com/anotheruiguy/sass-32-silent-classes&quot;&gt;Sass 3.2 Silent Classes&lt;/a&gt; on Speaker Deck.&lt;/p&gt;

&lt;p&gt;Below is the contents of the &lt;code&gt;base.scss&lt;/code&gt; file, take note of the order. See too how we import the entire Compass framework. This means that all of your Sass code in any of the shared files can take full advantage of both Bootstrap and Compass&amp;#39; variables and mixins. Epic win!&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sass&quot; data-lang=&quot;sass&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Think of this file as your own compass. Importing the base, never generates CSS.
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;shared/variables&quot;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;bootstrap/mixins&quot;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;compass&quot;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;compass/layout&quot;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;compass/css3/user-interface&quot;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;shared/fonts&quot;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;shared/mixins&quot;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;shared/animations&quot;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;shared/placeholders&quot;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;the-application-directory.&quot;&gt;The application directory.&lt;/h3&gt;

&lt;p&gt;Organize this as you see fit. We have started you off by creating a &lt;code&gt;_layout.scss&lt;/code&gt; file for your general layout/structure styles. There is also a &lt;code&gt;components&lt;/code&gt; directory which all sub files are imported via a glob. The idea is that components are not dependent upon another. Files that might go in here are things like datepicker, navigation, and general files named after components or widgets. Below is what the &lt;code&gt;application/index.scss&lt;/code&gt; looks like.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sass&quot; data-lang=&quot;sass&quot;&gt;&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;shared/base&quot;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;./layout&quot;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;components/*&quot;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you are more advanced with your CSS and like the idea of style guides, take a looks a the &lt;a href=&quot;https://github.com/Anotheruiguy/toadstool&quot;&gt;Toadstool&lt;/a&gt; style guide framework.&lt;/p&gt;

&lt;h1 id=&quot;twitter-bootstrap&quot;&gt;Twitter Bootstrap&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;http://twitter.github.com/bootstrap/&quot;&gt;Twitter Bootstrap&lt;/a&gt; is awesome, but &lt;a href=&quot;http://metaskills.net/2012/02/27/too-less-should-you-be-using-sass/&quot;&gt;LESS is not&lt;/a&gt;. That is why the HolyGrailHarness uses the &lt;a href=&quot;https://github.com/thomas-mcdonald/bootstrap-sass&quot;&gt;bootstrap-sass&lt;/a&gt; gem that converts all the Bootstrap LESS files to Sass. Making them ready to import via the Rails asset pipeline.&lt;/p&gt;

&lt;p&gt;As shown above in the Sass section, we require the &lt;code&gt;application/twitter.scss&lt;/code&gt; bundle asset from the top level &lt;code&gt;application.css&lt;/code&gt; bundle file. This twitter bundle file, contents below, take advantage of your shared variables before importing bootstrap from the gem. In this way you can define variables that tweak bootstrap. A good example would be button colors, column widths, etc. Later on in the file you can extend bootstrap styles to your liking. For instance, add more padding to buttons.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sass&quot; data-lang=&quot;sass&quot;&gt;&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;shared/variables&quot;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;bootstrap&quot;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;font-awesome&quot;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Tweak or redefine Twitter classes below.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;font-awesome&quot;&gt;Font Awesome&lt;/h3&gt;

&lt;p&gt;The glyph icons included in Twitter Bootstrap are horrible for hi-resolution &amp;quot;retina&amp;quot; displays typically found on mobile devices. Thankfully the &lt;a href=&quot;http://fortawesome.github.com/Font-Awesome/&quot;&gt;Font Awesome&lt;/a&gt; project provides a drop in replacement that instead uses icon fonts vs raster images.&lt;/p&gt;

&lt;p&gt;The HolyGrailHarness vendors these font files and the needed &lt;code&gt;font-awesome.scss&lt;/code&gt; file and requires them as part of the Twitter Bootstrap bundle shown above. More advanced users may prefer to only include the icon fonts needed in their application or a few custom icons. If that is the case, check out &lt;a href=&quot;http://endtwist.github.com/fontcustom/&quot;&gt;Font Custom&lt;/a&gt;, webfonts from the comfort of the command line.&lt;/p&gt;
</description>
        <pubDate>Thu, 06 Dec 2012 14:19:00 -0500</pubDate>
        <link>http://technology.customink.com//blog/2012/12/06/bootstrap-your-next-project-with-holygrailharness</link>
        <guid isPermaLink="true">http://technology.customink.com//blog/2012/12/06/bootstrap-your-next-project-with-holygrailharness</guid>
      </item>
    
      <item>
        <title>Welcome Ken Collins!</title>
        <description>&lt;p&gt;CustomInk technology is very excited to announce that Ken Collins has joined the team!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://technology-customink-com.s3.amazonaws.com/images/ken_collins.jpg&quot; alt=&quot;Ken Collins&quot; class=&quot;tb-Img tb-Img--responsive tb-Img--fancy&quot; /&gt;&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Ken is better known online as &lt;a href=&quot;http://metaskills.net/&quot;&gt;metaskills&lt;/a&gt; and is an active open source contributor who currently maintains the rails &lt;a href=&quot;https://github.com/rails-sqlserver/activerecord-sqlserver-adapter&quot;&gt;MS SQL Server Adapter&lt;/a&gt;.  More recently Ken has developed an interest in Javascript contributing submissions to Spine and creating &lt;a href=&quot;https://github.com/metaskills/mocha-phantomjs&quot;&gt;PhantomJS Runners for Mocha&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Ken spent the week with us here in our Tyson&amp;#39;s Corner headquarters, but he will continue to work from his Norfolk, VA home as a remote developer.&lt;/p&gt;
</description>
        <pubDate>Fri, 14 Sep 2012 15:34:00 -0400</pubDate>
        <link>http://technology.customink.com//blog/2012/09/14/welcome-ken-collins</link>
        <guid isPermaLink="true">http://technology.customink.com//blog/2012/09/14/welcome-ken-collins</guid>
      </item>
    
      <item>
        <title>/etc/hosts Management with Chef</title>
        <description>&lt;p&gt;We recently ran into a situation where we needed to use Chef Search to modify our &lt;code&gt;/etc/hosts&lt;/code&gt; file dynamically on each Chef run. Originally seeming to be a relatively simple task, managing the hosts file with Chef rose some interesting challenges. While there are a few existing &lt;a href=&quot;http://community.opscode.com/search?query=hosts&amp;amp;scope=home&quot;&gt;community-maintained /etc/hosts management cookbooks&lt;/a&gt; out there, none of them suited our needs. We wanted a highly customizable, easily expandable, simple, LWRP that was idempotent.&lt;/p&gt;

&lt;p&gt;In this post, I will discuss creating your own LWRP, as well as some of the challenges faced while writing this LWRP. There will also be links to the community LWRP that we&amp;#39;ve created.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;for-those-that-just-can&amp;#39;t-wait!&quot;&gt;For those that just can&amp;#39;t wait!&lt;/h2&gt;

&lt;p&gt;Here are the links to the &lt;a href=&quot;https://github.com/customink-webops/hostsfile&quot;&gt;hostsfile github repo&lt;/a&gt; and &lt;a href=&quot;http://community.opscode.com/cookbooks/hostsfile&quot;&gt;hostsfile on the Chef community website&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;working-backwards&quot;&gt;Working Backwards&lt;/h2&gt;

&lt;p&gt;Before writing this LWRP, I knew &lt;em&gt;exactly&lt;/em&gt; what I wanted the interface to look like. I knew that it needed to follow the patterns of resource built into Chef. I wanted it to be simple, yet configurable, yet still lightweight. This gave me a great opportunity to practice &lt;a href=&quot;http://tom.preston-werner.com/2010/08/23/readme-driven-development.html&quot;&gt;README-drive development&lt;/a&gt;. There are a lot of advantages to RDD, especially on smaller projects:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Ensure you have fully thought out your implementation&lt;/li&gt;
&lt;li&gt;Chooses your organization structure&lt;/li&gt;
&lt;li&gt;Ensures you have a great README&lt;/li&gt;
&lt;li&gt;Makes you really focus on usage over implementation&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The last option is, in my opinion, the most important. This LWRP would eventually end up on the Chef community site. I asked myself multiple times:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;How will people use this?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And that question is king in open source development. If adding a few lines of code to your implementation allows people to more easily understand your &amp;quot;product&amp;quot;, then it&amp;#39;s worth it. It&amp;#39;s &lt;strong&gt;always&lt;/strong&gt; worth it. This cookbook was written &lt;em&gt;for&lt;/em&gt; the end-user.&lt;/p&gt;

&lt;p&gt;And yes, I actually did write the &lt;a href=&quot;https://github.com/customink-webops/hostsfile/blob/master/README.md&quot;&gt;README&lt;/a&gt; &lt;strong&gt;first&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;With the README done and polished, it was time to start working forward. Luckily, I had a good, solid understanding of the implementation details as a result of the RDD I discussed earlier.&lt;/p&gt;

&lt;p&gt;To get started with a custom LWRP, you actually create a cookbook:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;$ knife cookbook create hostsfile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;... and then delete everything until you&amp;#39;re left with:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;|_libraries
|_providers
|_resources
|_LICENSE
|_metadata.rb
|_README.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Spend a few minutes adding all the LICENSE files and replacing &amp;quot;YOUR NAME HERE&amp;quot; where appropriate.&lt;/p&gt;

&lt;p&gt;Next, because I already know my implementation, I can actually start by writing the resource file first:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# List of all actions supported by the provider&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;actions&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:create_if_missing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:remove&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Make create the default action&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;default_action&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:create&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Required attributes&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:ip_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:kind_of&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name_attribute&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:required&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:hostname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:kind_of&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Optional attributes&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:aliases&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:kind_of&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:kind_of&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The design is so elegant and makes perfect sense based off our the README.&lt;/p&gt;

&lt;p&gt;Now it&amp;#39;s time to move onto the more difficult part. Actually writing the provider code (the implementation):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Creates a new hosts file entry. If an entry already exists, it will be&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# overwritten by this one.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:create&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Create a new hosts file entry, only if one does not already exist for&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# the given IP address. If one exists, this does nothing.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:create_if_missing&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Updates the given hosts file entry. Does nothing if the entry does not&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# exist.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:update&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Removes an entry from the hosts file. Does nothing if the entry does&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# not exist.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:remove&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/customink-webops/hostsfile/blob/master/providers/entry.rb&quot;&gt;full source for the provider entry&lt;/a&gt; is available on github. I&amp;#39;ve suppressed a lot here.&lt;/p&gt;

&lt;h2 id=&quot;initial-roadblock&quot;&gt;Initial Roadblock&lt;/h2&gt;

&lt;p&gt;My initial intention was to use the &lt;a href=&quot;https://rubygems.org/gems/ghost&quot;&gt;ghost gem&lt;/a&gt; for managing the hosts file in Ruby. However, ghost did not support he features I needed, and it did not provide a great interface beyond the command line.&lt;/p&gt;

&lt;p&gt;So, I reinvented the wheel.&lt;/p&gt;

&lt;h2 id=&quot;reinventing-the-wheel&quot;&gt;Reinventing the Wheel&lt;/h2&gt;

&lt;p&gt;In short, I created my own &lt;code&gt;/etc/hosts&lt;/code&gt; management library in Ruby. It&amp;#39;s *nix specific, but it works. I spent significantly less time writing my own code than trying to make something like ghost suit my needs.&lt;/p&gt;

&lt;p&gt;The library consisted of two files:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;entry.rb&lt;/code&gt; - represents a single line in the &lt;code&gt;/etc/hosts&lt;/code&gt; file&lt;/li&gt;
&lt;li&gt;&lt;code&gt;manipulator.rb&lt;/code&gt; - contains commands for querying and manipulating the &lt;code&gt;/etc/hosts&lt;/code&gt; file.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It&amp;#39;s a lot of file parsing and making things look pretty to be honest.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Manipulate&lt;/code&gt; class works a lot like a database object - you must call &lt;code&gt;save&lt;/code&gt; or &lt;code&gt;save!&lt;/code&gt; in order to write the changes out.&lt;/p&gt;

&lt;p&gt;Take a look at the &lt;a href=&quot;https://github.com/customink-webops/hostsfile/tree/master/libraries&quot;&gt;source on github&lt;/a&gt; if your curious, but it&amp;#39;s mostly Ruby code. There&amp;#39;s actually no Chef magic going on. I could easily have packaged the library into a gem and used that instead...&lt;/p&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;hostsfile&lt;/code&gt; LWRP comes equipped with 4 actions:&lt;/p&gt;

&lt;h4 id=&quot;create&quot;&gt;&lt;code&gt;create&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Creates a new hosts file entry. If an entry already exists, it will be overwritten by this one.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;hostsfile_entry&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;1.2.3.4&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;hostname&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;example.com&#39;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:create&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will create an entry like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;1.2.3.4          example.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;create_if_missing&quot;&gt;&lt;code&gt;create_if_missing&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Create a new hosts file entry, only if one does not already exist for the given IP address. If one exists, this does nothing.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;hostsfile_entry&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;1.2.3.4&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;hostname&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;example.com&#39;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:create_if_missing&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;update&quot;&gt;&lt;code&gt;update&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Updates the given hosts file entry. Does nothing if the entry does not exist.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;hostsfile_entry&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;1.2.3.4&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;hostname&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;example.com&#39;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;comment&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Update by Chef&#39;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:update&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will create an entry like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;1.2.3.4           example # Updated by Chef
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;remove&quot;&gt;&lt;code&gt;remove&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Removes an entry from the hosts file. Does nothing if the entry does not
exist.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;hostsfile_entry&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;1.2.3.4&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:remove&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will remove the entry for &lt;code&gt;1.2.3.4&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;i-want-it-now!&quot;&gt;I want it now!&lt;/h2&gt;

&lt;p&gt;Install it&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;$ knife cookbook site install hostsfile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Include it&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# recipes/my_recipe.rb&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;include_recipe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;hostsfile&#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You&amp;#39;re done!&lt;/p&gt;
</description>
        <pubDate>Fri, 03 Aug 2012 21:19:00 -0400</pubDate>
        <link>http://technology.customink.com//blog/2012/08/03/etc-hosts-management-with-chef</link>
        <guid isPermaLink="true">http://technology.customink.com//blog/2012/08/03/etc-hosts-management-with-chef</guid>
      </item>
    
      <item>
        <title>Testing Chef Cookbooks</title>
        <description>&lt;p&gt;Throughout my internship at CustomInk, I&amp;#39;ve put a significant focus on Chef cookbook testing. At the time of this writing, there are a few solutions for testing cookbooks - &lt;a href=&quot;https://github.com/acrmp/chefspec&quot;&gt;ChefSpec&lt;/a&gt;, &lt;a href=&quot;http://www.cucumber-chef.org/&quot;&gt;cucumber-chef&lt;/a&gt;, &lt;a href=&quot;https://github.com/calavera/minitest-chef-handler&quot;&gt;minitest-chef-handler&lt;/a&gt;, and &lt;a href=&quot;https://github.com/calavera/rspec-chef&quot;&gt;rspec-chef&lt;/a&gt; – and they each have their own distinct advantages. At the very least, you should run &lt;code&gt;knife cookbook test&lt;/code&gt; and &lt;code&gt;foodcritic&lt;/code&gt; against all your cookbooks. Nathen Harvey covered this in his &lt;a href=&quot;http://technology.customink.com/blog/2012/07/06/mvt-knife-test-and-travisci/&quot;&gt;MVT: knife test and TravisCI&lt;/a&gt; blog post.&lt;/p&gt;

&lt;p&gt;At CustomInk, we test using &lt;a href=&quot;https://github.com/acrmp/chefspec&quot;&gt;ChefSpec&lt;/a&gt;. Additionally, we use some home-grown gems such as &lt;a href=&quot;https://github.com/customink/fauxhai&quot;&gt;fauxhai&lt;/a&gt; and &lt;a href=&quot;https://github.com/customink/strainer&quot;&gt;Strainer&lt;/a&gt; to make testing easier.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;foodcritic&quot;&gt;Foodcritic&lt;/h2&gt;

&lt;p&gt;Foodcritic is a linting tool for your cookbooks. Although technically not a &amp;quot;test&amp;quot;, linting tools are frequently grouped with testing. Foodcritic is like jslint for cookbooks. &lt;strong&gt;At the bare minimum, you should run &lt;code&gt;foodcritic&lt;/code&gt; against all your cookbooks.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As mentioned in &lt;a href=&quot;/blog/our-team/nathen-harvey.html&quot;&gt;Nathen Harvey&amp;#39;s&lt;/a&gt; &lt;a href=&quot;/blog/2012/07/06/mvt-knife-test-and-travisci/&quot;&gt;MVT: knife test and TravisCI&lt;/a&gt;, foodcritic does not verify that you have proper Ruby code. It is only a linting tool.&lt;/p&gt;

&lt;p&gt;When running foodcritic, I recommend adding both &lt;a href=&quot;https://github.com/customink-webops/foodcritic-rules&quot;&gt;CustomInk foodcritic rules&lt;/a&gt; and &lt;a href=&quot;https://github.com/etsy/foodcritic-rules&quot;&gt;Etsy foodcritic rules&lt;/a&gt;. Clone the repositories (or use submodules) into a &lt;code&gt;foodcritic&lt;/code&gt; directory in the root of your chef-repo:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;|_cookbooks
|_data_bags
|_environments
|_foodcritic
  |_customink
  |_etsy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, you can run &lt;code&gt;foodcritic&lt;/code&gt; like so:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;$ bundle exec foodcritic -I foodcritic/* cookbooks/my_cookbook
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There are more details about the &lt;a href=&quot;https://github.com/customink-webops/foodcritic-rules&quot;&gt;CustomInk foodcritic rules&lt;/a&gt; and &lt;a href=&quot;https://github.com/etsy/foodcritic-rules&quot;&gt;Etsy foodcritic rules&lt;/a&gt; in their respective repositories on github.&lt;/p&gt;

&lt;h2 id=&quot;strainer&quot;&gt;Strainer&lt;/h2&gt;

&lt;p&gt;Very quickly, you can see the need to run multiple commands against every cookbook:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;knife cookbook test&lt;/code&gt; for ruby syntax&lt;/li&gt;
&lt;li&gt;&lt;code&gt;foodcritic&lt;/code&gt; to lint your code&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;chefspec&lt;/code&gt;, &lt;code&gt;minitest&lt;/code&gt;, or &lt;code&gt;cucumber&lt;/code&gt; for your actual unit, function, or integration tests
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;$ bundle exec knife cookbook test COOKBOOK
$ bundle exec foodcritic -I foodcritic/* cookbooks/COOKBOOK
$ bundle exec spec&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is why I wrote &lt;a href=&quot;https://github.com/customink/strainer&quot;&gt;Strainer&lt;/a&gt;. Strainer uses a &lt;code&gt;Colanderfile&lt;/code&gt; at either the project-level or cookbook-level to run isolated tests on your cookbooks. The cookbook is actually copied to a temporary location and then the tests are run against it. To get started, create a Colander file in your editor and enter the following:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;knife &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;: bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;knife cookbook &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$COOKBOOK&lt;/span&gt;
foodcritic: bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;foodcritic -I foodcritic/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; cookbooks/&lt;span class=&quot;nv&quot;&gt;$COOKBOOK&lt;/span&gt;
chefspec: bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;spec
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice that we have this &lt;code&gt;$COOKBOOK&lt;/code&gt; variable. There&amp;#39;s also a &lt;code&gt;$ENVIRONMENT&lt;/code&gt; variable provided. These are replaced with the cookbook or cookbooks you are straining.&lt;/p&gt;

&lt;p&gt;If you&amp;#39;ve used &lt;a href=&quot;https://github.com/ddollar/foreman&quot;&gt;foreman&lt;/a&gt;, you should be familiar with this syntax.&lt;/p&gt;

&lt;p&gt;Next, we want to &lt;code&gt;strain&lt;/code&gt; out the cookbook we want to test:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;$ bundle exec strain my_cookbook
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Strainer is also useful for setting up multiple builds or jobs against your single chef repository. You can create a separate job (on Jenkins for example), with the same base repository, but change the script (or use environment variables) to only run the cookbooks you want to test!&lt;/p&gt;

&lt;p&gt;I recommend also checking out &lt;a href=&quot;https://github.com/customink/strainer&quot;&gt;Strainer on github&lt;/a&gt; for the most up-to-date documentation. There&amp;#39;s still a lot of work to be done. Get the bottom of the README for the most up-to-date list of features that need your help!&lt;/p&gt;

&lt;h2 id=&quot;fauxhai&quot;&gt;Fauxhai&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Problem&lt;/strong&gt;: Ohai is awesome. Ohai does a LOT. I don&amp;#39;t want to type out all my ohai data for a single test.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt;: &lt;a href=&quot;http://technology.customink.com/fauxhai/&quot;&gt;Fauxhai&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://technology.customink.com/fauxhai/&quot;&gt;Fauxhai&lt;/a&gt; is &amp;quot;fake ohai&amp;quot;, as it&amp;#39;s name implies. Fauxhai, as featured on the &lt;a href=&quot;http://foodfightshow.org/index.html&quot;&gt;foodfight show&lt;/a&gt; multiple times is a community-backed node-mocking utility. In short, it looks like this.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Fauxhai&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;platform: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;ubuntu&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will mock out the default ubuntu node. You can use this in combination with Chefspec or other testing tools.&lt;/p&gt;

&lt;p&gt;I recently released the first non-alpha version of fauxhai. In this edition, fauxhai is actually capable of mocking &amp;quot;real&amp;quot; nodes. It will SSH into your server, download the real Ohai data, and then run your tests against that Ohai data:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Fauxhai&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;node.example.com&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Check out the &lt;a href=&quot;http://technology.customink.com/fauxhai/&quot;&gt;fauxhai github page&lt;/a&gt; or &lt;a href=&quot;https://github.com/customink/fauxhai&quot;&gt;fauxhai github repo&lt;/a&gt; for more information on how to use fauxhai.&lt;/p&gt;

&lt;h2 id=&quot;chefspec&quot;&gt;ChefSpec&lt;/h2&gt;

&lt;p&gt;At CustomInk, we test our cookbooks with &lt;a href=&quot;https://github.com/acrmp/chefspec&quot;&gt;ChefSpec&lt;/a&gt; by &lt;a href=&quot;https://github.com/acrmp&quot;&gt;Andrew Crump&lt;/a&gt;. There are a lot of great testing solutions out there, but ChefSpec is what works for us and our needs as a company. We also rarely use ChefSpec without fauxhai, so here&amp;#39;s an example from &lt;a href=&quot;https://github.com/customink-webops/phantomjs&quot;&gt;our phantomjs cookbook&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;chefspec&#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;fauxhai&#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;phantomjs::default&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;on ubuntu&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Fauxhai&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;ubuntu&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:chef_run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ChefSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ChefRunner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;converge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;phantomjs::default&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;should install the correct packages&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;chef_run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install_package&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;fontconfig&#39;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;chef_run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install_package&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;libfreetype6&#39;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It&amp;#39;s simple, it&amp;#39;s explicit, and it reads a whole lot easier than TestUnit or MiniTest (shhh, don&amp;#39;t tell DHH).&lt;/p&gt;

&lt;h4 id=&quot;the-catch&quot;&gt;The Catch&lt;/h4&gt;

&lt;p&gt;There is one hang-up about ChefSpec - it has incredibly confusing documentation. Depending on where you look, some methods have changed, syntax is different, things have been removed, and there&amp;#39;s &lt;a href=&quot;https://github.com/acrmp/chefspec/issues/30&quot;&gt;a few different places for documentation&lt;/a&gt;. The solution - just dive into the source. It&amp;#39;s the easiest way, and you&amp;#39;ll have a better understanding from the start.&lt;/p&gt;

&lt;h2 id=&quot;travis-&amp;amp;-jenkins&quot;&gt;Travis &amp;amp; Jenkins&lt;/h2&gt;

&lt;p&gt;Internally, we use &lt;a href=&quot;http://jenkins-ci.org&quot;&gt;Jenkins&lt;/a&gt; as our build server. However, for all our public-facing cookbooks, we use &lt;a href=&quot;http://travis-ci.org&quot;&gt;Travis&lt;/a&gt;. This causes somewhat of a gap between our build statuses - we have to look in two locations to see the status of all our builds...&lt;/p&gt;

&lt;p&gt;Okay, I lied. We don&amp;#39;t. We actually use another project I wrote, &lt;a href=&quot;https://github.com/customink/stoplight&quot;&gt;stoplight&lt;/a&gt;, that shows the build status from multiple build servers in a single UI. It&amp;#39;s incredibly handy for these kinds of situations. And, for you hardcore Chef users, there&amp;#39;s even a &lt;a href=&quot;https://github.com/customink-webops/stoplight&quot;&gt;Chef cookbook for stoplight&lt;/a&gt; for installing stoplight on your infrastructure.&lt;/p&gt;

&lt;h2 id=&quot;the-long-&amp;amp;-short-of-it&quot;&gt;The Long &amp;amp; Short of it&lt;/h2&gt;

&lt;p&gt;Chef testing is a huge topic, and it&amp;#39;s going to be awhile until the community agrees on a single method for testing. Rails still has yet to figure it out... Here&amp;#39;s what is important - &lt;strong&gt;test your cookbooks&lt;/strong&gt;. Even if it&amp;#39;s just running foodcritic against all your cookbooks, you are making the cookbook-world a better place. And &lt;strong&gt;talk about it&lt;/strong&gt;. Tutorials like this one, as well as &lt;a href=&quot;/blog/our-team/seth-vargo&quot;&gt;some of the other posts I&amp;#39;ve written&lt;/a&gt; will help the community embrace testing :)!&lt;/p&gt;
</description>
        <pubDate>Fri, 03 Aug 2012 10:39:00 -0400</pubDate>
        <link>http://technology.customink.com//blog/2012/08/03/testing-chef-cookbooks</link>
        <guid isPermaLink="true">http://technology.customink.com//blog/2012/08/03/testing-chef-cookbooks</guid>
      </item>
    
      <item>
        <title>Easily test your DNS</title>
        <description>&lt;p&gt;At CustomInk, we recently made the switch to a new DNS provider. During the switch, we mass-imported records from our existing provider to our new provider. Did we get them all? Are they live yet? The immediate solution was to open up the terminal and fire off cURL requests, but there had to be a better way...&lt;/p&gt;

&lt;p&gt;In this post/tutorial, I will show you how I created a test suite for our DNS records using RSpec. The solution is amazingly simple, and your specs will only be about 7 lines of code!&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;the-end-result&quot;&gt;The End Result&lt;/h2&gt;

&lt;p&gt;I don&amp;#39;t often do this, but to demonstrate just how awesome these tests are going to be, here is a final example spec:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;spec_helper&#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;www.customink.com&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;expects&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;ttl: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;type: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;A&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;value: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;1.2.3.4&#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;getting-started&quot;&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;As with any Ruby-based project, there&amp;#39;s some initial setup. Generate a new project and create a &lt;code&gt;Gemfile&lt;/code&gt; with the following content:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:rubygems&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;rspec&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;~&amp;gt; 2.11.0&#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Don&amp;#39;t forget to run the &lt;code&gt;bundle&lt;/code&gt; command to install the gems:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;$ bundle
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next, create a folder named &lt;code&gt;spec&lt;/code&gt; in your project directory and then create a &lt;code&gt;spec/spec_helper.rb&lt;/code&gt; file with the following content:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;rspec&#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;resolv&#39;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;spec/macros/zones_macro&#39;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;configure&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tty&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ZonesMacro&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There are a few things to cover here:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We are requiring &lt;code&gt;resolv&lt;/code&gt;, which is a Ruby 1.9 library for resolving DNS queries (it&amp;#39;s like &lt;code&gt;dig&lt;/code&gt; on steroids). Here is the &lt;a href=&quot;http://ruby-doc.org/stdlib-1.9.3/libdoc/resolv/rdoc/&quot;&gt;official documentation for resolv&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We require our custom macro - &lt;code&gt;ZonesMacro&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Lastly, we enable &lt;code&gt;tty&lt;/code&gt; so that we get colored output on our CI server and include our &lt;code&gt;ZoneMacro&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;writing-zonemacro&quot;&gt;Writing &lt;code&gt;ZoneMacro&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;ZoneMacro&lt;/code&gt; is where the &amp;quot;hardest&amp;quot; of our logic will live. That being said, it&amp;#39;s not very complicated.&lt;/p&gt;

&lt;p&gt;Create the &lt;code&gt;macros/zones_macro.rb&lt;/code&gt; file and start with the &amp;quot;boiler-plate&amp;quot; macro:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ZonesMacro&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ClassMethods&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;InstanceMethods&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;included&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ClassMethods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:include&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;InstanceMethods&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the context of RSpec (no pun intended), &lt;code&gt;ClassMethods&lt;/code&gt; are things directly inside a &lt;code&gt;describe&lt;/code&gt; block, and &lt;code&gt;InstanceMethods&lt;/code&gt; are things inside an &lt;code&gt;it&lt;/code&gt; declaration.&lt;/p&gt;

&lt;p&gt;If you look back at our earlier example, you can see that we actually want &lt;code&gt;ClassMethods&lt;/code&gt; for our &lt;code&gt;expects&lt;/code&gt; method:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;expects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;matched_records&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;records&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;upcase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ttl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ttl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;include?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;upcase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;should have the correct DNS entry&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;matched_records&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;should_not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be_empty&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So what is &lt;code&gt;records&lt;/code&gt;? Well, we need to define it. Because &lt;code&gt;records&lt;/code&gt; exists outside an &lt;code&gt;it&lt;/code&gt; block, the declaration needs to go inside the &lt;code&gt;ClassMethods&lt;/code&gt; module:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;records&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@records&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Timeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;Resolv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DNS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getresources&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;display_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Resolv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DNS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Resource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;IN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ANY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Timeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;
    &lt;span class=&quot;vg&quot;&gt;$stderr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Connection timed out for &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;display_name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We add the &lt;code&gt;Timeout::timeout&lt;/code&gt; so that resources that cannot be reached timeout in a reasonable amount of time.&lt;/p&gt;

&lt;p&gt;Most of that is directly out of the &lt;a href=&quot;http://ruby-doc.org/stdlib-1.9.3/libdoc/resolv/rdoc/&quot;&gt;Resolv Documentation&lt;/a&gt;, except for the &lt;code&gt;self.class.display_name&lt;/code&gt;. This is provided by RSpec, and it&amp;#39;s the value of the &lt;code&gt;describe&lt;/code&gt; block.&lt;/p&gt;

&lt;p&gt;In other words:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;This is the self.display_name&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;Resolv&lt;/code&gt; block will make a DNS query to the &lt;code&gt;display_name&lt;/code&gt;. Notice that we are returning an array of resources. You may also see a method called &lt;code&gt;getresource&lt;/code&gt; (singular) for &lt;code&gt;Resolve::DNS&lt;/code&gt; that returns only the first resource. If you have multiple records for the same key (like an A record and an MX record), your tests will not pass, because &lt;code&gt;getresource&lt;/code&gt; just grabs the first record it sees...&lt;/p&gt;

&lt;p&gt;We are also searching for a &lt;code&gt;resource_type&lt;/code&gt; of &lt;code&gt;ANY&lt;/code&gt;. This doesn&amp;#39;t really matter because we are caching the result, and we are also already checking the type of the record returned.&lt;/p&gt;

&lt;p&gt;If you run this right now, you&amp;#39;ll get a lot of &lt;code&gt;undefined method&lt;/code&gt; errors. That&amp;#39;s because I also monkey-patched &lt;code&gt;Resolv::DNS::Resource&lt;/code&gt; to return normalized data:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Resolv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DNS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Resource&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;value&lt;/span&gt;
    &lt;span class=&quot;sx&quot;&gt;%w(address data exchange name target)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;collect&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_sym&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;upcase&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;respond_to?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_sym&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;compact&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;type&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;::&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;upcase&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;dynamically-writing-tests&quot;&gt;Dynamically Writing Tests&lt;/h2&gt;

&lt;p&gt;We have 500+ DNS records, so manually writing all of those tests was also a daunting task. Of course, I scripted it. You can get an export file of your current configuration from your DNS provider. The format may vary, but here&amp;#39;s the simple little script I wrote to automatically generate all our tests.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# `config` is the existing DNS configuration file&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;readlines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/Users/svargo/Desktop/config&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# For each line, split on a space, remove the drunk, and&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# create a hash for easy access.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;collect&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;split&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39; &#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;strip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;chomp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;.&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:ttl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# For each record, write out the spec and expected results.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# I had to massage some data using `gsub` because of inconsistent formatting.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOH&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
require &#39;spec_helper&#39;

describe &#39;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&#39; do
  expects ttl: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ttl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;, type: &#39;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&#39;, value: &#39;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;gsub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;&quot;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&#39;
end
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOH&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# Write the spec to the proper file&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;spec/units/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;_spec.rb&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;w&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Needless to say, this saved a significant amount of time and energy.&lt;/p&gt;

&lt;h2 id=&quot;add-to-ci&quot;&gt;Add to CI&lt;/h2&gt;

&lt;p&gt;I created a quick Jenkins job for these specs and set them to run every 15 minutes. Super simple and reliable CI for our DNS entires. Now, we can easily spot outdated records or problem servers.&lt;/p&gt;

&lt;h2 id=&quot;a-question-of-completeness?&quot;&gt;A Question of Completeness?&lt;/h2&gt;

&lt;dl&gt;
  &lt;dt&gt;Q: Is this a complete solution?&lt;/dt&gt;
  &lt;dd&gt;A: No&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;While this solution is expandable, it&amp;#39;s far from complete. That being said, do you really require 100% coverage for all your DNS entires? It was very useful to have 100% coverage here, because we were migrating from our existing provider entirely. If you are writing these specs as &amp;quot;health checks&amp;quot;, you will probably have significantly less...&lt;/p&gt;

&lt;p&gt;This is definitely not a replacement for solutions like New Relic or other monitoring software, but it&amp;#39;s an excellent homegrown solution in under 2 hours.&lt;/p&gt;

&lt;h2 id=&quot;disclaimer&quot;&gt;Disclaimer&lt;/h2&gt;

&lt;p&gt;This post was written using Ruby 1.9.3. It should work on Ruby 1.9.x, but I guarantee it won&amp;#39;t work on 1.8.7.&lt;/p&gt;
</description>
        <pubDate>Tue, 31 Jul 2012 01:31:00 -0400</pubDate>
        <link>http://technology.customink.com//blog/2012/07/31/easily-test-your-dns</link>
        <guid isPermaLink="true">http://technology.customink.com//blog/2012/07/31/easily-test-your-dns</guid>
      </item>
    
      <item>
        <title>Provision your laptop with Chef: Part 2</title>
        <description>&lt;p&gt;In &lt;a href=&quot;/blog/2012/05/28/provision-your-laptop-with-chef-part-1/&quot;&gt;Provision your laptop with Chef: Part 1&lt;/a&gt;, I showed you how to setup your free Opscode Chef account and register your local development machine as a client. In Part 2, we will explore a few handy ways to manage and provision your new or existing laptop with Chef. Whether it&amp;#39;s creating users, installing applications, or always having the perfect desktop background, Chef can make it happen!&lt;/p&gt;

&lt;p&gt;Part 2 of this series assumes that you have successfully completed all of the steps in &lt;a href=&quot;http://technology.customink.com/blog/2012/05/28/provision-your-laptop-with-chef-part-1/&quot;&gt;Part 1&lt;/a&gt;. If you have not yet completed Part I, please do so before continuing.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;In this blog post, we will be using an Ubuntu 12.04 Precise desktop environment. These steps may be tweaked to work on Windows or Mac (mainly just changing the file paths). You could even bake conditional logic into your cookbooks so that it will work on all your laptops, Mac, PC, Linux or otherwise!&lt;/p&gt;

&lt;p&gt;My local chef repository lives at &lt;code&gt;~/Development/chef-repo&lt;/code&gt;. I will use this path throughout this blog post. You do not need to have your chef-repo in the same place - just replace my path with yours where appropriate.&lt;/p&gt;

&lt;h2 id=&quot;starting-small&quot;&gt;Starting Small&lt;/h2&gt;

&lt;p&gt;To get your feet wet, we will create a cookbook for a very simplistic task - setting the Desktop background.&lt;/p&gt;

&lt;p&gt;Before beginning anything with Chef, you should check the &lt;a href=&quot;http://community.opscode.com&quot;&gt;Chef Community Site&lt;/a&gt; - someone may have already done the hard work for you! Even if you can&amp;#39;t find exactly what you are looking for, explore a little. You may find small syntax shortcuts or new ways to solve problems from looking at various cookbooks.&lt;/p&gt;

&lt;p&gt;I did a quick search on the Chef Community Site for &amp;quot;desktop&amp;quot; and &amp;quot;background&amp;quot; and it doesn&amp;#39;t look like there&amp;#39;s anything we can use there, so we&amp;#39;ll have to build our own.&lt;/p&gt;

&lt;p&gt;First, go into your local chef repository:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;$ cd ~/Development/chef-repo/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and make sure you have a clean working directory:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;$ git status
# On branch master
nothing to commit (working directory clean)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you have unstaged commits, make sure to either stash or commit them before continuing.&lt;/p&gt;

&lt;p&gt;Before we create our first cookbook, let&amp;#39;s add a couple of things to our &lt;code&gt;knife.rb&lt;/code&gt; file to make the process go a little more smoothly. Open up your &lt;code&gt;knife.rb&lt;/code&gt; file and add the following two lines to the end of the file replacing the sample values with your information. (NOTE:  if you set-up your chef-repo like the &lt;a href=&quot;(/blog/2012/05/28/provision-your-laptop-with-chef-part-1/)&quot;&gt;previous post&lt;/a&gt;, you&amp;#39;ll find the file at &lt;code&gt;~/Development/chef-repo/.chef/knife.rb&lt;/code&gt;.)&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;cookbook_email      &#39;email@example.com&#39;
cookbook_copyright  &#39;Your Name&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With these new knife values, we&amp;#39;re ready to create our first cookbook. This cookbook will manage our Desktop background. If we were creating a cookbook that installed a particular piece of software, like ImageMagick, convention would dictate that we name it after that software. However, in this case, we are free to choose any name we&amp;#39;d like. You could be boring and pick something like &amp;quot;desktop-background&amp;quot;, but that&amp;#39;s no fun. Let&amp;#39;s name our cookbook &amp;quot;major-tom&amp;quot; (background-control =&amp;gt; ground-control =&amp;gt; major-tom for those following along at home). Use the &lt;code&gt;knife cookbook create&lt;/code&gt; command to generate the cookbook skeleton:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;$ knife cookbook create major-tom
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You may need to prefix the command with &lt;code&gt;bundle exec&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You should see output like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;** Creating cookbook major-tom
** Creating README for cookbook: major-tom
** Creating metadata for cookbook: major-tom
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Take a moment to explore the new cookbook. You should have a directory structure like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;major-tom
|_attributes
|_definitions
|_files
  |_default
|_libraries
|_providers
|_recipes
  |_default.rb
|_resources
|_templates
  |_default
|_metadata.rb
|_README.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;strong&gt;first&lt;/strong&gt; thing you should do before continuing is to create a &lt;code&gt;CHANGELOG.md&lt;/code&gt; file in the cookbook root. This will be unnecessary if &lt;a href=&quot;https://github.com/opscode/chef/pull/345&quot;&gt;this pull request&lt;/a&gt; is merged. Add an entry indicating our initial release:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;CHANGELOG
=========
### v0.0.1
- Initial release
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next, we need to fix up the &lt;code&gt;metadata.rb&lt;/code&gt;. Update the description to include a bit more detail. Everything else should be OK.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;maintainer&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Your Name&#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;maintainer_email&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;email@example.com&#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;license&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;All rights reserved&#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Installs/Configures desktop background images&#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;long_description&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;__FILE__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;README.md&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;0.0.1&#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this scenario, let&amp;#39;s imagine that we want to download our desktop image from the Internet. We will use the &lt;a href=&quot;http://wiki.opscode.com/display/chef/Resources#Resources-RemoteFile&quot;&gt;Remote File&lt;/a&gt; resource to fetch the remote image:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# recipes/default.rb&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;remote_file&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Chef&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:file_cache_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/background.png&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice how we &lt;strong&gt;don&amp;#39;t&lt;/strong&gt; hardcode the temporary path. You may be tempted to do something like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;remote_file&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;/tmp/background.png&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;but this is generally considered bad practice and will not pass &lt;a href=&quot;http://acrmp.github.com/foodcritic/#FC013&quot;&gt;foodcritic&lt;/a&gt; tests. Use Chef&amp;#39;s &lt;code&gt;:file_cache_path&lt;/code&gt; configuration option instead. This is especially important when developing a community cookbook.&lt;/p&gt;

&lt;p&gt;Next we need to give the background image a &lt;code&gt;source&lt;/code&gt; url. For copyright reasons, I&amp;#39;m going to use a &lt;a href=&quot;http://placehold.it&quot;&gt;placehold.it&lt;/a&gt; to generate our image. You could use any image you&amp;#39;d like, including one directly inside the cookbook (you would need to use the &lt;code&gt;cookbook_file&lt;/code&gt; resource instead of &lt;code&gt;remote_file&lt;/code&gt; in that case). I have a high resolution display, so I want a background image 1920x1080 (HD):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;remote_file&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Chef&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:file_cache_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/background.png&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;http://placehold.it/1920x1080&#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This declaration says:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;quot;Hey Chef, go out to &lt;a href=&quot;http://placehold.it/1920x1080&quot;&gt;http://placehold.it/1920x1080&lt;/a&gt; and download
and save whatever you get to your file cache path. kthxbye.&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you&amp;#39;re a super-nerd, this declaration says&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /tmp &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; wget -O background.png http://placehold.it/1920x1080&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that we have the remote file downloaded to the system, we need to programatically set it as the background. In your head, you may think:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Okay, I need to right-click on that image and click on the &lt;code&gt;Set as Desktop Background&lt;/code&gt; option...&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Unfortunately, Chef doesn&amp;#39;t work quite that way :). All the commands you run are executed in the context of a command line or terminal. We need to find a way to use the command line to set the Desktop background. Fortunately, most of the GUI commands on your machine actually use underling command line tools to execute. A quick Google search turned up &lt;a href=&quot;http://askubuntu.com/questions/51564/setting-desktop-wallpaper-via-terminal&quot;&gt;Setting Desktop Wallpaper via Terminal&lt;/a&gt; and &lt;a href=&quot;http://askubuntu.com/questions/50019/how-do-i-change-the-desktop-background-from-command-line&quot;&gt;How do I change the desktop background from command line?&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It turns out we need to do something like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;gconftool-2 -t string -s /desktop/gnome/background/picture_filename &amp;lt;path&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Because this is a bash command, we could use the &lt;code&gt;Bash&lt;/code&gt; resource. However, I like the &lt;code&gt;execute&lt;/code&gt; resource, because it is more Rubyesque in my opinion:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;set Desktop background&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;gconftool-2 -t string -s /desktop/gnome/background/picture_filename &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Chef&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:file_cache_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/background.png&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:nothing&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice how I set the &lt;code&gt;action :nothing&lt;/code&gt;. This may seem strange. Don&amp;#39;t we run this code to run? (Note, the default action is &lt;code&gt;:run&lt;/code&gt;). Well, we only want to run this command once the &lt;code&gt;remote_file&lt;/code&gt; has completed successfully. Otherwise, this command will fail. We need to modify our &lt;code&gt;remote_file&lt;/code&gt; declaration to execute this command:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;remote_file&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Chef&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:file_cache_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/background.png&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;http://placehold.it/1920x1080&#39;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;notifies&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;execute[set Desktop background]&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:immediately&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This now says:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;quot;Hey Chef, go out to &lt;a href=&quot;http://placehold.it/1920x1080&quot;&gt;http://placehold.it/1920x1080&lt;/a&gt; and download
and save whatever you get to your file cache path.
Then tell &lt;code&gt;set Desktop background&lt;/code&gt; to run immediately.&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This ensures that:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The execute command won&amp;#39;t be run before the remote file is downloaded.&lt;/li&gt;
&lt;li&gt;The execute command only executes if the remote file was downloaded successfully.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now we need to add this recipe to the node&amp;#39;s &lt;code&gt;run_list&lt;/code&gt;. I won&amp;#39;t go into too much detail here. A quick solution is to do something like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;knife node edit NODE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the &lt;code&gt;run_list&lt;/code&gt; part of the JSON file, add &lt;code&gt;recipe[major-tom]&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;NODE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;chef_environment&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;_default&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;run_list&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;recipe[major-tom]&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Save and close this file so that it is updated on the Chef Server.&lt;/p&gt;

&lt;p&gt;Upload the cookbook (&lt;code&gt;knife cookbook upload major-tom&lt;/code&gt;) and run &lt;code&gt;sudo chef-client&lt;/code&gt;. You should see that the command completes successfully. However, your Desktop background may not change. Why? Well, by default, Chef runs as the root user. We just set the root user&amp;#39;s background, but we wanted to set our own! After a bit of research, it turns out that we need to set the &lt;code&gt;user&lt;/code&gt; attribute on the &lt;code&gt;execute&lt;/code&gt; block to tell Chef which user to run the command as:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;set Desktop background&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;gconftool-2 -t string -s /desktop/gnome/background/picture_filename &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Chef&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:file_cache_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/background.png&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;svargo&#39;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# replace with your user id&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:nothing&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But what if you wanted to set the Desktop background for &lt;strong&gt;all&lt;/strong&gt; the users? Maybe you operate in an Enterprise that requires the company logo be on the Desktop background. Or maybe you just have OCD and like everything to be the same. Either way, there are a few possible solutions for accomplishing this. Let&amp;#39;s look at one way to do this.&lt;/p&gt;

&lt;h4 id=&quot;using-node[&amp;#39;etc&amp;#39;][&amp;#39;password&amp;#39;]&quot;&gt;Using &lt;code&gt;node[&amp;#39;etc&amp;#39;][&amp;#39;password&amp;#39;]&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;You can iterate over all the local accounts on a given machine using the &lt;code&gt;node[&amp;#39;etc&amp;#39;][&amp;#39;passwd&amp;#39;]&lt;/code&gt; hash. It looks like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;etc&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;passwd&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;set Desktop background&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;gconftool-2 -t string -s /desktop/gnome/background/picture_filename &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Chef&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:file_cache_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/background.png&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:nothing&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;only_if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;uid&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here, we iterate over each user and execute the command once for each user. Notice the &lt;code&gt;only_if&lt;/code&gt; block as well. This tells Chef to only run for non-system accounts (&amp;gt; 1000).&lt;/p&gt;

&lt;p&gt;Upload the cookbook and run &lt;code&gt;sudo chef-client&lt;/code&gt; again and you should see you Desktop background change. Depending on your machine, you may need to logout and login for the changes to take effect.&lt;/p&gt;

&lt;p&gt;For those of you who cheated and read ahead, here&amp;#39;s the full recipe:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Cookbook Name:: major-tom&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Recipe:: default&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Copyright 2012, Your Name&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# All rights reserved - Do Not Redistribute&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Download the remote file&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;remote_file&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Chef&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:file_cache_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/background.png&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;http://placehold.it/1920x1080&#39;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;notifies&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;execute[set Desktop background]&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:immediately&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Set the Desktop background for each user&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;etc&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;passwd&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;set Desktop background&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;gconftool-2 -t string -s /desktop/gnome/background/picture_filename &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Chef&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:file_cache_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/background.png&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:nothing&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;only_if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;uid&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;wrap-up&quot;&gt;Wrap Up&lt;/h4&gt;

&lt;p&gt;There&amp;#39;s definitely room for improvement on this cookbook. We could create attributes and allow the end user to customize it further. However, for the purpose of this tutorial, we are done working with this cookbook.&lt;/p&gt;

&lt;h2 id=&quot;diving-head-first&quot;&gt;Diving Head First&lt;/h2&gt;

&lt;p&gt;In this next step, I&amp;#39;m going to switch over to a Mac because I personally use a Mac. Before beginning, let&amp;#39;s take a step back and ask ourselves:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;quot;What should I configure?&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This question has potentially endless number of answers and all depends on how much time you want to spend capturing your current configuration in Chef. For this tutorial, I&amp;#39;m going to do the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Install the following packages:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;apple-gcc42&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;aspell&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bash-completion&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elasticsearch&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;erlang&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ghostscript&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;imagemagick&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jasper&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mongodb&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mysql&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;node&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;postgresql&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;qt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rabbitmq&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;readline&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;redis&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;solr&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wget&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Clone a bunch of git repositories&lt;/li&gt;
&lt;li&gt;Install my dotfiles&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is a very basic start and should cover many helpful topics for when you begin provisioning your own laptop.&lt;/p&gt;

&lt;p&gt;Just as important as before, the cookbook name should be descriptive and fun. I&amp;#39;m going to call this cookbook &lt;code&gt;sethinator&lt;/code&gt;, because my name is Seth, and I&amp;#39;m &amp;quot;Sethinating&amp;quot; my laptop.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;$ knife cookbook create sethinator
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Be sure to change the &lt;code&gt;metadata.rb&lt;/code&gt;, add a &lt;code&gt;CHANGELOG.md&lt;/code&gt;, and everything else we did in the &amp;quot;Getting your Feet Wet&amp;quot;.&lt;/p&gt;

&lt;h3 id=&quot;installing-packages&quot;&gt;Installing packages&lt;/h3&gt;

&lt;p&gt;As you already know, there is no &amp;quot;built-in&amp;quot; package manager for Mac. Instead, there are two popular alternatives - homebrew and MacPorts. I will be using homebrew in these examples.&lt;/p&gt;

&lt;p&gt;First, we need to tell Chef to use homebrew as the package manager:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;$ knife cookbook site install homebrew
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will download the homebrew cookbook from the &lt;a href=&quot;http://community.opscode.com/cookbooks/homebrew&quot;&gt;community site&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We should also list this cookbook as a &lt;a href=&quot;http://wiki.opscode.com/display/chef/Cookbooks#Cookbooks-CookbookDependencies&quot;&gt;dependency&lt;/a&gt;. Open up the &lt;code&gt;metadata.rb&lt;/code&gt; and add the following:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# metadata.rb&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;depends&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;homebrew&#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This way, if we choose to publish the cookbook to the community site, the homebrew cookbook will automatically be downloaded and installed with this cookbook.&lt;/p&gt;

&lt;p&gt;To keep things organized, I&amp;#39;m going to create a separate recipe for each of the tasks above. Create a new recipe named &lt;code&gt;packages.rb&lt;/code&gt; and add the following content:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Cookbook Name:: sethinator&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Recipe:: packages&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Copyright 2012, Seth Vargo&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# All rights reserved - Do Not Redistribute&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Configures and installs the following packages using homebrew:&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#   - apple-gcc42&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#   - aspell&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#   - bash-completion&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#   - elasticsearch&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#   - erlang&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#   - ghostscript&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#   - git&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#   - imagemagick&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#   - jasper&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#   - mongodb&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#   - mysql&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#   - node&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#   - postgresql&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#   - qt&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#   - rabbitmq&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#   - readline&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#   - redis&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#   - solr&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#   - wget&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Include homebrew as the default package manager.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# (default is MacPorts)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;include_recipe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;homebrew&#39;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Install each of the packages using the `package` resource&lt;/span&gt;
&lt;span class=&quot;sx&quot;&gt;%w(apple-gcc42 aspell bash-completion elasticsearch erlang ghostscript git imagemagick jasper mongodb mysql node postgresql qt rabbitmq readline redis solr wget)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;That&amp;#39;s it!&lt;/strong&gt; See how simple that was?&lt;/p&gt;

&lt;h3 id=&quot;cloning-git-repositories&quot;&gt;Cloning git repositories&lt;/h3&gt;

&lt;p&gt;I have a very particular setup for my development workflow. Additionally, I regularly use a bunch of repositories. I could manually clone them, but why would I do that when I could manage them with Chef?&lt;/p&gt;

&lt;p&gt;Create another cookbook named &amp;#39;git.rb&amp;#39; in the recipes directory and add the following:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Cookbook Name:: sethinator&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Recipe:: git&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Copyright 2012, Seth Vargo&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# All rights reserved - Do Not Redistribute&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Creates the ~/Development directory and installs git repositories&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# specified as attributes on the node.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;etc&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;passwd&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userdata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# Create the ~/Development directory&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;directory&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;dir&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/Development&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;owner&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;gid&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;0755&#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;not_if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;dir&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nil?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;dir&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;/var/empty&#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# Clone each git repository from the node&#39;s attributes&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# We are using the `checkout` action because it will only checkout the&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# repository if it is not already there. We don&#39;t want a Chef run overwriting&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# local changes, but we do want an initial clone, so this is the best option.&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;sethinator&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;git&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;dir&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;name&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;url&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;reference&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;reference&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;master&#39;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;revision&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;revision&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;HEAD&#39;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;gid&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;0755&#39;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:checkout&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Slightly more complex than the last example, but still just a few lines of code. Notice that we haven&amp;#39;t defined the git repositories inside the recipe. Instead they are attributes on the node itself. Create the default attributes file in &lt;code&gt;attributes/default.rb&lt;/code&gt; and this is where I&amp;#39;m going to add all my repositories like so:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# attributes/default.rb&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;sethinator&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;git&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;chef-hosted&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;:url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;git@github.com:customink/...&#39;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;autotomy&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;:url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;git@github.com:customink/...&#39;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;knife-spork&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;:url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;git@github.com:jonlives/knife-spork&#39;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I&amp;#39;ve suppressed the URLs to our private repositories, but you get the general idea. Notice there are additional options such as &lt;code&gt;reference&lt;/code&gt; and &lt;code&gt;revision&lt;/code&gt; that I have left out because I&amp;#39;m okay with their default values. If you use another CVS such as SVN, you may want to support additional attributes and tweak accordingly. Specifying the attribute values in the cookbook works but there are lots of other places that are more appropriate for managing these attributes. Checkout the &lt;a href=&quot;http://wiki.opscode.com/display/chef/Attributes&quot;&gt;Attributes page on the Opscode wiki&lt;/a&gt; for more details.&lt;/p&gt;

&lt;h3 id=&quot;installing-dotfiles&quot;&gt;Installing dotfiles&lt;/h3&gt;

&lt;p&gt;Since I spend 90% of my time working in Terminal, I have a small &lt;a href=&quot;https://github.com/sethvargo/dotfiles&quot;&gt;collection of dotfiles&lt;/a&gt; that I&amp;#39;ve accumulated over the years. Everything from my bash prompt to RVM setup.&lt;/p&gt;

&lt;p&gt;First, create a new cookbook named &lt;code&gt;dotfiles.rb&lt;/code&gt; and add the following:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Cookbook Name:: sethinator&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Recipe:: dotfiles&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Copyright 2012, Seth Vargo&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# All rights reserved - Do Not Redistribute&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Clone the remote dotfiles&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Again, only use :checkout because we don&#39;t want to clone on future attempts.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# We also don&#39;t plan on working with this repository, so we don&#39;t need the entire&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# git history. Setting the depth to `1` makes a shallow clone. We use the git://&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# url here because this computer (assuming it&#39;s new) does not have access to&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# clone using its public key yet.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Lastly, we only want to clone these if we haven&#39;t already installed our dotfiles.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# There are a few ways to do this, such as checking for the existence of a file,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# creating a file, checking the contents of a file, etc. Here we are just going to check&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# and see if the `.gitconfig` file exists. That isn&#39;t created automatically with a new&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# user, so it&#39;s a reasonable file to choose.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Chef&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:file_cache_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/dotfiles&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;git://github.com/sethvargo/dotfiles.git&#39;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;svargo&#39;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gid&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;wheel&#39;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;0755&#39;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:checkout&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;depth&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;not_if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;exists?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/Users/svargo/.gitconfig&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;notifies&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;execute[install dotfiles]&#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Run the dotfile rake task to install the files&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;rake&#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;install dotfiles&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cwd&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Chef&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:file_cache_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/dotfiles&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;rake install&#39;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:nothing&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That rake task will copy all the dotfiles into their proper locations. That&amp;#39;s it!&lt;/p&gt;

&lt;h3 id=&quot;put-it-all-together&quot;&gt;Put it all together&lt;/h3&gt;

&lt;p&gt;Open up the default recipe (&lt;code&gt;recipes/default.rb&lt;/code&gt;) and add the following:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Cookbook Name:: sethinator&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Recipe:: default&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Copyright 2012, Seth Vargo&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# All rights reserved - Do Not Redistribute&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;include_recipe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;sethinator::packages&#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;include_recipe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;sethinator::git&#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;include_recipe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;sethinator::dotfiles&#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now add &lt;code&gt;sethinator&lt;/code&gt; (or whatever you called your cookbook) to your node&amp;#39;s &lt;code&gt;run_list&lt;/code&gt; and run &lt;code&gt;sudo chef-client&lt;/code&gt;. You should have your bash prompt, configuration, aliases, and more right at your fingertips!&lt;/p&gt;

&lt;p&gt;If you&amp;#39;re looking for a more complete and customizable solution that you don&amp;#39;t need to write from scratch, head on over to &lt;a href=&quot;http://jtimberman.housepub.org/blog/2012/07/29/os-x-workstation-management-with-chef/&quot;&gt;Joshua Timberman&amp;#39;s blog post&lt;/a&gt;. He goes into much more detail about MacOSX provisioning.&lt;/p&gt;

&lt;h2 id=&quot;caveats&quot;&gt;Caveats&lt;/h2&gt;

&lt;h3 id=&quot;croning-chef&quot;&gt;Croning Chef&lt;/h3&gt;

&lt;p&gt;At &lt;a href=&quot;http://www.customink.com&quot;&gt;CustomInk&lt;/a&gt;, we create a cron task to run Chef at a regular interval (on a randomly generated seed). This is great because we need only update a cookbook and all our servers will receive the change without having to touch them. However, when provisioning your local laptop, I do &lt;strong&gt;not&lt;/strong&gt; recommend setting up a cron task for Chef. Because you are using the same machine for both writing Chef stuff and running Chef stuff, you could potentially brick your computer if you aren&amp;#39;t careful. Because of this, I recommend running &lt;code&gt;chef-client&lt;/code&gt; manually on your local machine.&lt;/p&gt;

&lt;h3 id=&quot;development&quot;&gt;Development&lt;/h3&gt;

&lt;p&gt;Along similar lines as Croning Chef, I do not recommend that you &amp;quot;test&amp;quot; cookbooks on your local machine. Instead, replicate your current environment in a Virtual Machine. There are great tools out there like &lt;a href=&quot;https://www.virtualbox.org/&quot;&gt;Oracle&amp;#39;s VirtualBox&lt;/a&gt; + &lt;a href=&quot;http://vagrantup.com&quot;&gt;Vagrant&lt;/a&gt;. Run your cookbooks against a machine that you can easily snapshot and restore should something go awry, before pushing to &amp;quot;production&amp;quot; (your local machine).&lt;/p&gt;

&lt;h3 id=&quot;workflow&quot;&gt;Workflow&lt;/h3&gt;

&lt;p&gt;If this is your first time using Chef, the workflow will feel awkward. There&amp;#39;s a major disconnect between what is on your local box, what is on your CVS, and what is on the Chef Server (Opscode). Even if you are using semantic versioning, you may have different cookbook versions in different environments. First of all, don&amp;#39;t worry. Chef is a big piece of software, and you can&amp;#39;t expect to master it in a weekend. Secondly, there are a few tools that help you manage your workflow.&lt;/p&gt;

&lt;h5 id=&quot;opscode-workflow-wiki&quot;&gt;&lt;a href=&quot;http://wiki.opscode.com/display/chef/Cookbook+Workflows&quot;&gt;Opscode Workflow Wiki&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;The official Opscode wiki detailing various workflow implementations.&lt;/p&gt;

&lt;h5 id=&quot;knife-spork&quot;&gt;&lt;a href=&quot;https://github.com/jonlives/knife-spork&quot;&gt;knife-spork&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;Created by &lt;a href=&quot;https://github.com/jonlives&quot;&gt;Jon Cowie&lt;/a&gt; over at &lt;a href=&quot;http://www.etsy.com/&quot;&gt;Etsy&lt;/a&gt;, KnifeSpork makes bumping, uploading, and sharing cookbooks a breeze, especially in collaborative environments.&lt;/p&gt;

&lt;h5 id=&quot;librarian&quot;&gt;&lt;a href=&quot;https://github.com/applicationsonline/librarian&quot;&gt;Librarian&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;Librarian is a tool for managing cookbooks. If you&amp;#39;re familiar with Ruby, it&amp;#39;s the equivalent of a &lt;code&gt;Gemfile&lt;/code&gt;.&lt;/p&gt;

&lt;h5 id=&quot;berkshelf&quot;&gt;&lt;a href=&quot;https://github.com/RiotGames/berkshelf&quot;&gt;Berkshelf&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;Berkshelf allows you to manage a cookbook or an application&amp;#39;s cookbook dependencies. Check-out this &lt;a href=&quot;http://christian-trabold.de/librarian-chef-vs-berkshelf&quot;&gt;comparison of Librarian and Berkshelf&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;testing&quot;&gt;Testing&lt;/h3&gt;

&lt;p&gt;I will not go into cookbook testing extensively here, but it&amp;#39;s very important that your cookbooks follow some standard. At the time of this writing, there are a few solutions for testing cookbooks - &lt;a href=&quot;https://github.com/acrmp/chefspec&quot;&gt;chefspec&lt;/a&gt;, &lt;a href=&quot;http://www.cucumber-chef.org/&quot;&gt;cucumber-chef&lt;/a&gt;, &lt;a href=&quot;https://github.com/calavera/minitest-chef-handler&quot;&gt;minitest-chef-handler&lt;/a&gt;, and &lt;a href=&quot;https://github.com/calavera/rspec-chef&quot;&gt;rspec-chef&lt;/a&gt; – and they each have their own distinct advantages. At the very least, you should run &lt;code&gt;knife cookbook test&lt;/code&gt; and &lt;code&gt;foodcritic&lt;/code&gt; against all your cookbooks. Nathen Harvey covered this in his &lt;a href=&quot;http://technology.customink.com/blog/2012/07/06/mvt-knife-test-and-travisci/&quot;&gt;MVT: knife test and TravisCI&lt;/a&gt; blog post.&lt;/p&gt;

&lt;p&gt;When running foodcritic, I recommend adding both &lt;a href=&quot;https://github.com/customink-webops/foodcritic-rules&quot;&gt;CustomInk foodcritic rules&lt;/a&gt; and &lt;a href=&quot;https://github.com/etsy/foodcritic-rules&quot;&gt;Etsy foodcritic rules&lt;/a&gt;. Clone the repositories (or use submodules) into a &lt;code&gt;foodcritic&lt;/code&gt; directory in the root of your chef-repo:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;chef-repo
  |_cookbooks
  |_environments
  ...
  |_foodcritic
    |_customink
    |_etsy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then you can run &lt;code&gt;foodcritic&lt;/code&gt; like so:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;foodcritic -I foodcritic/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; cookbooks/COOKBOOK
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For more information on the rules provided, see the individual repos.&lt;/p&gt;
</description>
        <pubDate>Mon, 30 Jul 2012 20:43:00 -0400</pubDate>
        <link>http://technology.customink.com//blog/2012/07/30/provision-your-laptop-with-chef-part-2</link>
        <guid isPermaLink="true">http://technology.customink.com//blog/2012/07/30/provision-your-laptop-with-chef-part-2</guid>
      </item>
    
      <item>
        <title>Stay Cool</title>
        <description>&lt;p&gt;We had a fairly severe production issue the other day.  The kind of issue where you get sick to your stomach as you begin to realize what...just....happened......&lt;/p&gt;

&lt;p&gt;As the issue escalated, news spread and a core group of people took control to work towards a resolution.  The questions were always &amp;quot;what&amp;#39;s happening&amp;quot; and &amp;quot;what&amp;#39;s changed recently&amp;quot; and &amp;quot;what kinds of things might cause this&amp;quot; and never &amp;quot;who deployed last&amp;quot; and &amp;quot;who worked on this code originally&amp;quot;.  It says a lot about a person that can keep their cool and focus on issue resolution instead of blame assignment.  Even when your tired, punchy, and irritated because you can&amp;#39;t figure out exactly what&amp;#39;s going on, keeping your cool is ultimately the key to success.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;It&amp;#39;s really obvious that something is wrong when you see a group of people huddled together all staring intensely at a single monitor and not saying a word.  People instinctively want to ask &amp;quot;what&amp;#39;s wrong?&amp;quot; and the follow up question is usually &amp;quot;do we know who did that?&amp;quot;.  During our ordeal, teammate after teammate approached and offered simple words &amp;quot;Please let me know what I can do to help&amp;quot;.  Developers, product managers, people from other teams - the skillset each person possessed was irrelevant, but the intent was uniform: help fix the problem in whatever way possible.&lt;/p&gt;

&lt;p&gt;When something goes wrong, it doesn&amp;#39;t matter who caused the problem.  Everyone is human, everyone is capable of making the same mistake.  All that matters is &amp;quot;what&amp;quot; is causing the problem.  It&amp;#39;s much easier to find the &amp;quot;what&amp;quot; when your team is calm and working together.  Once you understand the cause of the problem it&amp;#39;s easy to determine a clear plan of action.  With a clear plan of action and a blameless environment, problem resolution is imminent because everyone is ready to help (and not hide).&lt;/p&gt;

&lt;p&gt;We&amp;#39;re not completely out of the weeds just yet, but we understand the issue and we our executing our plan of action.  Tomorrow we&amp;#39;ll conduct a blameless postmortem to help us identify, and further prevent, the root cause of the issue.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m proud to be apart of such a great support system.  I have no gripes about the 16 hours I spent at my computer yesterday because I was helping our customers.  More importantly, I was helping my friends.&lt;/p&gt;
</description>
        <pubDate>Tue, 10 Jul 2012 19:15:00 -0400</pubDate>
        <link>http://technology.customink.com//blog/2012/07/10/stay-cool</link>
        <guid isPermaLink="true">http://technology.customink.com//blog/2012/07/10/stay-cool</guid>
      </item>
    
      <item>
        <title>MVT: knife test and TravisCI</title>
        <description>&lt;p&gt;In my last post, &lt;a href=&quot;/blog/2012/06/04/mvt-foodcritic-and-travis-ci/&quot;&gt;MVT: Foodcritic and Travis CI&lt;/a&gt; I described the process for having Travis CI look after your cookbooks and run Foodcritic, the cookbook lint tool, on your cookbook after each &lt;code&gt;git push&lt;/code&gt;.  In this post, we&amp;#39;ll iterate on the &amp;quot;Minimum Viable Test&amp;quot; idea by adding in support for knife&amp;#39;s cookbook testing.&lt;/p&gt;

&lt;p&gt;Wait, I&amp;#39;m already running foodcritic, do I really need to run &lt;code&gt;knife cookbook test&lt;/code&gt;, too?&lt;/p&gt;

&lt;p&gt;I&amp;#39;ll use a very simple example to demonstrate that you do.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s create a very basic cookbook:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;knife cookbook create very_basic
&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt; Creating cookbook very_basic
&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt; Creating README &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;cookbook: very_basic
&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt; Creating metadata &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;cookbook: very_basic
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next, we&amp;#39;ll write a flawed recipe:&lt;/p&gt;

&lt;p&gt;``` ruby cookbooks/very_basic/recipes/default.rb
package &amp;quot;flawed&amp;quot; do
  action :nothing
end
end&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;
Now, run foodcritic on this cookbook:

``` sh
foodcritic cookbooks/very_basic
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Foodcritic doesn&amp;#39;t throw any errors or find any problem with the cookbook.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s try testing it with knife:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;knife cookbook &lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;very_basic
checking very_basic
Running syntax check on very_basic
Validating ruby files
FATAL: Cookbook file recipes/default.rb has a ruby syntax error:
FATAL: /Users/nharvey/projects/chef-hosted/.chef/../cookbooks/very_basic/recipes/default.rb:22: syntax error, unexpected keyword_end, expecting &lt;span class=&quot;nv&quot;&gt;$end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;OK, it should now be obvious that &lt;code&gt;knife cookbook test&lt;/code&gt; should be included as part of our MVT.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;To get Travis CI running &lt;code&gt;knife cookbook test&lt;/code&gt; for us, we&amp;#39;ll need to add or update the following files:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;.travis.yml&lt;/li&gt;
&lt;li&gt;Rakefile&lt;/li&gt;
&lt;li&gt;test/.chef/knife.rb&lt;/li&gt;
&lt;li&gt;test/support/Gemfile&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of course, this assumes you&amp;#39;ve configured your cookbook as described in the &lt;a href=&quot;/blog/2012/06/04/mvt-foodcritic-and-travis-ci/&quot;&gt;previous post&lt;/a&gt;.  Let&amp;#39;s start with the Rakefile.&lt;/p&gt;

&lt;p&gt;``` ruby Rakefile&lt;/p&gt;

&lt;h1 id=&quot;!/usr/bin/env-rake&quot;&gt;!/usr/bin/env rake&lt;/h1&gt;

&lt;p&gt;desc &amp;quot;Runs knife cookbook test&amp;quot;
task :knife do
  Rake::Task[:prepare_sandbox].execute&lt;/p&gt;

&lt;p&gt;sh &amp;quot;bundle exec knife cookbook test cookbook -c test/.chef/knife.rb -o #{sandbox_path}/../&amp;quot;
end&lt;/p&gt;

&lt;p&gt;task :prepare_sandbox do
  files = %w{*.md *.rb attributes definitions files libraries providers recipes resources templates}&lt;/p&gt;

&lt;p&gt;rm_rf sandbox_path
  mkdir_p sandbox_path
   cp_r Dir.glob(&amp;quot;{#{files.join(&amp;#39;,&amp;#39;)}}&amp;quot;), sandbox_path
end&lt;/p&gt;

&lt;p&gt;private
def sandbox_path
  File.join(File.dirname(&lt;strong&gt;FILE&lt;/strong&gt;), %w(tmp cookbooks cookbook))
end&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;
In the file snippet above, I&#39;ve only included the parts that are relevant for getting knife working.  I&#39;ll include the full source of the Rakefile at the end of the article.

Next, let&#39;s add this rake task to our .travis.yml file.

``` ruby .travis.yml
language: ruby
gemfile:
   - test/support/Gemfile
rvm:
  - 1.9.2
  - 1.9.3
script:
  - bundle exec rake knife
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To successfully run the knife command, Travis CI will need a very minimal Chef configuration.&lt;/p&gt;

&lt;p&gt;``` ruby test/.chef/knife.rb
cache_type &amp;#39;BasicFile&amp;#39;
cache_options(:path =&amp;gt; &amp;quot;#{ENV[&amp;#39;HOME&amp;#39;]}/.chef/checksums&amp;quot;)&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;
And, of course, we&#39;ll need to add Chef to our Gemfile.  Be sure to specify a modern version as Travis CI will use 0.8.10 by default (at the time of this writing).

``` ruby test/support/Gemfile
source &quot;https://rubygems.org&quot;

gem &#39;rake&#39;
gem &#39;chef&#39;, &#39;~&amp;gt; 10.12.0&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That&amp;#39;s it.  On your next &lt;code&gt;git push&lt;/code&gt; Travis CI should run &lt;code&gt;knife cookbook test&lt;/code&gt; on your cookbook.&lt;/p&gt;

&lt;h2 id=&quot;running-locally&quot;&gt;Running locally&lt;/h2&gt;

&lt;p&gt;To run the rake tasks locally, you&amp;#39;ll need to tell bundler where the Gemfile is, or you&amp;#39;ll need to move it to the root directory of your cookbook and update .travis.yml appropriately.  Use the following command to run your tests locally:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;BUNDLE_GEMFILE=test/support/Gemfile rake knife&lt;/code&gt;
&lt;code&gt;BUNDLE_GEMFILE=test/support/Gemfile rake foodcritic&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;full-source-code&quot;&gt;Full source code&lt;/h2&gt;

&lt;p&gt;You can checkout this &lt;a href=&quot;https://github.com/customink-webops/percona-install/compare/03b9446...d423b14&quot;&gt;Github compare view&lt;/a&gt; to see the changes made to the code from the &lt;a href=&quot;/blog/2012/06/04/mvt-foodcritic-and-travis-ci/&quot;&gt;previous post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;``` ruby test/.chef/knife.rb
cache_type &amp;#39;BasicFile&amp;#39;
cache_options(:path =&amp;gt; &amp;quot;#{ENV[&amp;#39;HOME&amp;#39;]}/.chef/checksums&amp;quot;)&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;
``` ruby .travis.yml
language: ruby
gemfile:
   - test/support/Gemfile
rvm:
  - 1.9.2
  - 1.9.3
script:
  - bundle exec rake knife
  - bundle exec rake foodcritic
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The Rakefile was refactored a bit since the previous post:&lt;/p&gt;

&lt;p&gt;``` ruby Rakefile&lt;/p&gt;

&lt;h1 id=&quot;!/usr/bin/env-rake&quot;&gt;!/usr/bin/env rake&lt;/h1&gt;

&lt;p&gt;task :default =&amp;gt; &amp;#39;foodcritic&amp;#39;&lt;/p&gt;

&lt;p&gt;desc &amp;quot;Runs foodcritic linter&amp;quot;
task :foodcritic do
  Rake::Task[:prepare_sandbox].execute&lt;/p&gt;

&lt;p&gt;if Gem::Version.new(&amp;quot;1.9.2&amp;quot;) &amp;lt;= Gem::Version.new(RUBY_VERSION.dup)
    sh &amp;quot;foodcritic -f any #{sandbox_path}&amp;quot;
  else
    puts &amp;quot;WARN: foodcritic run is skipped as Ruby #{RUBY_VERSION} is &amp;lt; 1.9.2.&amp;quot;
  end
end&lt;/p&gt;

&lt;p&gt;desc &amp;quot;Runs knife cookbook test&amp;quot;
task :knife do
  Rake::Task[:prepare_sandbox].execute&lt;/p&gt;

&lt;p&gt;sh &amp;quot;bundle exec knife cookbook test cookbook -c test/.chef/knife.rb -o #{sandbox_path}/../&amp;quot;
end&lt;/p&gt;

&lt;p&gt;task :prepare_sandbox do
  files = %w{*.md *.rb attributes definitions files libraries providers recipes resources templates}&lt;/p&gt;

&lt;p&gt;rm_rf sandbox_path
  mkdir_p sandbox_path
  cp_r Dir.glob(&amp;quot;{#{files.join(&amp;#39;,&amp;#39;)}}&amp;quot;), sandbox_path
end&lt;/p&gt;

&lt;p&gt;private
def sandbox_path
  File.join(File.dirname(&lt;strong&gt;FILE&lt;/strong&gt;), %w(tmp cookbooks cookbook))
end&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;
``` ruby test/support/Gemfile
source &quot;https://rubygems.org&quot;

gem &#39;rake&#39;
gem &#39;foodcritic&#39;
gem &#39;chef&#39;, &#39;~&amp;gt; 10.12.0&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;credit&quot;&gt;Credit&lt;/h3&gt;

&lt;p&gt;A big &amp;quot;Thank You!&amp;quot; shout-out to &lt;a href=&quot;/blog/our-team/seth-vargo.html&quot;&gt;Seth Vargo&lt;/a&gt; for writing most of the code used in this post!&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;sub&gt;Reposted from &lt;a href=&quot;http://nathenharvey.com/blog/2012/07/06/mvt-knife-test-and-travisci/&quot;&gt;Nathen Harvey&amp;#39;s blog&lt;/a&gt;&lt;sub&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 06 Jul 2012 22:52:00 -0400</pubDate>
        <link>http://technology.customink.com//blog/2012/07/06/mvt-knife-test-and-travisci</link>
        <guid isPermaLink="true">http://technology.customink.com//blog/2012/07/06/mvt-knife-test-and-travisci</guid>
      </item>
    
      <item>
        <title>Welcome, Dan Hensgen</title>
        <description>&lt;p&gt;Let me start off by apologizing to Dan for such a belated welcome post. It is belated for good reason though. Normally we mark our new engineer&amp;#39;s first deploy. Today does not mark Dan&amp;#39;s first deploy to production. But today&amp;#39;s deploy is the culmination of many deploys. And, it has been the one I&amp;#39;ve been waiting for.
&lt;img src=&quot;http://technology-customink-com.s3.amazonaws.com/images/dan_hensgen_the_new_hotness.jpg&quot; alt=&quot;Long Day at Work&quot; class=&quot;tb-Img tb-Img--responsive tb-Img--fancy&quot; /&gt;&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;Dan actually started in the middle of May, and we immediately began working on a maintenance project. We would be replacing a reliable, but old application running ruby 1.8.3 and rails 1.2.6 to a new app using ruby 1.9.x and rails 3.2.x. We&amp;#39;ll call the old app OldNotBusted and the new app TheNewHottness. Along with this update we would decouple TheNewHottness from the couplings of OldNotBusted to allow for new needs within the company. This update and decoupling also meant updating code in other apps that communicate with OldNotBusted to communicate with TheNewHotness.&lt;/p&gt;

&lt;p&gt;Remember how I said this is not Dan&amp;#39;s first deploy. Well, first off TheNewHottness is new so it had nothing talking to it and could go to production very easily. And, in the other applications we have been doing what I will call &amp;quot;preploys&amp;quot;. We have, at proper milestones, merged our code in the other applications and tested it, staged it, and deployed it. We did not remove any of the old code and the code we wrote was not being exercised in the other apps. But, the &amp;quot;preploys&amp;quot; allowed us to test the code in those environments and kick off calls to TheNewHottness manually using rails console and such. Also, we could verify our changes were not breaking other parts of those apps in unexpected ways. And Finally, &amp;quot;preploys&amp;quot; allowed us to make the final deploy very undramatic. It was a flip of the switch so to speak and now TheNewHotness is running and accepting calls that OldNotBusted used to take. The next deploy will by my favorite. Legacy code removal.&lt;/p&gt;

&lt;p&gt;I&amp;#39;ll finish by saying it has been a joy to work with Dan on TheNewHotness. And, I&amp;#39;m looking forward to working with him on future projects. Glad to have you aboard at CustomInk.&lt;/p&gt;
</description>
        <pubDate>Wed, 27 Jun 2012 16:00:00 -0400</pubDate>
        <link>http://technology.customink.com//blog/2012/06/27/welcome-dan-hensgen</link>
        <guid isPermaLink="true">http://technology.customink.com//blog/2012/06/27/welcome-dan-hensgen</guid>
      </item>
    
      <item>
        <title>Profiling OpenStruct, Eager Loading, Method Missing, and Lazy Loading</title>
        <description>&lt;p&gt;I was recently working on a gem that involved marshaling data from a remote API. I really wanted the gem to behave like a native Ruby object, but they methods would vary depending on the response. Since the data was dynamic, it would have been counter-productive and not scalable to define each of the methods individually.&lt;/p&gt;

&lt;p&gt;As such, I thought of a few different ways to get the result I wanted, but that just raised more questions, mainly &lt;strong&gt;performance&lt;/strong&gt;. How would each of these methods perform? This was especially important given the large number of queries I would be making. In this blog post, I detail the exploration of these different methods and arrive at some pretty cool conclusions.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;the-scenario&quot;&gt;The Scenario&lt;/h2&gt;

&lt;p&gt;In this scenario, we will be using the result of a &lt;a href=&quot;https://api.github.com/users/sethvargo/repos&quot;&gt;Github API call to my profile&lt;/a&gt;. The hash (as follows) will be stored and referenced in the &lt;code&gt;@store&lt;/code&gt; variable:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;&#39;has_wiki&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;&#39;has_issues&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;&#39;forks&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;&#39;open_issues&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;&#39;language&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Ruby&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;&#39;description&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;A distributed build system for the open source community.&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;&#39;svn_url&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;https://github.com/sethvargo/travis-ci&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;&#39;pushed_at&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;2012-06-16T17:32:35Z&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;&#39;full_name&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;sethvargo/travis-ci&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;&#39;git_url&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;git://github.com/sethvargo/travis-ci.git&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;&#39;created_at&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;2012-06-16T17:00:29Z&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;&#39;url&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;https://api.github.com/repos/sethvargo/travis-ci&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;&#39;has_downloads&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;&#39;watchers&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;&#39;size&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;188&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;&#39;homepage&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;http://travis-ci.org&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;&#39;clone_url&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;https://github.com/sethvargo/travis-ci.git&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;&#39;ssh_url&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;git@github.com:sethvargo/travis-ci.git&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;&#39;html_url&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;https://github.com/sethvargo/travis-ci&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;&#39;updated_at&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;2012-06-16T17:32:35Z&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;&#39;owner&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&#39;avatar_url&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;https://secure.gravatar.com/avatar/87f282c6c2cdad13100dffe8c1daf77d?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&#39;login&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;sethvargo&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&#39;gravatar_id&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;87f282c6c2cdad13100dffe8c1daf77d&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&#39;url&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;https://api.github.com/users/sethvargo&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&#39;id&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;408570&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;&#39;name&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;travis-ci&#39;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;the-metrics&quot;&gt;The Metrics&lt;/h3&gt;

&lt;p&gt;Because of the nature of my curiosity, we will measure on three different metrics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;creating the object&lt;/li&gt;
&lt;li&gt;initial request time&lt;/li&gt;
&lt;li&gt;average request time for requests (2-100)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;pure-hash&quot;&gt;Pure Hash&lt;/h3&gt;

&lt;p&gt;The Pure Hash is our baseline. This is without any magic. We are just using the straight-forward bracket-notation for accessing a value in the hash:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;vi&quot;&gt;@store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;openstruct&quot;&gt;OpenStruct&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&quot;http://ruby-doc.org/stdlib-1.9.3/libdoc/ostruct/rdoc/OpenStruct.html&quot;&gt;OpenStruct&lt;/a&gt; is a Ruby library that allows builds methods from a given hash.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;OpenStruct&lt;/code&gt; certainly has advantages, being only two lines of code. It also returns &lt;code&gt;nil&lt;/code&gt; instead of raising an exception when calling a &amp;quot;method&amp;quot; that doesn&amp;#39;t exist.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;ostruct&#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FiddleOpenStruct&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;OpenStruct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;eager-loading&quot;&gt;Eager Loading&lt;/h3&gt;

&lt;p&gt;With Eager Loading, we parse the data on initial object creation and define methods for each of the objects in the hash. This is obviously expensive on the object creation, but should be faster for subsequent calls.&lt;/p&gt;

&lt;p&gt;Eager Loading will raise an exception when calling a method that does not exist, although this could be overridden with &lt;code&gt;method_missing&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FiddleEagerLoading&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;define_singleton_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;method_missing&quot;&gt;method_missing&lt;/h3&gt;

&lt;p&gt;Using &lt;code&gt;method_missing&lt;/code&gt;, we &amp;quot;proxy&amp;quot; the requests to their associated keys in the hash store. The biggest problem with &lt;code&gt;method_missing&lt;/code&gt; is performance, and that fact is very well-documented. Every call must go through the entire object stack before it hits &lt;code&gt;method_missing&lt;/code&gt;, so we can except this method to not perform well.&lt;/p&gt;

&lt;p&gt;With &lt;code&gt;method_missing&lt;/code&gt;, we can either call &lt;code&gt;super&lt;/code&gt; (raise an exception) or end with &lt;code&gt;nil&lt;/code&gt; and any non-existent methods will return &lt;code&gt;nil&lt;/code&gt;, just like &lt;code&gt;OpenStruct&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FiddleMethodMissing&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;method_missing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nil?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;lazy-loading&quot;&gt;Lazy Loading&lt;/h3&gt;

&lt;p&gt;A hybrid of &lt;code&gt;Eager Loading&lt;/code&gt; and &lt;code&gt;method_missing&lt;/code&gt;, in Lazy Loading, we dynamically create methods as they are requested in &lt;code&gt;method_missing&lt;/code&gt;. On an initial request, no methods exist, so we hit &lt;code&gt;method_missing&lt;/code&gt;. However, &lt;code&gt;method_missing&lt;/code&gt; defines a method. On a subsequent call, we don&amp;#39;t execute the entire stack and call the newly created method (meta-programming for the win)!&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FiddleLazyLoading&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;method_missing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nil?&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;define_singleton_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;the-test-suite&quot;&gt;The Test Suite&lt;/h2&gt;

&lt;p&gt;This test suite is very simplistic, coming in under 50 lines of code. You can see we are testing the three different metrics with appropriate &lt;code&gt;puts&lt;/code&gt; statements to differentiate the output:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;vi&quot;&gt;@methods&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;keys&lt;/span&gt;
&lt;span class=&quot;vi&quot;&gt;@n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Creating the Object&#39;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Benchmark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;report&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;pure hash:&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@store&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;report&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;open struct:&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FiddleOpenStruct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;report&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;eager loading:&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FiddleEagerLoading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;report&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;method_missing:&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FiddleMethodMissing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;report&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;lazy loading:&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FiddleLazyLoading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;First method call&#39;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Benchmark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;report&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;pure hash:&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;report&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;open struct:&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FiddleOpenStruct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_sym&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;report&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;eager loading:&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FiddleEagerLoading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_sym&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;report&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;method_missing:&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FiddleMethodMissing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_sym&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;report&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;lazy loading:&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FiddleLazyLoading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_sym&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;[2..&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@n&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;] times&quot;&lt;/span&gt;
&lt;span class=&quot;vi&quot;&gt;@fiddle_open_struct&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FiddleOpenStruct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;vi&quot;&gt;@fiddle_eager_loading&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FiddleEagerLoading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;vi&quot;&gt;@fiddle_method_missing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FiddleMethodMissing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;vi&quot;&gt;@fiddle_lazy_loading&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FiddleLazyLoading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;vi&quot;&gt;@methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@fiddle_open_struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_sym&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@fiddle_eager_loading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_sym&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@fiddle_method_missing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_sym&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@fiddle_lazy_loading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_sym&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Benchmark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;report&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;pure hash:&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;report&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;open struct:&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@fiddle_open_struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_sym&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;report&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;eager loading:&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@fiddle_eager_loading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_sym&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;report&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;method_missing:&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@fiddle_method_missing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_sym&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;report&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;lazy loading:&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@fiddle_lazy_loading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_sym&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;results&quot;&gt;Results&lt;/h2&gt;

&lt;p&gt;And the moment you have been waiting for - the results:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;Creating the Object
                      user     system      total        real
pure hash:        0.000000   0.000000   0.000000 (  0.000515)
open struct:      1.440000   0.000000   1.440000 (  1.440354)
eager loading:    0.470000   0.000000   0.470000 (  0.468859)
method_missing:   0.000000   0.000000   0.000000 (  0.003673)
lazy loading:     0.000000   0.000000   0.000000 (  0.002815)


First method call
                      user     system      total        real
pure hash:        0.030000   0.000000   0.030000 (  0.021060)
open struct:     32.720000   0.010000  32.730000 ( 32.740407)
eager loading:   10.470000   0.030000  10.500000 ( 10.496159)
method_missing:   0.270000   0.000000   0.270000 (  0.261547)
lazy loading:     0.970000   0.000000   0.970000 (  0.976031)


[2..10000] times
                      user     system      total        real
pure hash:        0.020000   0.000000   0.020000 (  0.021658)
open struct:      0.080000   0.000000   0.080000 (  0.077467)
eager loading:    0.080000   0.000000   0.080000 (  0.081599)
method_missing:   0.190000   0.000000   0.190000 (  0.191151)
lazy loading:     0.080000   0.000000   0.080000 (  0.071562)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As expected, the pure hash (base) out-performed all other methods. In creating the initial object, the &lt;code&gt;OpenStruct&lt;/code&gt; performed very poorly at over a second. Furthermore, as you might expect, eager loading took about half a second. The rest of the methods had negligible results. On the first method call, the &lt;code&gt;OpenStruct&lt;/code&gt; took over 30 seconds, and eager loading took about 10 seconds. We also see that lazy loading began pulling ahead of &lt;code&gt;method_missing&lt;/code&gt;. Finally, in subsequent requests (after initial object creation and first method call), &lt;code&gt;method_missing&lt;/code&gt; performed the poorest.&lt;/p&gt;

&lt;p&gt;Here are some observations to help you visualize the results:&lt;/p&gt;

&lt;h3 id=&quot;creating-initial-object&quot;&gt;Creating Initial Object&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;                       0        10       100      1000     10000
pure hash       0.000007  0.000003  0.000008  0.000052  0.000514
open struct     0.000002  0.001660  0.014470  0.147943  1.507701
eager loading   0.000002  0.000406  0.004800  0.046868  0.482254
method_missing  0.000003  0.000007  0.000029  0.000269  0.003883
lazy loading    0.000002  0.000007  0.000029  0.000535  0.002656
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div id=&quot;chart_creating_initial_object&quot; style=&quot;width:100%; height:500px; min-width:600px;&quot;&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Clearly the &lt;code&gt;OpenStruct&lt;/code&gt; took a significant amount of time, measuring over 4x its closest competitor. Ignoring the &lt;code&gt;OpenStruct&lt;/code&gt; outlier, eager loading, as expected, took longer than all other methods. This is because it generates all those methods on each object creation. Comparing the other results, we can conclude the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Don&amp;#39;t use OpenStruct&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;If you are creating a lot of objects, avoid Eager Loading (for now)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;first-method-call&quot;&gt;First Method Call&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;                       0        10       100      1000      10000
pure hash       0.000008  0.000026  0.000236  0.002248  0.0210930
open struct     0.000002  0.032629  0.328859  3.340419  33.446652
eager loading   0.000003  0.011754  0.103952  1.072228  10.856142
method_missing  0.000002  0.000329  0.003961  0.027261  0.2574720
lazy loading    0.000002  0.000968  0.009337  0.100895  1.0136820
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div id=&quot;chart_first_method_call&quot; style=&quot;width:100%; height:500px; min-width:600px;&quot;&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Again we see that &lt;code&gt;OpenStruct&lt;/code&gt; performs poorly, taking over 30 seconds to process 10,000 first method calls. &lt;code&gt;method_missing&lt;/code&gt; surprisingly performed very well. Lazy loading doesn&amp;#39;t have a chance to shine here because we are only calling the method once (thus essentially using &lt;code&gt;method_missing&lt;/code&gt;). The extra time is from actually defining the method. With this data, we can conclude the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Don&amp;#39;t use OpenStruct&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;method_missing&lt;/code&gt; wins when only calling a few methods&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;subsequent-method-calls&quot;&gt;Subsequent Method Calls&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;                       0        10       100      1000     10000    100000    1000000    10000000
pure hash       0.000008  0.000027  0.000229  0.002292  0.021919  0.210670  2.1555960   21.669286
open struct     0.000003  0.000090  0.000825  0.008313  0.078974  0.781603  7.9774830   76.648551
eager loading   0.000002  0.000093  0.000878  0.008558  0.084123  0.839965  8.5130510   80.623932
method_missing  0.000002  0.000217  0.001972  0.020136  0.186405  1.916927  19.288969  188.095461
lazy loading    0.000002  0.000081  0.000754  0.007333  0.072564  0.737112  7.4007320   72.202056
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div id=&quot;subsequent_method_calls&quot; style=&quot;width:100%; height:500px; min-width:600px;&quot;&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;In drawing conclusions from this data, it&amp;#39;s more important to look at &lt;em&gt;how&lt;/em&gt; the data is scaling, rather than the factors themselves. In the long run, lazy loading performed the best, but OpenStruct is a close second. It turns out OpenStruct isn&amp;#39;t that bad when making a lot of queries. &lt;code&gt;method_missing&lt;/code&gt; performed very poorly.&lt;/p&gt;

&lt;h2 id=&quot;final-conclusions&quot;&gt;Final Conclusions&lt;/h2&gt;

&lt;p&gt;Each of the methods we analyzed provide different benefits under different circumstances. It&amp;#39;s impossible to say &amp;quot;use method x, because it&amp;#39;s better&amp;quot;. One of the reasons I chose to analyze multiple use cases is because it illustrates the fact that there is no &amp;quot;silver bullet&amp;quot; answer to this common problem.&lt;/p&gt;

&lt;p&gt;If you&amp;#39;re in &lt;code&gt;irb&lt;/code&gt; and need to marshall a hash into an object, &lt;code&gt;OpenStruct&lt;/code&gt; is the easiest and fastest route. Similarly, if you are creating an object that receives thousands of requests, you may want to implement lazy loading. There is not easy answer, but hopefully these statistics and benchmarks help in your next project.&lt;/p&gt;

&lt;h2 id=&quot;known-caveats&quot;&gt;Known Caveats&lt;/h2&gt;

&lt;p&gt;These methods are purely for example and fails many edge cases.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;These methods require special cases when your object returns data that is actually &lt;code&gt;nil&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt;. It could raise an exception instead of actually returning &lt;code&gt;nil&lt;/code&gt; as expected.&lt;/li&gt;
&lt;li&gt;Allowing methods to by dynamically called opens you up to a world of hurt - especially if your data&amp;#39;s keys correspond to existing Ruby methods. As an example, when writing this blog post, my original hash had a key named &lt;code&gt;fork&lt;/code&gt;. When I was actually sending &lt;code&gt;fork&lt;/code&gt;, it was calling the Ruby &lt;code&gt;Kernel.fork&lt;/code&gt; method, which really threw me for a loop.&lt;/li&gt;
&lt;li&gt;I neglected many qualitative metrics, such as ease of use, implementation time, and readability, when conducting this study. Those metrics, by definition, are extremely difficult to measure.&lt;/li&gt;
&lt;/ol&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
  google.load(&#39;visualization&#39;, &#39;1&#39;, { packages:[&#39;corechart&#39;] });
  google.setOnLoadCallback(drawCharts);

  var options = {
    hAxis: {
      title: &#39;Iterations&#39;
    },
    vAxis: {
      title: &#39;Seconds&#39;
    }
  }

  function drawCharts() {
    _drawCreatingInitialObjectChart();
    _drawFirstMethodCallChart();
    _drawSubsequentMethodCallsChart();
  }

  function _drawCreatingInitialObjectChart() {
    var data = google.visualization.arrayToDataTable([
      [ &#39;Iterations&#39;, &#39;Pure Hash&#39;, &#39;OpenStruct&#39;, &#39;Eager Loading&#39;, &#39;Method Missing&#39;, &#39;Lazy Loading&#39; ],
      [          &#39;0&#39;,    0.000007,     0.000002,        0.000002,         0.000003,       0.000002 ],
      [         &#39;10&#39;,    0.000003,     0.001660,        0.000406,         0.000007,       0.000007 ],
      [        &#39;100&#39;,    0.000008,     0.014470,        0.004800,         0.000029,       0.000029 ],
      [       &#39;1000&#39;,    0.000052,     0.147943,        0.046868,         0.000269,       0.000535 ],
      [      &#39;10000&#39;,    0.000514,     1.507701,        0.482254,         0.003883,       0.002656 ]
    ]);

    var chart = new google.visualization.LineChart(document.getElementById(&#39;chart_creating_initial_object&#39;));
    chart.draw(data, options);
  }

  function _drawFirstMethodCallChart() {
    var data = google.visualization.arrayToDataTable([
      [ &#39;Iterations&#39;, &#39;Pure Hash&#39;, &#39; OpenStruct&#39;, &#39;Eager Loading&#39;, &#39;Method Missing&#39;, &#39;Lazy Loading&#39; ],
      [          &#39;0&#39;,    0.000008,      0.000002,        0.000003,         0.000002,       0.000002 ],
      [         &#39;10&#39;,    0.000003,      0.001660,        0.000406,         0.000007,       0.000007 ],
      [        &#39;100&#39;,    0.000236,      0.328859,        0.103952,         0.003961,       0.009337 ],
      [       &#39;1000&#39;,    0.002248,      3.340419,        1.072228,         0.027261,       0.100895 ],
      [      &#39;10000&#39;,    0.021093,     33.446652,       10.856142,         0.257472,       1.013682 ]
    ]);

    var chart = new google.visualization.LineChart(document.getElementById(&#39;chart_first_method_call&#39;));
    chart.draw(data, options);
  }

  function _drawSubsequentMethodCallsChart() {
    var data = google.visualization.arrayToDataTable([
      [ &#39;Iterations&#39;, &#39;Pure Hash&#39;, &#39; OpenStruct&#39;, &#39;Eager Loading&#39;,  &#39;Method Missing&#39;,  &#39;Lazy Loading&#39; ],
      [     &#39;10,000&#39;,    0.021919,      0.078974,        0.084123,          0.186405,        0.072564 ],
      [    &#39;100,000&#39;,    0.210670,      0.781603,        0.839965,          1.916927,        0.737112 ],
      [  &#39;1,000,000&#39;,    2.155596,      7.977483,        8.513051,         19.288969,        7.400732 ],
      [ &#39;10,000,000&#39;,   21.669286,     76.648551,       80.623932,        188.095461,       72.202056 ]
    ]);

    var chart = new google.visualization.LineChart(document.getElementById(&#39;subsequent_method_calls&#39;));
    chart.draw(data, options);
  }
&lt;/script&gt;
</description>
        <pubDate>Mon, 18 Jun 2012 21:32:00 -0400</pubDate>
        <link>http://technology.customink.com//blog/2012/06/18/profiling-openstruct-eager-loading-method-missing-and-lazy-loading</link>
        <guid isPermaLink="true">http://technology.customink.com//blog/2012/06/18/profiling-openstruct-eager-loading-method-missing-and-lazy-loading</guid>
      </item>
    
      <item>
        <title>Welcome Jason Gilbertson!</title>
        <description>&lt;p&gt;The CustomInk technology team would like welcome Jason Gilbertson.  Jason, a native of Iowa and a graduate of the Georgia Institute of Technology, has relocated himself to McLean, VA to join our team and we couldn&amp;#39;t be more excited.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://technology-customink-com.s3.amazonaws.com/images/jason_gilbertson.jpg&quot; alt=&quot;Jason Gilberston&quot; class=&quot;tb-Img tb-Img--responsive tb-Img--fancy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Like everyone on the CustomInk technology team, Jason was quick to create a &lt;a href=&quot;/blog/2012/05/24/welcome-interns/&quot;&gt;feature branch&lt;/a&gt; and then &lt;a href=&quot;/blog/2012/05/14/welcome-josh-born/&quot;&gt;deploy his first feature&lt;/a&gt; to production.  But there is another important aspect of our continuous deployment strategy that Jason participated in: feature verification.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;When engineers think they are done with the feature, they need to show it to the feature owners.  For internal features, the people who care are our internal business owners.  For customer facing features, our product managers take ownership.  The best way to show a feature to someone is to let them use it.  And the best way to let someone use a feature is to put it on an easily accessible &amp;quot;production like&amp;quot; environment (aka a &amp;#39;Staging Environment&amp;#39;).&lt;/p&gt;

&lt;p&gt;Thanks to the power of &lt;a href=&quot;/blog/2012/05/25/taming-the-kraken-how-operations-enables-developer-productivity/&quot;&gt;Web Ops&lt;/a&gt; we can easily &lt;a href=&quot;/blog/2012/05/25/the-joy-of-cooking-whip-up-a-rails-environment-with-chef/&quot;&gt;whip up a rails environment&lt;/a&gt; any time and any where we please.  With our Chef recipes, we can make use of Amazon Web Services to spin up temporary staging environments and give them friendly URL&amp;#39;s that are easy for our feature owners to remember.  For instance, if feature branch is named &amp;quot;color_picker&amp;quot;, the URL for the staging server would be &amp;quot;color-picker.staging.ci.com&amp;quot;.&lt;/p&gt;

&lt;p&gt;When a feature is &amp;quot;done&amp;quot;, we stage it, drop a note in the ticket&amp;#39;s comments indicating the staged URL, and then move on to the next ticket.  If there is feedback about the feature, we can easily make the changes and redeploy the branch to the staging environment.  Once the ticket is verified, we tear down the staging environment and deploy the feature to production.&lt;/p&gt;

&lt;p&gt;Putting the new feature in a staging environment lets us do a few things.  First, it makes us more confident that our code can be deployed in a repeatable fashion (no surprises when we go to production).  Second, it let&amp;#39;s more than one person use the feature at a time.  Lastly, it removes the necessity for people to &amp;quot;get together&amp;quot; to review changes.&lt;/p&gt;

&lt;p&gt;Since we work on tickets one at a time, we can follow a simple process to continuously deploy new features to our site and tools:  Branch, build, verify, deploy.&lt;/p&gt;
</description>
        <pubDate>Fri, 15 Jun 2012 10:47:00 -0400</pubDate>
        <link>http://technology.customink.com//blog/2012/06/15/welcome-jason-gilbertson</link>
        <guid isPermaLink="true">http://technology.customink.com//blog/2012/06/15/welcome-jason-gilbertson</guid>
      </item>
    
      <item>
        <title>Introducing Stoplight: Greenscreen 2.0</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://technology-customink-com.s3.amazonaws.com/images/stoplight.png&quot;&gt;&lt;img src=&quot;http://technology-customink-com.s3.amazonaws.com/images/stoplight.png&quot; class=&quot;tb-Img tb-Img--responsive tb-Img--fancy&quot; /&gt;&lt;/a&gt;
At CustomInk, we use a variety of tools to monitor the status of our builds. One such tool was &lt;a href=&quot;https://github.com/customink-webops/greenscreen&quot;&gt;Greenscreen&lt;/a&gt;. In fact, we even wrote &lt;a href=&quot;/blog/2012/01/02/green-screen/&quot;&gt;a blog post about how we use Greenscreen at CustomInk&lt;/a&gt; not too long ago.&lt;/p&gt;

&lt;p&gt;One of the biggest problems with Greenscreen was its extensibility. By default, Greenscreen only works with Hudson and Jenkins servers. With &lt;a href=&quot;http://travis-ci.org&quot;&gt;Travis CI&lt;/a&gt; becoming quite popular in the open-source community, Greenscreen needed a major upgrade. Furthermore, Greenscreen was not very extensible.&lt;/p&gt;

&lt;p&gt;After some significant refactoring, Greenscreen evolved into &lt;a href=&quot;https://github.com/customink/stoplight&quot;&gt;Stoplight&lt;/a&gt;...&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;significant-improvements&quot;&gt;Significant Improvements&lt;/h2&gt;

&lt;p&gt;There are a number of improvements in Stoplight. These are the most critical or useful to the end-user:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Support for multiple (any) continuous integration server&lt;/li&gt;
&lt;li&gt;Highly configurable yaml files&lt;/li&gt;
&lt;li&gt;Cross-browser beautiful UI&lt;/li&gt;
&lt;li&gt;More informative build statuses&lt;/li&gt;
&lt;li&gt;Extensibility&lt;/li&gt;
&lt;li&gt;Usability&lt;/li&gt;
&lt;li&gt;Full test suite&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;refactoring&quot;&gt;Refactoring&lt;/h2&gt;

&lt;p&gt;Originally, I was just going to add Travis CI support to Greenscreen. However, I quickly asked myself, &amp;quot;why stop at Travis CI?&amp;quot;; we should allow developers to connect Greenscreen to any continuous integration server. After cleaning up the code a bit, I introduced the concept of a &lt;code&gt;Provider&lt;/code&gt;. Simply put, a &lt;code&gt;Provider&lt;/code&gt; is an abstract Ruby class that maps server-data into Greenscreen data. It looks like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Provider is an abstract class that all providers inherit from. It requires that a specified format be returned. This way, stoplight&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# doesn&#39;t care who it&#39;s talking to, as long as it guarantees certain information.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Stoplight::Providers&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Provider&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:response&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Initializes a hash `@options` of default options&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# `projects` must return an array of Stoplight::Project&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# see Stoplight::Project for more information on the spec&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;projects&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On the front-end, now we don&amp;#39;t have to worry about parsing different server responses; we know that any provider will respond to the &lt;code&gt;Provider#projects&lt;/code&gt; instance method. This makes refactoring our front-end code much easier.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Stoplight::Project&lt;/code&gt; clearly defines a schema and method-set that must be adhered to. In the front-end, we can simply call &lt;code&gt;.projects&lt;/code&gt; on any provider and know with 100% certainty that the given objects respond to a certain set of methods. Those methods are defined in the &lt;code&gt;Stoplight::Project&lt;/code&gt; class:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Stoplight&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Project&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;attr_accessor&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:build_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:last_build_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:last_build_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:last_build_status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:current_status&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Initialize (new) takes in a hash of options in the following format:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# {&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#   :name =&amp;gt; &#39;my_project&#39;,&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#   :build_url =&amp;gt; &#39;http://ci.jenkins.org/job/my_project&#39;,&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#   :web_url =&amp;gt; &#39;http://github.com/username/my_project&#39;, # optional&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#   :last_build_id =&amp;gt; &#39;7&#39;,&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#   :last_build_time =&amp;gt; &#39;2012-05-24T03:19:53Z&#39;,&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#   :last_build_status =&amp;gt; 0,&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#   :current_status =&amp;gt; 1,&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# }&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# - `name` - the name of this project&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# - `build_url` - the url where the build came from&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# - `build_id` - the unique build_id for this project&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# - `last_build_time` - last successful build&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# - `last_build_status` - integer representing the exit code of the last build:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#   - -1: unknown&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#   -  0: passed (success)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#   -  1: failed (error, failure)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# - `current_status` - the current status of the build:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#   - -1: unknwon&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#   -  0: done (sleeping, waiting)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#   -  1: building (building, working, compiling)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This set of simple instructions tells a provider how it must format data. Essentially this makes &lt;code&gt;Provider&lt;/code&gt; a micro-data-mapper, massaging data from remote APIs into a standard format. Stoplight then uses that standard format to create a unified user experience.&lt;/p&gt;

&lt;h3 id=&quot;adding-tests&quot;&gt;Adding Tests&lt;/h3&gt;

&lt;p&gt;Since Stoplight is destined to become an open-source project, it needs a comprehensive test suite. Furthermore, during our refactoring, it&amp;#39;s important that we don&amp;#39;t break existing functionality. As such, I added a full test suite with RSpec. To make development easier, I also use Spork, Guard, and Growl-Ruby to automatically run tests in the background while I&amp;#39;m coding. This makes TDD much more exciting.&lt;/p&gt;

&lt;h3 id=&quot;foreman&quot;&gt;Foreman&lt;/h3&gt;

&lt;p&gt;With all those dependencies, plus running the server, it only made sense to use &lt;a href=&quot;https://github.com/ddollar/foreman&quot;&gt;Foreman&lt;/a&gt; to manage all those processes. What used to be (in three different terminal tabs):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;bundle exec shotgun -p 4567
bundle exec compass watch -c config/compass.rb
bundle exec guard
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;simply became:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;bundle exec foreman start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;with a tiny &lt;code&gt;Procfile&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;web:      shotgun -p 4567
compass:  compass watch -c config/compass.rb
guard:    guard
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;compass&quot;&gt;Compass&lt;/h3&gt;

&lt;p&gt;Under the hood, all the styles for Stoplight are generated by a framework called &lt;a href=&quot;http://compass-style.org&quot;&gt;Compass&lt;/a&gt;. Compass allows us to leverage the power of SCSS and easily create a cross-browser compliant application. Stoplight uses Compass and SCSS for all it&amp;#39;s styles. This ensures a consistent user experience.&lt;/p&gt;

&lt;h3 id=&quot;abap-text&quot;&gt;ABAP Text&lt;/h3&gt;

&lt;p&gt;ABAP stands for &amp;quot;As Big As Possible&amp;quot;. A tiny snippet of jQuery dynamically sizes text to fit in its bounds. Whether you&amp;#39;re displaying on a 60&amp;quot; LED TV or a 13&amp;quot; Monitor, the text will be as big and clear as possible.&lt;/p&gt;

&lt;h3 id=&quot;adding-travis&quot;&gt;Adding Travis&lt;/h3&gt;

&lt;p&gt;Brace yourself for a meta-moment. Since I wanted Stoplight to become a popular open-source project, I added the build on Travis CI. With &lt;a href=&quot;http://travis-ci.org/#!/customink/stoplight&quot;&gt;Stoplight on Travis CI&lt;/a&gt; we can use Stoplight to monitor the build status of Stoplight.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;There you have it! What was once a very isolated and less-than-configurable tool is now highly extensible and open to contributions by the community. If you are currently using Greenscreen or another build monitoring alternative, give Stoplight a try.&lt;/p&gt;

&lt;h2 id=&quot;i-want-it!&quot;&gt;I Want it!&lt;/h2&gt;

&lt;p&gt;Stoplight is available for &lt;a href=&quot;https://github.com/customink/stoplight&quot;&gt;download and forking on github&lt;/a&gt;. Pull requests are greatly welcome! There is also a highly-configurable &lt;a href=&quot;https://github.com/customink-webops/stoplight&quot;&gt;chef cookbook for installing Stoplight&lt;/a&gt; on Apache and Passenger on your own servers.&lt;/p&gt;
</description>
        <pubDate>Tue, 12 Jun 2012 17:48:00 -0400</pubDate>
        <link>http://technology.customink.com//blog/2012/06/12/introducing-stoplight-greenscreen-2-dot-0</link>
        <guid isPermaLink="true">http://technology.customink.com//blog/2012/06/12/introducing-stoplight-greenscreen-2-dot-0</guid>
      </item>
    
      <item>
        <title>MVT:  Foodcritic and Travis CI</title>
        <description>&lt;p&gt;One of the big themes that emerged during &lt;a href=&quot;http://chefconf.opscode.com/&quot;&gt;#ChefConf&lt;/a&gt; was that we should be testing our infrastructure code.  Software engineers have been practicing test-driven development, behavior-driven development, continuous integration, and many other testing-related practices for a long time.  It&amp;#39;s becoming more important for the infrastructure engineers to learn from and apply these practices to our day-to-day workflow.  When it comes to testing Chef-driven infrastructure automation, there are a number of tools and practices that are starting to emerge.  In this article I&amp;#39;ll look at a &amp;quot;minimum viable testing&amp;quot; (MVT) approach to this problem using &lt;a href=&quot;http://acrmp.github.com/foodcritic/&quot;&gt;Foodcritic&lt;/a&gt; and &lt;a href=&quot;http://travis-ci.org/&quot;&gt;Travis CI&lt;/a&gt;.  &lt;a href=&quot;/blog/2012/06/04/mvt-foodcritic-and-travis-ci/#steps&quot;&gt;Follow the steps in this article&lt;/a&gt; to get your public cookbooks tested after every &lt;code&gt;git push&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;testing-with-chef&quot;&gt;Testing with Chef&lt;/h3&gt;

&lt;p&gt;The idea of building automated tests for your infrastructure code has been getting a lot of traction lately.  When it comes to &lt;a href=&quot;http://www.opscode.com/chef/&quot;&gt;Chef&lt;/a&gt;, many tools are starting to emerge.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;The first tool in this area to get any significant traction, that I know of, was &lt;a href=&quot;http://www.cucumber-chef.org/&quot;&gt;cucumber-chef&lt;/a&gt;.  I first learned of this tool when I saw a pre-release copy of &lt;a href=&quot;http://shop.oreilly.com/product/0636920020042.do&quot;&gt;Test-Driven Infrastructure with Chef&lt;/a&gt; at the O&amp;#39;Reilly booth at &lt;a href=&quot;http://velocityconf.com/velocity2011&quot;&gt;Velocity Conf 2011&lt;/a&gt;.  &lt;a href=&quot;http://twitter.com/lordcope&quot;&gt;Stephen Nelson-Smith&lt;/a&gt;, the book&amp;#39;s author and framework&amp;#39;s lead developer, proposes an outside-in approach to testing where your tests can also act as monitors that look after the health of your infrastructure.  I like the idea of this approach and feel it makes a lot of sense in a greenfield environment.  One benefit of this approach is that it blurs the line between testing and monitoring.  You can easily hook-up your monitoring system to your cucumber tests.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/acrmp/chefspec&quot;&gt;ChefSpec&lt;/a&gt; is another tool for testing your Chef code.  It is a gem that makes it easy to write &lt;a href=&quot;http://rspec.info/&quot;&gt;RSpec&lt;/a&gt; examples for Chef cookbooks.  This style of testing allows you to execute your tests without needing to converge the node that your tests are running on.  In other words, you can execute your tests without needing to provision a server.  One huge appeal to this style of testing is that the feedback loop is very small.  You&amp;#39;ll get feedback about your cookbook changes within seconds or a very few minutes of saving your changes.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/calavera/minitest-chef-handler&quot;&gt;Minitest Chef Handler&lt;/a&gt; is yet another tool for testing with Chef.  This runs a suite of &lt;a href=&quot;https://github.com/seattlerb/minitest&quot;&gt;minitest&lt;/a&gt; tests as a report handler in your Chef-managed nodes.  As you may know, report handlers are run at the end of each &lt;a href=&quot;http://wiki.opscode.com/display/chef/Anatomy+of+a+Chef+Run&quot;&gt;chef run, or convergence&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;testing-at-chefconf&quot;&gt;Testing at ChefConf&lt;/h3&gt;

&lt;p&gt;At the inaugural &lt;a href=&quot;http://chefconf.opscode.com&quot;&gt;#ChefConf&lt;/a&gt; there were many sessions that included information about many companies&amp;#39; approach to testing.  Here&amp;#39;s a quick list of some of the sessions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.foodfightshow.org/2012/04/episode-10-testallthethings-testing.html&quot;&gt;Food Fight Show Episode #10 - TESTALLTHETHINGS&lt;/a&gt; -- This wasn&amp;#39;t actually part of #ChefConf but is &amp;#39;required listening&amp;#39; for anyone interested in learning more about this space.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://chefconf2012.sched.org/event/bfe13edac99e2b4d8582f0cd1005ee73?iframe=no&amp;amp;w=700&amp;amp;sidebar=no&amp;amp;bg=no&quot;&gt;#ChefConf Pre-event Hackday: TEST ALL THE THINGS!!!&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/atomic-penguin/ntp&quot;&gt;NTP Cookbook with tests&lt;/a&gt; - tests were added to this cookbook as part of the hackday event.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=o2e0aZUAVGw&quot;&gt;Test-driven Development for Chef Practitioners&lt;/a&gt; (video)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=dPaYfAIvqxw&quot;&gt;Test Driven Development Roundtable&lt;/a&gt; (video)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;foodcritic&quot;&gt;Foodcritic&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://acrmp.github.com/foodcritic/&quot;&gt;Foodcritic&lt;/a&gt; is a lint tool for your Chef cookbooks.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Foodcritic has two goals:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;To make it easier to flag problems in your Chef cookbooks that will cause Chef to blow up when you attempt to converge. This is about faster feedback. If you automate checks for common problems you can save a lot of time.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To encourage discussion within the Chef community on the more subjective stuff - what does a good cookbook look like? Opscode have avoided being overly prescriptive which by and large I think is a good thing. Having a set of rules to base discussion on helps drive out what we as a community think is good style.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;why-start-with-foodcritic?&quot;&gt;Why start with Foodcritic?&lt;/h4&gt;

&lt;p&gt;Given the plethora of options available, why should you start with Foodcritic?  Well, you have to start somewhere.  We felt Foodcritic was a good choice because it was easy to get started with, the tests ran quickly, and we are working under the assumption that once we started some automated testing, we&amp;#39;ll start layering on more and more pieces as we go.  After some initial experiments, we found that we could get Foodcritic looking after our each cookbook in a matter of minutes and local tests running in seconds.&lt;/p&gt;

&lt;p&gt;The pseudo-converge approaches (like ChefSpec) initially feel like we&amp;#39;ll need to do a lot of mocking that will take some time to get correct.  The post-converge approaches (like cucumber-chef and minitest) will take longer to run and are a bit more complex.&lt;/p&gt;

&lt;p&gt;One benefit of the post-converge approach is the ability to use your tests as health monitors.  We already have monitoring in place and use it as an indicator that a node is fully provisioned.  We call this &amp;quot;monitor-driven development.&amp;quot;  Given that, it was better for us to get started with something that runs without requiring a full converge.  Foodcritic fit the bill quite nicely.&lt;/p&gt;

&lt;h3 id=&quot;travis-ci&quot;&gt;Travis CI&lt;/h3&gt;

&lt;p&gt;Travis CI is:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A hosted continuous integration service for the open source community.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Using Travis CI in conjunction with Foodcritic, we&amp;#39;d have a basic automated test foundation to build on.&lt;/p&gt;

&lt;h3 id=&quot;automated-foodcritic-tests-with-travis-ci-&quot;&gt;Automated Foodcritic tests with Travis CI &lt;a name=&quot;steps&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Using Foodcritic and Travis CI, you can quickly set-up a &amp;quot;minimum viable testing&amp;quot; (MVT) environment.  The idea is that once you have some sort of tests running against your cookbooks, you&amp;#39;ll want to add more and doing so will be easy.  Let&amp;#39;s look at how to add Foodcritic and Travis CI to your cookbook workflow.&lt;/p&gt;

&lt;h4 id=&quot;initial-set-up&quot;&gt;Initial set-up&lt;/h4&gt;

&lt;p&gt;Follow these steps to get everything set-up and ready for your first tests:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;gem install foodcritic&lt;/code&gt;&lt;/li&gt;
&lt;li&gt; Go to &lt;a href=&quot;http://travis-ci.org/&quot;&gt;Travis CI&lt;/a&gt; and follow the Sign In link at the top.&lt;/li&gt;
&lt;li&gt; Activate the GitHub Service Hook for your cookbook&amp;#39;s repository from your TravisCI profile page.  Each of your cookbooks has its own repository, right?!&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;configure-your-project&quot;&gt;Configure your project&lt;/h4&gt;

&lt;p&gt;The next step is to add a .travis.yml file to your project.&lt;/p&gt;

&lt;p&gt;``` ruby .travis.yml
language: ruby
gemfile:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;test/support/Gemfile
rvm:

&lt;ul&gt;
&lt;li&gt;1.9.2&lt;/li&gt;
&lt;li&gt;1.9.3
script: bundle exec rake foodcritic
```&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This file tells Travis CI how to build your project.  We&amp;#39;ve specified the language (ruby) and the versions of ruby to use when testing this cookbook (1.9.2 and 1.9.3).  We&amp;#39;ve also specified a Gemfile and script to execute when testing this project.  Let&amp;#39;s add a Gemfile to a new directory in our cookbook, &lt;code&gt;test/support&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;mkdir -p &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;/support
touch &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;/support/Gemfile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Our Gemfile is pretty simple, just include &lt;code&gt;rake&lt;/code&gt; and &lt;code&gt;foodcritic&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;``` ruby Gemfile
source &amp;quot;&lt;a href=&quot;https://rubygems.org&quot;&gt;https://rubygems.org&lt;/a&gt;&amp;quot;&lt;/p&gt;

&lt;p&gt;gem &amp;#39;rake&amp;#39;
gem &amp;#39;foodcritic&amp;#39;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;
Finally, we&#39;ll need to add a Rake file that will be run each time Travis builds our project.

``` ruby Rakefile
#!/usr/bin/env rake

desc &quot;Runs foodcritic linter&quot;
task :foodcritic do
  if Gem::Version.new(&quot;1.9.2&quot;) &amp;lt;= Gem::Version.new(RUBY_VERSION.dup)
    sandbox = File.join(File.dirname(__FILE__), %w{tmp foodcritic cookbook})
    prepare_foodcritic_sandbox(sandbox)

    sh &quot;foodcritic --epic-fail any #{File.dirname(sandbox)}&quot;
  else
    puts &quot;WARN: foodcritic run is skipped as Ruby #{RUBY_VERSION} is &amp;lt; 1.9.2.&quot;
  end
end

task :default =&amp;gt; &#39;foodcritic&#39;

private

def prepare_foodcritic_sandbox(sandbox)
  files = %w{*.md *.rb attributes definitions files libraries providers
recipes resources templates}

  rm_rf sandbox
  mkdir_p sandbox
  cp_r Dir.glob(&quot;{#{files.join(&#39;,&#39;)}}&quot;), sandbox
  puts &quot;\n\n&quot;
end

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This Rakefile will copy the contents of our cookbook to a temporary directory and run the foodcritic tests on the temporary directory.  Note the &lt;code&gt;--epic-fail&lt;/code&gt; tag is used to fail the build (return a non-zero exit code) on &lt;code&gt;any&lt;/code&gt; rule that does not pass.&lt;/p&gt;

&lt;p&gt;That&amp;#39;s it!  When you push your commit to github, you should see Travis CI pick-up the changes, run your build, and report on status.&lt;/p&gt;

&lt;h3 id=&quot;share-your-build-status&quot;&gt;Share Your Build Status&lt;/h3&gt;

&lt;p&gt;One final step that you may consider is adding a build status indicator to your README.  This simple line in your README will let others know what the current build status is for your cookbook.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;![Build Status]&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;https://secure.travis-ci.org/[YOUR_GITHUB_USERNAME]/[YOUR_PROJECT_NAME].png&lt;span class=&quot;o&quot;&gt;)](&lt;/span&gt;http://travis-ci.org/[YOUR_GITHUB_USERNAME]/[YOUR_PROJECT_NAME]&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;thanks-&amp;amp;-additional-resources&quot;&gt;Thanks &amp;amp; Additional Resources&lt;/h3&gt;

&lt;p&gt;A big &amp;quot;Thank You!&amp;quot; shout-out to &lt;a href=&quot;https://twitter.com/fnichol&quot;&gt;Fletcher Nichol&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/atomic_penguin&quot;&gt;Eric G. Wolfe&lt;/a&gt; from whom I &amp;#39;borrowed&amp;#39; the &lt;code&gt;Rakefile&lt;/code&gt; and &lt;code&gt;.travis.yml&lt;/code&gt; used in this post.&lt;/p&gt;

&lt;p&gt;More information on Foodcritic and Travis CI can be found here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://acrmp.github.com/foodcritic/&quot;&gt;Foodcritic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://about.travis-ci.org/docs/user/getting-started/&quot;&gt;Travis CI: Getting started guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://about.travis-ci.org/docs/user/status-images/&quot;&gt;Travis CI: Status Images&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;next-post&quot;&gt;Next Post&lt;/h3&gt;

&lt;p&gt;Be sure to read the next post on this topic:  &lt;a href=&quot;/blog/2012/07/06/mvt-knife-test-and-travisci/&quot;&gt;MVT: knife test and Travis CI&lt;/a&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;sub&gt;Reposted from &lt;a href=&quot;http://nathenharvey.com/blog/2012/05/29/mvt-foodcritic-and-travis-ci/&quot;&gt;Nathen Harvey&amp;#39;s blog&lt;/a&gt;&lt;sub&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 04 Jun 2012 13:45:00 -0400</pubDate>
        <link>http://technology.customink.com//blog/2012/06/04/mvt-foodcritic-and-travis-ci</link>
        <guid isPermaLink="true">http://technology.customink.com//blog/2012/06/04/mvt-foodcritic-and-travis-ci</guid>
      </item>
    
      <item>
        <title>Provision your laptop with Chef: Part 1</title>
        <description>&lt;p&gt;If you have ever tried to follow the &lt;a href=&quot;http://wiki.opscode.com/display/chef/Getting+Started&quot;&gt;Opscode Getting Started Guide for Chef&lt;/a&gt;, you&amp;#39;ll quickly be overtaken by Chef jargon, confusing instructions, many assumptions, and no clear direction. Even the most experienced developers had a difficult time following the Opscode Wiki. While it serves as a great reference resource, you pretty much have to know Chef before it is of any use.&lt;/p&gt;

&lt;p&gt;In Part 1 of this 2-part series, we will walk through setting up the Chef environment on your local machine. In Part 2, we will demonstrate how to provision your personal laptop using Chef.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;what-is-chef?&quot;&gt;What is Chef?&lt;/h2&gt;

&lt;p&gt;One of the best things about Chef is that it is idempotent. Unlike a simple bash script or complex startup script, Chef can be applied to the same machine hundreds of times. Only the &amp;quot;changes&amp;quot; will be executed on each of the clients. This makes deploying and updating thousands of machines as easy as baking a cake!&lt;/p&gt;

&lt;h2 id=&quot;understanding-chef-&amp;amp;-jargon&quot;&gt;Understanding Chef &amp;amp; Jargon&lt;/h2&gt;

&lt;p&gt;One of the most interesting and confusing parts about Chef is its lingo. Everything relates to &lt;strong&gt;food&lt;/strong&gt;. Be sure to grab a snack before diving in any further.&lt;/p&gt;

&lt;h3 id=&quot;architecture&quot;&gt;Architecture&lt;/h3&gt;

&lt;p&gt;One of the most dangerous practices when using Chef is applying prior knowledge. In Chef, everything is named relative to Chef. This means, even though your are provisioning a production &lt;em&gt;server&lt;/em&gt;, it&amp;#39;s still a Chef &lt;em&gt;client&lt;/em&gt;. This can be very confusing at first, but once you start thinking in terms of Chef things will begin to make sense.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;(Chef) Server&lt;/code&gt; [aka hosted chef] - refers a machines that stores cookbooks, roles, and other Chef configurations&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(Chef) Client&lt;/code&gt; [aka node] - refers to a machine that connects to and is managed by a Chef Server&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(Chef) Workstation&lt;/code&gt; - refers to a machine where recipes are developed, altered, deleted, and more&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is the most simplistic picture. It&amp;#39;s possible for a single machine to exist in all three of these roles simultaneously! There are subsets of Chef, such as &lt;a href=&quot;http://wiki.opscode.com/display/chef/Chef+Solo&quot;&gt;Chef-Solo&lt;/a&gt;, but those will not be discussed here.&lt;/p&gt;

&lt;p&gt;A typical scenario begins at the workstation. A developer creates a cookbook, role, or other artifact on the local machine. When finished, that artifact is uploaded to the Chef Server. The Chef Clients receive these (new) instructions and execute them locally.&lt;/p&gt;

&lt;h3 id=&quot;jargon&quot;&gt;Jargon&lt;/h3&gt;

&lt;p&gt;We&amp;#39;ve also been throwing around some other terms that we should take a second to define:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cookbook&lt;/code&gt; - collection of recipe, resources, attributes, templates, metadata, and other files&lt;/li&gt;
&lt;li&gt;&lt;code&gt;recipe&lt;/code&gt; - a set of instructions written in a Ruby DSL that tells a node what commands to execute&lt;/li&gt;
&lt;li&gt;&lt;code&gt;metadata&lt;/code&gt; - additional information, such as dependencies, for a given cookbook&lt;/li&gt;
&lt;li&gt;&lt;code&gt;resource&lt;/code&gt; - cross-platform abstraction of the &amp;quot;thing&amp;quot; you&amp;#39;re configuring such as a package or a user&lt;/li&gt;
&lt;li&gt;&lt;code&gt;provider&lt;/code&gt; - a platform-specific implementation of a resource&lt;/li&gt;
&lt;li&gt;&lt;code&gt;data bag&lt;/code&gt; - JSON key-value store for storing data, attributes, and more&lt;/li&gt;
&lt;li&gt;&lt;code&gt;environment&lt;/code&gt; - provide a mechanism for managing different deployment locations such as production, staging, development, and testing&lt;/li&gt;
&lt;li&gt;&lt;code&gt;template&lt;/code&gt; - a file (like a config file) to be &amp;quot;rendered&amp;quot; on the server&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are also a few tools:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;knife&lt;/code&gt; - a command line tool for managing chef and chef recipes&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shef&lt;/code&gt; - chef console. this is the equivalent of &lt;code&gt;rails console&lt;/code&gt; for chef&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Before continuing, please make sure you understand that these are very over-simplified definitions and abstractions. Chef is much more powerful that these simplistic definitions allow.&lt;/p&gt;

&lt;h2 id=&quot;set-up-your-opscode-account&quot;&gt;Set up your Opscode Account&lt;/h2&gt;

&lt;p&gt;For the purposes of this tutorial, we will use Chef Hosted by Opscode (the creators of Chef). The service provides 5 free nodes for use. Go ahead and create your free account by heading over to the &lt;a href=&quot;https://community.opscode.com/users/new&quot;&gt;Hosted Chef Signup page&lt;/a&gt;. You should see something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://technology-customink-com.s3.amazonaws.com/images/hosted-chef-signup.png&quot; alt=&quot;Hosted Chef Signup page&quot; class=&quot;tb-Img tb-Img--responsive-ctr tb-Img--fancy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You&amp;#39;ll need to confirm your email, but once that&amp;#39;s done, head on over to the &lt;a href=&quot;https://manage.opscode.com/organizations&quot;&gt;Opscode Management Console&lt;/a&gt;. It really doesn&amp;#39;t matter what you call your organization - I used the same as my username. You should see a screen like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://technology-customink-com.s3.amazonaws.com/images/hosted-chef-management-console.png&quot; alt=&quot;Hosted Chef Management Console&quot; class=&quot;tb-Img tb-Img--responsive-ctr tb-Img--fancy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You probably only have one organization, but the image should give you a good idea. First thing you&amp;#39;ll want to do is &lt;strong&gt;Regenerate validation key&lt;/strong&gt; and &lt;strong&gt;Generate knife config&lt;/strong&gt;. We will talk about this more in detail, but save these files in a handy place for later. These files should always be kept securely.&lt;/p&gt;

&lt;p&gt;Also, if you didn&amp;#39;t get your private key when registering, you should do that now (for some reason, Opscode does not always stream the key). Go to the &lt;a href=&quot;http://community.opscode.com/&quot;&gt;Opscode Community Site&lt;/a&gt; and login (if you aren&amp;#39;t already). Click on your profile and then choose &lt;strong&gt;get private key&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://technology-customink-com.s3.amazonaws.com/images/chef-community-user.png&quot; alt=&quot;Chef Community User&quot; class=&quot;tb-Img tb-Img--responsive-ctr tb-Img--fancy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At this point you should have the following files:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;[your_organization_name]-validator.pem
[your_username].pem
knife.rb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For example, mine would be:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;ci-validator.pem
sethvargo.pem
knife.rb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Sometimes Opscode doesn&amp;#39;t stream the correct files, so you may need to do some renaming:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;_knife_config   #=&amp;gt; knife.rb
_regenerate_key #=&amp;gt; [your_organization_name]-validator.pem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;install-ruby,-chef,-and-git&quot;&gt;Install Ruby, Chef, and Git&lt;/h2&gt;

&lt;p&gt;Chef is written in Ruby. Therefore, you must have Ruby installed. Installing Ruby is beyond the scope of this topic, but here are some quick resources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://rubyinstaller.org/&quot;&gt;Ruby Installer for Windows&lt;/a&gt; (also install the &lt;a href=&quot;https://github.com/oneclick/rubyinstaller/wiki/development-kit&quot;&gt;Development Kit&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rvm.io/&quot;&gt;Installing Ruby with rvm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sstephenson/rbenv&quot;&gt;Installing Ruby with rbenv&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You should also install &lt;code&gt;git&lt;/code&gt;. Check out the &lt;a href=&quot;http://help.github.com/set-up-git-redirect&quot;&gt;Github tutorial for installing git&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once you have Ruby and Git installed, you&amp;#39;ll need to install chef:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;gem install chef
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This command will install the Chef gem as well as some other dependencies.&lt;/p&gt;

&lt;p&gt;A this point, you should have a novice understand of Chef and Chef Jargon, have an account on Opscode Hosted Chef, and have a working version of Ruby, Git, and the Chef gem installed. The rest of this guide will assume you have completed all those steps correctly.&lt;/p&gt;

&lt;h2 id=&quot;setup-your-workstation&quot;&gt;Setup your Workstation&lt;/h2&gt;

&lt;p&gt;Find a working directory on your local machine where you plan to store your Chef cookbooks. For this tutorial, we will use &lt;code&gt;~/Development&lt;/code&gt;. You&amp;#39;ll need a skeleton chef repository. You could make your own or clone the Opscode one:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;git clone git@github.com:opscode/chef-repo.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Take a few minutes to poke around the repository. You definitely won&amp;#39;t understand everything, but look at a few READMEs (in subdirectories).&lt;/p&gt;

&lt;p&gt;Inside the &lt;code&gt;chef-repo&lt;/code&gt; directory (&lt;code&gt;~/Development/chef-repo&lt;/code&gt;), we need to create a hidden folder named &lt;code&gt;.chef&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;cd ~/Development/chef-repo
mkdir .chef
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is where you should put the files we downloaded earlier:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;mv [location]/[your_username].pem ~/Development/chef-repo/.chef/
mv [location]/[your_organization_name].pem ~/Development/chef-repo/.chef/
mv [location]/knife.rb ~/Development/chef-repo/.chef/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For my case, it would be:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;mv ~/Desktop/sethvargo.pem ~/Development/chef-repo/.chef/
mv ~/Desktop/ci-validator.pem ~/Development/chef-repo/.chef/
mv ~/Desktop/knife.rp ~/Development/chef-repo/.chef/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To confirm everything is working, try and list all the clients (it should be empty):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;knife client list
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If this command succeeds without error, everything is set up correctly!&lt;/p&gt;

&lt;p&gt;This concludes setting up your workstation. Now we are ready to create our first cookbook.&lt;/p&gt;

&lt;h2 id=&quot;create-your-first-cookbook&quot;&gt;Create your first cookbook&lt;/h2&gt;

&lt;p&gt;Wash your hands, put on your Chef&amp;#39;s Hat, and get ready to bake! We are going to create your very first cookbook. The cookbook will be very simple and is more for demonstrating working with &lt;code&gt;knife&lt;/code&gt; and &lt;code&gt;chef-client&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Our cookbook will be named &amp;quot;hello world&amp;quot;. Let&amp;#39;s start by using &lt;code&gt;knife&lt;/code&gt; to create our cookbook skeleton:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;cd ~/Development/chef-repo
knife cookbook create hello_world
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You should see the following output:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;** Creating cookbook hello_world
** Creating README for cookbook: hello_world
** Creating metadata for cookbook: hello_world
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Open up the project in your favorite text editor and look inside the &lt;code&gt;cookbooks&lt;/code&gt; directory. You should see the following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://technology-customink-com.s3.amazonaws.com/images/chef-cookbook-structure.png&quot; alt=&quot;Chef Cookbook Structure&quot; class=&quot;tb-Img tb-Img--responsive-ctr tb-Img--fancy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This cookbook will create a file &lt;code&gt;~/hello_world.txt&lt;/code&gt; that says &amp;quot;Hello World!&amp;quot;.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s first make the template. A template is like the &amp;quot;view&amp;quot; of MVC. It has access to instance variables and uses embedded ruby. Inside the &lt;code&gt;templates/default&lt;/code&gt; directory, create a new file named &lt;code&gt;hello-world.txt.erb&lt;/code&gt; and add some content:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-erb&quot; data-lang=&quot;erb&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# templates/default/hello-world.txt.erb &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;
Hello World!

Chef Version: &lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:chef_packages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:chef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;
Platform: &lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:platform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;
Version: &lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:platform_version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can see we are referencing a &lt;code&gt;node&lt;/code&gt; variable. This refers to the current client that Chef is running on.&lt;/p&gt;

&lt;p&gt;Now we need to create the actual recipe with instructions. You can think of the recipe as the &amp;quot;controller&amp;quot; of MVC. Open up the &lt;code&gt;recipes/default.rb&lt;/code&gt; file and add the following:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# recipes/default.rb&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;HOME&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/hello-world.txt&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;hello-world.txt.erb&#39;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;0644&#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;template&lt;/code&gt; keyword is a resource like we defined before. It tells the recipe to render the given template source to the given file. We also specify the file permissions using &lt;code&gt;mode&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;That&amp;#39;s it! Our cookbook is done and ready to be uploaded to Hosted Chef. We will use the &lt;code&gt;knife&lt;/code&gt; command to do this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;knife cookbook upload hello_world
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You should see output like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;Uploading hello_world             [0.0.1]
Uploaded 1 cookbook.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you get a message like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;WARNING: No knife configuration file found
ERROR: Your private key could not be loaded from /etc/chef/client.pem
Check your configuration file and ensure that your private key is readable
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;it means that your key is invalid. Regenerate your personal and/or organization keys and ensure everything is placed in the correct directories.&lt;/p&gt;

&lt;p&gt;Our cookbook is now on Hosted Chef and ready to be distributed to our nodes. Chef doesn&amp;#39;t automatically tell nodes to update. You can do this with a cron job, running &lt;code&gt;chef-client&lt;/code&gt; as a service, or by running &lt;code&gt;chef-client&lt;/code&gt; manually on any node.&lt;/p&gt;

&lt;p&gt;For simplicity, let&amp;#39;s just run this on our local workstation. Let&amp;#39;s set up the local workstation as a client. Run the following command from the inside the repository:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;sudo knife configure client /etc/chef
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you&amp;#39;re using &lt;code&gt;rvm&lt;/code&gt;, use the &lt;code&gt;rvmsudo&lt;/code&gt; command prefix:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;rvmsudo knife configure client /etc/chef
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You should see output like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;Creating client configuration
Writing client.rb
Writing validation.pem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That&amp;#39;s it! Your workstation is now a client. Let&amp;#39;s provision this server by running &lt;code&gt;chef-client&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;sudo chef-client
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or with RVM:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;rvmsudo chef-client
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You should see output like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;INFO: *** Chef 0.10.10 ***
INFO: Client key /etc/chef/client.pem is not present - registering
INFO: Run List is []
INFO: Run List expands to []
INFO: Starting Chef Run for NODE
INFO: Running start handlers
INFO: Start handlers complete.
INFO: Loading cookbooks []
WARN: Node NODE has an empty run list.
INFO: Chef Run complete in 0.988165 seconds
INFO: Running report handlers
INFO: Report handlers complete
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Take a look inside your &lt;code&gt;$HOME&lt;/code&gt; directory and see if the &lt;code&gt;hello-word.txt&lt;/code&gt; file was created...&lt;/p&gt;

&lt;p&gt;It doesn&amp;#39;t appear the file was created. We must have done something wrong! Actually, we did everything correctly. We just forgot one step - we never &lt;strong&gt;told&lt;/strong&gt; our node to execute the recipe we just wrote. By default, Chef does not execute any of your recipes. You must explicitly require them. There are a variety of ways to do this. We will use a &lt;code&gt;run_list&lt;/code&gt; here.&lt;/p&gt;

&lt;p&gt;First, we need to figure out what our node is named. Run &lt;code&gt;knife node list&lt;/code&gt; and you should now see two nodes:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;NODE
[your_organization_name]-validator
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Mine looks like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;seth
sethvargo-validator
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We obviously want &lt;code&gt;NODE&lt;/code&gt;. In my case, it&amp;#39;s &lt;code&gt;seth&lt;/code&gt;. Now we can edit the &lt;code&gt;run_list&lt;/code&gt; for that node:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;knife node run_list add NODE hello_world
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For me, that command would look like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;knife node run_list add seth hello_world
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You should see the following output:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;run_list:  [recipe[hello_world]]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let&amp;#39;s inspect this node using the &lt;code&gt;show&lt;/code&gt; command:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;knife node show NODE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You should now see &lt;code&gt;hello_world&lt;/code&gt; in the &lt;code&gt;run_list&lt;/code&gt;. Run the &lt;code&gt;chef-client&lt;/code&gt; command again (remember you might need to use &lt;code&gt;sudo&lt;/code&gt;) and you should get output like the following:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;INFO: *** Chef 0.10.10 ***
INFO: Run List is [recipe[hello_world]]
INFO: Run List expands to [hello_world]
INFO: Starting Chef Run for seth
INFO: Running start handlers
INFO: Start handlers complete.
INFO: Loading cookbooks [hello_world]
INFO: Storing updated cookbooks/hello_world/recipes/default.rb in the cache.
INFO: Processing template[/Users/seth/hello-world.txt] action create (hello_world::default line 10)
INFO: template[/Users/seth/hello-world.txt] mode changed to 644
INFO: template[/Users/seth/hello-world.txt] updated content
INFO: Chef Run complete in 1.188536 seconds
INFO: Running report handlers
INFO: Report handlers complete
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Open up your &lt;code&gt;$HOME&lt;/code&gt; directory and you should see a file named &lt;code&gt;hello-world.txt&lt;/code&gt;. Look inside and you&amp;#39;ll see the those node variables were translated into plain text. Awesome!&lt;/p&gt;

&lt;p&gt;You can delete that file or leave it around as a reminder of how awesome Chef is. We have one last thing to do before we are done with this tutorial.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s remove that recipe from the &lt;code&gt;run_list&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;knife node run_list remove NODE hello_world
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Again, mine would be:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;knife node run_list remove seth hello_world
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You should see output like the following:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;run_list:  [recipe[hello_world]]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Well, this concludes this (rather lengthy) tutorial on installing Chef, registering for Hosted Chef, creating your first cookbook, and provisioning your first machine.&lt;/p&gt;

&lt;p&gt;Part 2 of this series will cover more recipes and full provisioning and customization of your personal laptop using Chef.&lt;/p&gt;
</description>
        <pubDate>Mon, 28 May 2012 20:32:00 -0400</pubDate>
        <link>http://technology.customink.com//blog/2012/05/28/provision-your-laptop-with-chef-part-1</link>
        <guid isPermaLink="true">http://technology.customink.com//blog/2012/05/28/provision-your-laptop-with-chef-part-1</guid>
      </item>
    
      <item>
        <title>5 Things You Always Wanted to Know About Chef</title>
        <description>&lt;p&gt;When I first started working with Chef, there were a couple of areas that I knew were going to be really awesome and helpful but I wasn&amp;#39;t sure how to get started with them.  In this presentation, I&amp;#39;ll provide a quick introduction to five things you&amp;#39;ve always wanted to know about Chef but were afraid to ask.&lt;/p&gt;

&lt;p&gt;I gave this presentation at &lt;a href=&quot;http://chefconf.opscode.com&quot;&gt;#ChefConf 2012&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Level-up your Chef skills by learning about these areas of Chef:&lt;/p&gt;

&lt;!--more--&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Attribute Precedence&lt;/strong&gt; - Role, environment, cookbook, data bag? Which attribute value will be used in my chef run?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Encrypted Databags&lt;/strong&gt; - Chef 0.10 brought us encrypted databags. We&amp;#39;ll look at how to create and use databags and how to keep them up-to-date in your repository.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LWRP&lt;/strong&gt; - What is a LWRP? How and why do you create one? We&amp;#39;ll look at a couple of sample LWRPs and learn how to build a simple one.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Error Handlers&lt;/strong&gt; - Demystify exception and report handlers by writing a simple one and seeing examples of how they work in the wild.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Capistrano and Chef&lt;/strong&gt; - Take a quick look at why and how to integrate Chef search into your Capistrano configuration to make deploying your Rails apps even easier.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One thing I didn&amp;#39;t mention in the presentation was how to use the data from the encrypted data bag.  I&amp;#39;ve updated the slides to include this info but it doesn&amp;#39;t appear in the video.  In any case, here&amp;#39;s a quick demo of how you might use it:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;creds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Chef&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EncryptedDataBagItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;db&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;creds&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;env_db_creds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db_creds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;rails_env&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app_dir&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/shared/config/database.yml&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;database.yml.erb&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;variables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;:rails_env&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;rails_env&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;:username&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env_db_creds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;username&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;:password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env_db_creds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;video&quot;&gt;Video&lt;/h3&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;http://www.youtube.com/embed/uREL4FFPddo&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;h3 id=&quot;slides&quot;&gt;Slides&lt;/h3&gt;

&lt;script async class=&quot;speakerdeck-embed&quot; data-id=&quot;4fb532f2850667001f0008f8&quot; data-ratio=&quot;1.2945638432364097&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;
</description>
        <pubDate>Sat, 26 May 2012 21:51:00 -0400</pubDate>
        <link>http://technology.customink.com//blog/2012/05/26/5-things-you-always-wanted-to-know-about-chef</link>
        <guid isPermaLink="true">http://technology.customink.com//blog/2012/05/26/5-things-you-always-wanted-to-know-about-chef</guid>
      </item>
    
      <item>
        <title>The Joy of Cooking - Whip Up a Rails Environment with Chef</title>
        <description>&lt;p&gt;You&amp;#39;ve heard of Chef, Puppet, and other frameworks that can help you build out your infrastructure. You&amp;#39;ve been meaning to play around with one or more of them for some time now. Now&amp;#39;s your chance; Start cooking up on your own servers!&lt;/p&gt;

&lt;p&gt;In this presentation, I provide an introduction to Chef with a focus on what you&amp;#39;ll need to know to get a Rails application up and running.&lt;/p&gt;

&lt;p&gt;Topics include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Introduction to Chef&lt;/li&gt;
&lt;li&gt;Nodes, roles, environments, and other terminology&lt;/li&gt;
&lt;li&gt;Introduction to cookbooks&lt;/li&gt;
&lt;li&gt;Provisioning an environment for a Rails application&lt;/li&gt;
&lt;li&gt;Deploying with Capistrano&lt;/li&gt;
&lt;/ul&gt;

&lt;!--more--&gt;

&lt;p&gt;You won&amp;#39;t be ready to compete in Iron Chef, but you will be ready to serve up your own Rails environment in no time.&lt;/p&gt;

&lt;p&gt;I gave slightly different versions of this presentation at &lt;a href=&quot;http://www.rubynation.org/&quot;&gt;RubyNation 2012&lt;/a&gt; and &lt;a href=&quot;http://chefconf.opscode.com&quot;&gt;#ChefConf 2012&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I&amp;#39;d really appreciate any comments, questions, or feedback in the comments section below.&lt;/p&gt;

&lt;h3 id=&quot;video-from-chefconf&quot;&gt;Video from ChefConf&lt;/h3&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;http://www.youtube.com/embed/X1mmzERRkeI&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;h3 id=&quot;slides&quot;&gt;Slides&lt;/h3&gt;

&lt;script async class=&quot;speakerdeck-embed&quot; data-id=&quot;4fb421272cf6f5001f00ba85&quot; data-ratio=&quot;1.2945638432364097&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;
</description>
        <pubDate>Fri, 25 May 2012 14:59:00 -0400</pubDate>
        <link>http://technology.customink.com//blog/2012/05/25/the-joy-of-cooking-whip-up-a-rails-environment-with-chef</link>
        <guid isPermaLink="true">http://technology.customink.com//blog/2012/05/25/the-joy-of-cooking-whip-up-a-rails-environment-with-chef</guid>
      </item>
    
      <item>
        <title>Taming the Kraken - How Operations enables developer productivity</title>
        <description>&lt;p&gt;At &lt;a href=&quot;http://railsconf2012.com/&quot;&gt;RailsConf 2012&lt;/a&gt;, I gave a presentation on how our web operations team enables developer productivity.&lt;/p&gt;

&lt;p&gt;There&amp;#39;s always a bit of tension when getting features from idea to production. In this talk, I describe some of the changes CustomInk has made to reduce this friction and keep the new features coming. Gone are the days of bi-monthly deploys, office pools dedicated to guessing when this deploy will be rolled back, and the ceremony surrounding the deploy-rollback-fix-deploy cycle. Today, ideas flow from product managers to developers to production with ease thanks to a number of changes that we&amp;#39;ve made to our teams, processes and tools.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Presenting at RailsConf was a really enjoyable experience and the presentation was well received.  There were lots of questions from the audience after the presentation.  Unfortunately, the Q &amp;amp; A section was not captured in the video.  I&amp;#39;d really appreciate any questions or feedback you have, just drop a comment below.&lt;/p&gt;

&lt;h3 id=&quot;video&quot;&gt;Video&lt;/h3&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;http://www.youtube.com/embed/5vzNzQzmAk0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;h3 id=&quot;slides&quot;&gt;Slides&lt;/h3&gt;

&lt;script async class=&quot;speakerdeck-embed&quot; data-id=&quot;4f96da12947c45001f018683&quot; data-ratio=&quot;1.2945638432364097&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;
</description>
        <pubDate>Fri, 25 May 2012 14:31:00 -0400</pubDate>
        <link>http://technology.customink.com//blog/2012/05/25/taming-the-kraken-how-operations-enables-developer-productivity</link>
        <guid isPermaLink="true">http://technology.customink.com//blog/2012/05/25/taming-the-kraken-how-operations-enables-developer-productivity</guid>
      </item>
    
      <item>
        <title>Welcome Interns!</title>
        <description>&lt;p&gt;Last week the CustomInk Tech team welcomed two new interns, Nolan Carroll and Seth Vargo.  Nolan and Seth are joining us for the summer from Carnegie Mellon University where they are both majoring in Information Systems.&lt;/p&gt;

&lt;p&gt;Nolan and Seth wasted no time hopping on our &lt;a href=&quot;/blog/2012/05/14/welcome-josh-born&quot;&gt;deploy train&lt;/a&gt; last week, but they couldn&amp;#39;t have done it without the help of our (semi) automated build process.  A while ago, Nathen Harvey talked about our &lt;a href=&quot;/blog/2012/01/02/green-screen/&quot;&gt;Green Screen&lt;/a&gt; build monitor.  While this serves as a great motivator for us to keep our builds passing, the ability for us to quickly create builds for any branch is what keeps us moving fast.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Using some home grown capistrano scripts, any developer can easily create and manage an automated Jenkins build, which will automatically be monitored by Green Screen.  A developer&amp;#39;s typical workflow might look something like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;branch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_feature&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;checkout&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_feature&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;changes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;added new feature&quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;origin&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_feature&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that a new feature branch is available in our remote repository, the developer can create and start their own Jenkins build:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cap&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jenkins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;I&#39;ve created rfe_new_feature.&quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cap&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jenkins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;I&#39;ve found rfe_new_feature and it&#39;s building now.&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now a build is running on our Jenkins server.  More importantly, Jenkins will use it&amp;#39;s Jedi powers to detect any changes to the remote branch and automatically kick off a new build.  When builds fail, the entire team is notified and Green Screen turns red.  We have a handful of other useful Jenkins tasks as well:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;n&quot;&gt;cap&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jenkins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;# Kicks off a build for the current branch&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cap&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jenkins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;console&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# Shows the job&#39;s console&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cap&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jenkins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# Create a job for the current branch&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cap&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jenkins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delete&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# Deletes a job with name = rfe_[current_branch]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cap&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jenkins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;# Lists all jobs in jenkins&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cap&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jenkins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# Gets the status of a job with name = rfe_[current_branch]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Continuous deployment can&amp;#39;t happen without automation.  I&amp;#39;d like to give a big shout out to our Web Ops team for driving us down the automation super highway.  I&amp;#39;d also like to extend a warm welcome to Nolan and Seth, we look forward to seeing their builds pass all summer long.&lt;/p&gt;
</description>
        <pubDate>Thu, 24 May 2012 16:01:00 -0400</pubDate>
        <link>http://technology.customink.com//blog/2012/05/24/welcome-interns</link>
        <guid isPermaLink="true">http://technology.customink.com//blog/2012/05/24/welcome-interns</guid>
      </item>
    
      <item>
        <title>Coderetreat Floyd 2012</title>
        <description>&lt;h2 id=&quot;one-saturday-dedicated-to-honing-your-craft&quot;&gt;One Saturday dedicated to honing your craft&lt;/h2&gt;

&lt;p&gt;It&amp;#39;s easy to get caught up in the whirlwind of projects and deadlines and forget that software development is very much a craft that needs to be practiced. The complex requirements and external pressures of a production application often cloud our judgement, forcing us to forgo the fundamental concepts that create great software.&lt;/p&gt;

&lt;p&gt;It&amp;#39;s useful to step away from the code you work on day-to-day to focus on honing your skills merely for the sake of improving as a developer. Corey Haines&amp;#39; &lt;a href=&quot;http://coderetreat.org&quot;&gt;Coderetreat&lt;/a&gt; format facilitates this by strongly suggesting its participants delete their code immediately after each session. By the end of the day, the value created is not the code that is written, but the skills and insights learned from writing that code.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;The Coderetreat consisted of five 45 minute pairing sessions building &lt;a href=&quot;http://en.wikipedia.org/wiki/Conway&amp;#x27;s_Game_of_Life&quot;&gt;Conway&amp;#39;s Game of Life&lt;/a&gt;. The &amp;#39;zero-player&amp;#39; game is a form of cellular automata that consists of a grid of dead or alive &amp;#39;cells&amp;#39; represented by the squares in the grid. Based on a set of four simple rules, the grid comes to life with complex patterns and interactions between the cells.&lt;/p&gt;

&lt;p&gt;The rules are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Any live cell with fewer than two live neighbours dies, as if caused by under-population.&lt;/li&gt;
&lt;li&gt;Any live cell with two or three live neighbours lives on to the next generation.&lt;/li&gt;
&lt;li&gt;Any live cell with more than three live neighbours dies, as if by overcrowding.&lt;/li&gt;
&lt;li&gt;Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With just a simple initial configuration of cells, patterns like Gosper&amp;#39;s Glider Gun can be made:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://technology-customink-com.s3.amazonaws.com/images/gospers_glider_gun.gif&quot; alt=&quot;Gosper&#39;s Glider Gun&quot; class=&quot;tb-Img tb-Img--responsive-ctr tb-Img--fancy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Rules and image taken from &lt;a href=&quot;http://en.wikipedia.org/wiki/Conway&amp;#x27;s_Game_of_Life&quot;&gt;Conway&amp;#39;s Game of Life Wikipedia Article&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;session-one&quot;&gt;Session One&lt;/h3&gt;

&lt;p&gt;For the first session, I worked with another developer to build up &amp;#39;Cell&amp;#39; object using CoffeeScript and Jasmine. It went well, but about half way into the session, the requirements of the game were changed to include zombie cells that come to life based on its own set of rules. We were asked about the impact of introducing these new requirements into our code. We were largely unaffected by the change due to not being very far into the implementation, but it was obvious to see how we could have been bitten by the change.&lt;/p&gt;

&lt;p&gt;We chose to deal with alive and dead cells through a boolean attribute on the Cell class. Had we fleshed out the game more, our logic and objects would be tightly bound to this concept and introducing a third state would require considerable time and effort.&lt;/p&gt;

&lt;p&gt;Thus, the stage was set for the remaining sessions. We would learn how to better build software that can bend and mold to the often changing demands of the real world.&lt;/p&gt;

&lt;h3 id=&quot;session-two&quot;&gt;Session Two&lt;/h3&gt;

&lt;p&gt;In Session Two, we were introduced to a set of constraints:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;No primitives across method boundaries&lt;/li&gt;
&lt;li&gt;Less than 3 lines of code per method&lt;/li&gt;
&lt;li&gt;No if statements&lt;/li&gt;
&lt;li&gt;No explicit loops&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Immediately we were able to notice changes in our design:&lt;/p&gt;

&lt;p&gt;Without if statements, instead of a Cell class with a boolean state, we pushed the state logic into AliveCell and DeadCell classes. Our CellCollection class only needed to know about its Cell-like objects, specific behavior was encapsulated within each AliveCell or DeadCell.&lt;/p&gt;

&lt;p&gt;Having less than 3 lines of code per method encouraged a top-down approach to designing our game. With only two lines available to us per method, we were forced to continuously delegate behavior to new objects. The result was a healthy layer of abstractions above very specific implementing objects.&lt;/p&gt;

&lt;h3 id=&quot;session-three&quot;&gt;Session Three&lt;/h3&gt;

&lt;p&gt;Session Three lifted the constraints from Session Two, but introduced the mute session:&lt;/p&gt;

&lt;p&gt;Each pair would have one test writer and one code writer. Adhering to TDD, the test writer would write a test that defined the desired behavior of an object. The code writer would write the code to match that test with two caveats:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Neither the test writer nor the code writer could speak to each other&lt;/li&gt;
&lt;li&gt;The code writer was instructed to be an &amp;#39;Evil Coder&amp;#39; by only writing enough (likely wrong) code to get the corresponding test to pass&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We found that the top-down abstraction-building method learned in the previous session was helpful in avoiding the obstacle that was the Evil Coder. It was easy to write specs of objects merely calling methods on other objects. By not testing the result state of some combination of logic, the Evil Coder was forced to implement exactly the behaviors defined by the test writer.&lt;/p&gt;

&lt;p&gt;At the detail layer, proper use of stubs and mocks prevented the Evil Coder from purposefully implementing the wrong code.&lt;/p&gt;

&lt;h3 id=&quot;session-four&quot;&gt;Session Four&lt;/h3&gt;

&lt;p&gt;Session Four again dropped all previous constraints but required a 2-minute green-to-green cycle:&lt;/p&gt;

&lt;p&gt;At the start of writing a test, we would start a timer for 2 minutes. If by the end of those 2 minutes we did not have that test passing, we would delete our changes for that cycle and start over. Between each cycle, we would have 2 minutes to refactor what we had.&lt;/p&gt;

&lt;p&gt;After several minutes the entire room rang with alarms. We found ourselves trying to test too much at once. In order to fit within the 2 minutes cycles, it was often helpful to initially use a naïve approach to get our test passing and refactor later.&lt;/p&gt;

&lt;p&gt;By taking the next simplest step in every cycle, we ere able to have completely working code every 2 minutes.&lt;/p&gt;

&lt;h3 id=&quot;session-five&quot;&gt;Session Five&lt;/h3&gt;

&lt;p&gt;Session Five removed all constraints and allowed us to use what we learned in the previous sessions freely.&lt;/p&gt;

&lt;p&gt;Interestingly enough, although Session Five had the same lack of constraints as Session One, the code we wrote was remarkably different and incorporated many of the ideas from the previous sessions.&lt;/p&gt;

&lt;h3 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h3&gt;

&lt;p&gt;At the end of the day, all of the participants grouped up and discussed what they had discovered in during the retreat.&lt;/p&gt;

&lt;p&gt;Session Two showed us how encapsulating behaviors into objects can dramatically reduce the impact of changes to your system. Session Three reinforced the idea of Tests as Documentation and revealed an approach that allows for a high degree of unit test coverage. Session Four encouraged us to work in smaller batches, allowing constant verification of working code and reducing the need to debug larger chunks of code at infrequent intervals.&lt;/p&gt;

&lt;p&gt;These concepts are not new. They are fundamental aspects of object oriented design and test driven development that have been practiced successfully for years. The Coderetreat is a great way to expose these concepts to those who have never heard of them, and to reinforce the concepts to those who have merely forgotten.&lt;/p&gt;

&lt;p&gt;It&amp;#39;s also a great way of keeping in touch with the developer community, with more relaxed gathering and discussion before and after the actual event. I had a great weekend in Floyd and I would recommend a Coderetreat for anyone interested a weekend of practice and reflection.&lt;/p&gt;

&lt;p&gt;I hope to see you at one some day!&lt;/p&gt;
</description>
        <pubDate>Wed, 16 May 2012 15:27:00 -0400</pubDate>
        <link>http://technology.customink.com//blog/2012/05/16/coderetreat-floyd-2012</link>
        <guid isPermaLink="true">http://technology.customink.com//blog/2012/05/16/coderetreat-floyd-2012</guid>
      </item>
    
      <item>
        <title>Welcome Josh Born!</title>
        <description>&lt;p&gt;The CustomInk technology team wants to extend a warm welcome to our newest member, Josh Born.  Josh wasted no time and hopped onto the deploy train today for his first production release.&lt;/p&gt;

&lt;p&gt;At CustomInk we like to &lt;a href=&quot;http://www.customink.com/designs/proofs/jub0-000p-fxs7/front.jpg&quot; target=&quot;_new&quot;&gt;continuously deploy&lt;/a&gt; changes to our site.  This means no sprints, no iterations, no milestones.  We work, and when we are satisfied with our work, we deploy it.  On average, engineers deploy updates to our site about five to seven times a day.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;We like to manage our deployments in a very low fidelity way, which was inspired largely by the engineers at Etsy.  We call it the &amp;quot;deploy train&amp;quot; and it&amp;#39;s nothing more then a virtual line managed by our campfire topic.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://technology-customink-com.s3.amazonaws.com/images/deploy_train.png&quot; alt=&quot;Campfire Deploy Train&quot; class=&quot;tb-Img tb-Img--responsive-ctr tb-Img--fancy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When you are ready to deploy a change, you add yourself to the end of the deploy train and simply wait for your turn.  The responsibility of the engineer at the front of the deploy train is to merge, deploy, and verify his or her changes in production.  When the engineer is satisfied, they take themselves off the list and notify the next engineer in line that it is their turn.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://technology-customink-com.s3.amazonaws.com/images/josh_born_ponder_deploy.jpg&quot; alt=&quot;Josh ponders his first release&quot; class=&quot;tb-Img tb-Img--responsive-ctr tb-Img--fancy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This will be the first of many deploys for Josh.  We are very excited to have him on board and look forward to his next release, sometime later this week.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://technology-customink-com.s3.amazonaws.com/images/josh_born_first_deploy.png&quot; alt=&quot;Josh releases his first code&quot; class=&quot;tb-Img tb-Img--responsive-ctr tb-Img--fancy&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 14 May 2012 13:17:00 -0400</pubDate>
        <link>http://technology.customink.com//blog/2012/05/14/welcome-josh-born</link>
        <guid isPermaLink="true">http://technology.customink.com//blog/2012/05/14/welcome-josh-born</guid>
      </item>
    
      <item>
        <title>Critical Oversight: Indexes</title>
        <description>&lt;p&gt;One of the most common production issues I run into are missing indexes.  The other day I got to thinking that they are usually missing because of the evolution of the software.&lt;/p&gt;

&lt;p&gt;We might use some rails generators to prototype some basic functionality.  Then we&amp;#39;ll iterate over a set of stories incorporating new behavior.  Maybe we&amp;#39;ll do some refactoring, scrap some features, pull out some dead code and &amp;quot;harden&amp;quot; some areas we&amp;#39;ve identified as brittle.  But we almost never analyze the &amp;quot;data model&amp;quot; before we deploy.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Have we considered our data access patterns?  Did we create foreign keys to enforce data integrity?  Do we have any idea how big these tables are going to grow?  We almost certainly don&amp;#39;t need to shard them…do we?&lt;/p&gt;

&lt;p&gt;No, we almost never do this.&lt;/p&gt;

&lt;p&gt;Instead we race to ship.  &amp;quot;&lt;a href=&quot;http://www.customink.com/lab/?cid=jub0-000p-fxs7#shared&quot;&gt;Deploy early, deploy often&lt;/a&gt;&amp;quot; is our motto, and we love it.  Deploying code is awesome, it means people are going to use it.  People using our code makes us happy because it means we didn&amp;#39;t waste our time today.  We did something real that people got to use.&lt;/p&gt;

&lt;p&gt;A few months down the road comes the tipping point.  One of your tables amasses a few hundred thousand rows.  Your pages start to take seconds to load because your queries take seconds to run.  Your database connections are tied up, and when your site gets enough traffic, things start to fall over.&lt;/p&gt;

&lt;p&gt;This literally just happened to us.  Again.  We missed one little index on one little foreign key in one little table.  And then one of our database servers stopped responding.   Spiked CPU, connections maxed out, alerts firing, then fail over.&lt;/p&gt;

&lt;p&gt;While Rails makes it really easy to create models without even thinking about the database, Rails also makes it very easy to deal with the database.  In James Edward Gray&amp;#39;s talk &lt;a href=&quot;http://speakerdeck.com/u/jeg2/p/10-things-you-didnt-know-rails-could-do?utm_source=rubyweekly&amp;amp;utm_medium=email&quot;&gt;10 Things You Didn&amp;#39;t Know Rails Could Do&lt;/a&gt; he shows you how to use rails migration generators to create your table AND index your fields.&lt;/p&gt;

&lt;p&gt;If you don&amp;#39;t like generators, you can simply use the &amp;#39;add_index&amp;#39; method in the migration itself:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreateFoo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Migration&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;up&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;create_table&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:foos&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;integer&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:foreign_key&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;string&lt;/span&gt;  &lt;span class=&quot;ss&quot;&gt;:other_valuable_data&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;add_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:foos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:foreign_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;foos_foreign_key&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Of course, if you don&amp;#39;t think to add the index when you created the table, you can always create a migration just to add the index.  The key is adding a checkpoint to your development process in which you analyze your data structures for completeness.  Adding this checkpoint gives you a chance to add any missing database constructs before it&amp;#39;s too late.&lt;/p&gt;
</description>
        <pubDate>Fri, 27 Apr 2012 11:48:00 -0400</pubDate>
        <link>http://technology.customink.com//blog/2012/04/27/critical-oversight-indexes</link>
        <guid isPermaLink="true">http://technology.customink.com//blog/2012/04/27/critical-oversight-indexes</guid>
      </item>
    
      <item>
        <title>RubyNation 2012</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://www.rubynation.org/&quot;&gt;RubyNation&lt;/a&gt; is awesome.  Most ruby events are awesome, but in particular I enjoy RubyNation because it&amp;#39;s local to me.  It&amp;#39;s not that I don&amp;#39;t like traveling to other conferences or that I think Washington DC is the best possible place for a conference.  What I love about RubyNation being local is having 200+ ruby developers from my immediate locale in one single place, at one single time.  Of course, it doesn&amp;#39;t hurt to have &lt;a href=&quot;http://onestepback.org&quot;&gt;Jim Weirich&lt;/a&gt; and &lt;a href=&quot;http://coreyhaines.com/&quot;&gt;Corey Haines&lt;/a&gt; show up, either.&lt;/p&gt;

&lt;p&gt;The other thing I love about RubyNation are all the great talks.  Even the bad talks are still good talks.  Even the terrible talks turn into great talks because when you step into the hallway, there are amazing people who showed up to RubyNation waiting to have a great talk with you.  Every year, without fail, I meet new people and learn new things.  I don&amp;#39;t think you can put a price tag on that.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;There were lots of highlights for me this year, and some surprises.  The first surprise should really have been no surprise at all, since it&amp;#39;s a developing trend at all Ruby/Rails related events: JavaScript.  In his opening keynote, Justin Getland says something to the effect of &amp;quot;Adapt or die&amp;quot;.  Justin&amp;#39;s message was clear: wherever there is a gap, someone will be there to fill it.  There is a gap in JavaScript knowledge, so it&amp;#39;s time to step in or someone else will.&lt;/p&gt;

&lt;p&gt;The first day at RubyNation had one track that was entirely JavaScript and View focused.  The second track was a grab bag of ruby related topics such as toolkits or programming approaches.  Some of the JS/View track presentations that stuck out to me were:&lt;/p&gt;

&lt;p&gt;Roy Tomeij&amp;#39;s talk on &lt;a href=&quot;http://roytomeij.com/slides/rubynation2012&quot;&gt;Modular and Reusable Front-End code&lt;/a&gt;,
Brennan Dunn&amp;#39;s talk on &lt;a href=&quot;http://speakerdeck.com/u/brennandunn/p/rails-without-views&quot;&gt;Rails Without Views&lt;/a&gt;,
John Athayde&amp;#39;s talk on &lt;a href=&quot;http://speakerdeck.com/u/boboroshi/p/the-rails-view-the-junk-drawer-grows-up&quot;&gt;The Rails View: The Junk Drawer Grows Up&lt;/a&gt;,
Chris Strom&amp;#39;s talk on &lt;a href=&quot;http://speakerdeck.com/u/chris/p/you-aint-spdy-ruby-nation&quot;&gt;You Ain&amp;#39;t SPDY&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Andrew Glover&amp;#39;s &lt;a href=&quot;https://github.com/aglover/resque-example&quot;&gt;Asynchronous Processing and Messaging&lt;/a&gt; talk was a great introduction to Resque and Redis.  Although I didn&amp;#39;t attend his talk, people told me that Mike Subelsky&amp;#39;s talk &lt;a href=&quot;http://www.subelsky.com/2012/03/slides-from-my-coding-for-uncertainty.html&quot;&gt;Coding for Uncertainty&lt;/a&gt; was amazing.  Before you knew it, Jim Weirich was wrapping up day one by teaching us how to use Ruby for purely functional programming purposes to implement the &lt;a href=&quot;https://twitter.com/#!/karledurante/status/183312951598514176/photo/1&quot;&gt;Y Combinator&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Day two had a couple of front end related talks, but really seemed to focus more on some of the toolkits we use with ruby and some theory to help rubyists navigate the programming waters.&lt;/p&gt;

&lt;p&gt;I really enjoyed Russ Olsen&amp;#39;s &lt;a href=&quot;http://speakerdeck.com/u/russolsen/p/eloquent-explanations-rubynation-2012&quot;&gt;Eloquent Expressions&lt;/a&gt; and Jeff Casimir&amp;#39;s &lt;a href=&quot;http://speakerdeck.com/u/j3/p/adventures-on-the-golden-path&quot;&gt;Adventures on the Golden Path&lt;/a&gt;.  As well, Patrick Peak and Nathen Harvey gave great talks on how to better organize your applications with &lt;a href=&quot;http://speakerdeck.com/u/peakpg/p/plays-well-with-others-building-mountable-apps&quot;&gt;mountable applications&lt;/a&gt; and &lt;a href=&quot;https://github.com/nathenharvey/cooking-with-chef&quot;&gt;deployment strategies&lt;/a&gt;, respectively.  &lt;a href=&quot;https://github.com/ajburton&quot;&gt;Anthony Burton&lt;/a&gt; has posted a more &lt;a href=&quot;https://gist.github.com/2182892&quot;&gt;complete list of talks here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Corey Haines closed out the event with a call to arms for our community to mentor the next generation.  Corey&amp;#39;s point was simple: there is a need for more developers.  Companies will step in to &amp;quot;make&amp;quot; new ones.  Do you want good developers or bad developers?  &lt;a href=&quot;http://rubytutor.org/&quot;&gt;Ruby Tutor&lt;/a&gt; is a place where we can help to make the next generation great.&lt;/p&gt;

&lt;p&gt;Thanks to all the people who made RubyNation such a great event this year.  See you all next year.&lt;/p&gt;
</description>
        <pubDate>Mon, 26 Mar 2012 13:36:00 -0400</pubDate>
        <link>http://technology.customink.com//blog/2012/03/26/rubynation-2012</link>
        <guid isPermaLink="true">http://technology.customink.com//blog/2012/03/26/rubynation-2012</guid>
      </item>
    
      <item>
        <title>Simple Garbage Collection Tuning for Rails</title>
        <description>&lt;p&gt;Ruby is known for being bad at garbage collection.  The truth is that the default GC settings aren&amp;#39;t very good for a Rails application so if you run a Rails app you really should do some tuning (this requires either Ruby Enterprise or Ruby 1.9.2).  Here&amp;#39;s a streamlined process for getting started:&lt;/p&gt;

&lt;h3 id=&quot;get-a-baseline&quot;&gt;Get a Baseline&lt;/h3&gt;

&lt;p&gt;Turn on collecting GC stats for New Relic (of course you&amp;#39;re using &lt;a href=&quot;http://newrelic.com/&quot;&gt;New Relic&lt;/a&gt;).  You want to know what you&amp;#39;re fixing and this will probably show you that about &amp;#8531; of the &amp;quot;Ruby&amp;quot; portion of your app response time is really garbage collection.  Just add the following line to your &lt;code&gt;environment.rb&lt;/code&gt; file:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;GC.enable_stats if defined?(GC) &amp;amp;&amp;amp; GC.respond_to?(:enable_stats)&lt;/code&gt;&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;examine-the-heap&quot;&gt;Examine the Heap&lt;/h3&gt;

&lt;p&gt;Once you&amp;#39;ve gathered enough data in NewRelic to be able to see a change, you&amp;#39;ll want to see what the heap looks like in one of your passenger threads.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Take one of your app servers out of production&lt;/li&gt;
&lt;li&gt;Install gdb.rb:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;sudo gem install gdb.rb&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;sudo passenger-status&lt;/code&gt; to find a thread that has handled enough requests to be pretty well warmed up and note its PID.&lt;/li&gt;
&lt;li&gt;Connect to the passenger thread with gdb.rb:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;sudo gdb.rb &amp;lt;pid&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Get gdb.rb to print out the stats about your objects:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;ruby objects&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You&amp;#39;re looking for a section that looks like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;HEAPS            9
  SLOTS      3061241
  LIVE       1457106 (47.60%)
  FREE       1604135 (52.40%)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We&amp;#39;re going to assume that &amp;quot;LIVE&amp;quot; number is representative of how many slots you normally use up.  Round that up to something sensible like 1,500,000.  Now do the math like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;RUBY_HEAP_MIN_SLOTS=1800000          # Slots Live + 20%
RUBY_HEAP_FREE_MIN=18000             # 1% of HEAP_MIN_SLOTS
RUBY_HEAP_SLOTS_INCREMENT=144000     # 8% of HEAP_MIN_SLOTS
RUBY_HEAP_SLOTS_GROWTH_FACTOR=1
RUBY_GC_MALLOC_LIMIT=60000000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I know there&amp;#39;s no explanation for those last two settings, but I haven&amp;#39;t really explained the math behind the other numbers either.  This is meant to be a good starting point.  Its customized for your app to some degree, but with some assumptions.&lt;/p&gt;

&lt;h2 id=&quot;wrap-your-ruby&quot;&gt;Wrap Your Ruby&lt;/h2&gt;

&lt;p&gt;Now create a wrapper script that sets these variables in the environment before calling ruby.  I&amp;#39;m going to assume you put it in &lt;code&gt;/usr/local/bin&lt;/code&gt; and call it &lt;code&gt;ruby_tuned&lt;/code&gt;.  The file should look like this (make sure you adjust for the path to ruby on your system):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;RUBY_HEAP_MIN_SLOTS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1800000
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;RUBY_HEAP_FREE_MIN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;18000
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;RUBY_HEAP_SLOTS_INCREMENT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;144000
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;RUBY_HEAP_SLOTS_GROWTH_FACTOR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;RUBY_GC_MALLOC_LIMIT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;60000000

&lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/usr/local/bin/ruby&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$@&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;update-passenger&quot;&gt;Update Passenger&lt;/h2&gt;

&lt;p&gt;Have passenger use your &lt;code&gt;ruby_tuned&lt;/code&gt; wrapper instead of calling ruby directly by updating &lt;code&gt;passenger.conf&lt;/code&gt; (look in &lt;code&gt;/etc/apache2/mods-enabled&lt;/code&gt; on Ubuntu).  You&amp;#39;ll want it to look like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;PassengerRoot /usr/local/lib/ruby/gems/1.8/gems/passenger-3.0.11
PassengerRuby /usr/local/bin/ruby_tuned
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now restart apache, add the server back into production and check NewRelic to see how you did.&lt;/p&gt;

&lt;h2 id=&quot;what-we-got&quot;&gt;What We Got&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://technology-customink-com.s3.amazonaws.com/images/Response_Time_GC.jpg&quot; class=&quot;tb-Img tb-Img--responsive-ctr tb-Img--fancy&quot;&gt;&lt;/p&gt;

&lt;p&gt;The graph above is from New Relic as I rolled the changes out one server at a time.  When we applied these changes to our first app we saw:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Time spent in GC drop from ~35ms per request to ~10ms&lt;/li&gt;
&lt;li&gt;CPU usage drop almost in half&lt;/li&gt;
&lt;li&gt;A slight increase in memory used&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;where-those-numbers-actually-came-from&quot;&gt;Where Those Numbers Actually Came From&lt;/h2&gt;

&lt;p&gt;To understand these settings and what they do checkout:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.viddler.com/v/87ae120a&quot;&gt;This Presentation from Joe Damato&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.coffeepowered.net/2009/06/13/fine-tuning-your-garbage-collector/&quot;&gt;This Post from Chris Heald&lt;/a&gt; (he adds a gem to his app instead of using gdb.rb)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.rubyenterpriseedition.com/documentation.html#_garbage_collector_performance_tuning&quot;&gt;The Ruby Enterprise GC documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 16 Mar 2012 08:07:00 -0400</pubDate>
        <link>http://technology.customink.com//blog/2012/03/16/simple-garbage-collection-tuning-for-rails</link>
        <guid isPermaLink="true">http://technology.customink.com//blog/2012/03/16/simple-garbage-collection-tuning-for-rails</guid>
      </item>
    
      <item>
        <title>Simple Data Mapper</title>
        <description>&lt;p&gt;I recently tackled a pretty typical data migration task where some source model had to be transformed into some target model.  About 80% of the elements were mapped field for field, and the other 20% had to be mutated in some way.  Tired of writing one off rake tasks to pull and transform data, I came up with a little data mapper class that I cold reuse in the future.&lt;/p&gt;

&lt;!--more--&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Mapper&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;attr_accessor&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:source_model&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;attr_accessor&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:mappings&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AttributeMapping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ListMapping&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;AttributeMapping&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;attr_accessor&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:fields&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# fields - array of field symbols we want to map data into&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fields&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source_obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source_attribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{}.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tap&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source_obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source_attribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ComplexMapping&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;AttributeMapping&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;attr_accessor&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:field&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;attr_accessor&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:instruction&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# field       - field symbol we want to map data into&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# instruction - lambda which accepts source object and source attribute.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#               expected to return value to be mapped to field (on target obj)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instruction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;instruction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instruction&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source_obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source_attribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instruction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source_obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source_attribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source_model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mappings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;source_model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source_model&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mappings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mappings&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;conjure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map_values_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;source_model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mappings&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;camelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;constantize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;map_values_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source_model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mappings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{}.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tap&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;mappings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;AttributeMapping&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mapping&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mapping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source_model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mapping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source_model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!-- more --&gt;

&lt;p&gt;Using the mapper is really simple.  Let&amp;#39;s say my source model, LegacyCustomer, is based off of a legacy table from an older system and looks like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;LegacyCustomer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;userid: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# primary key&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;creationdate: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# date record was created&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;accountnum: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;# customer number. it&#39;s prefixed with&lt;/span&gt;
                          &lt;span class=&quot;c1&quot;&gt;# &quot;LGCY-&quot; string that we no longer need!&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And we want to migrate the LegacyCustomer data to a new Customer model that looks like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;id: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;created_at: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;updated_at: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;account_number: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;My rake task to run the migration would look like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:migrate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:legacy_customers&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;field_mappings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;:userid&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;:creation_date&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Mapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ListMapping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                          &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:created_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:update_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                         &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;:user_data&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Mapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ComplexMapping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                          &lt;span class=&quot;ss&quot;&gt;:account_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                          &lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;gsub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;LGCY-&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;
                         &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;no&quot;&gt;LegacyCustomer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;legacy_customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;mapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Mapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;legacy_customer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;field_mappings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;conjure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:customer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;save!&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As my migration marched on &amp;#39;one off&amp;#39; data errors would pop up causing the script to fail.  This is what ultimately led me to create the ComplexMapping class.  Every time some white space, funny character, or field split requirement bombed my script I was able to add some code to my ComplexMapping requirement to solve it.&lt;/p&gt;

&lt;p&gt;I wanted to share this experience for two reasons:&lt;/p&gt;

&lt;p&gt;Ruby is awesome.  Metaprogramming and Procs made this mapper possible.  When I first started programming with Ruby, these were the two hardest concepts for me to wrap my head around.  Investing time into learning these aspects of ruby have made me such a better ruby programmer.&lt;/p&gt;

&lt;p&gt;The second reason is to reinforce the lesson that doing things the lazy (comfortable) way will rarely ever benefit you.  This mapper class not only made writing and maintaining my migration script easier.  It has also found it&amp;#39;s way into some production code.&lt;/p&gt;

&lt;p&gt;Abstracting concepts (or remembering the &lt;a href=&quot;http://en.wikipedia.org/wiki/Single_responsibility_principle&quot;&gt;single responsibility principle&lt;/a&gt;) will always benefit you in the future.&lt;/p&gt;
</description>
        <pubDate>Fri, 02 Mar 2012 15:35:00 -0500</pubDate>
        <link>http://technology.customink.com//blog/2012/03/02/simple-data-mapper</link>
        <guid isPermaLink="true">http://technology.customink.com//blog/2012/03/02/simple-data-mapper</guid>
      </item>
    
      <item>
        <title>Organizing Your Rails Models</title>
        <description>&lt;p&gt;Like people, applications start out small.  Unlike people, applications do not always have a predictable growth pattern.  Sometimes they grow really big, and sometimes not at all.  When applications grow large, organization becomes important because it is no longer possible to remember every detail about your application without consulting the source code.&lt;/p&gt;

&lt;p&gt;&amp;quot;We use Rails, the convention tells us how to organize our code&amp;quot;.  Yes, but having 50 or more files in your app/models directory is hardly being organized.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;A simple thing I like to do is group related models into folders.  This allows you to organize the related models of a domain into a single location while any shared or stand alone models simply remain in the root directory.  For instance, my directory structure may look something like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;app
|_models
   |_address.rb
   |_orders
      |_order.rb
      |_item.rb
      |_shipping_detail.rb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And to make sure Rails can find all of my models, I need to update config/application.rb file as such:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;autoload_paths&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/**&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This allows developers to quickly see what models make up an order and what models either stand on their own, or are shared across multiple domains.  And for a large application, you are now able to quickly summarize the high level business objects that make up your system.&lt;/p&gt;
</description>
        <pubDate>Fri, 03 Feb 2012 15:38:00 -0500</pubDate>
        <link>http://technology.customink.com//blog/2012/02/03/organizing-your-rails-models</link>
        <guid isPermaLink="true">http://technology.customink.com//blog/2012/02/03/organizing-your-rails-models</guid>
      </item>
    
      <item>
        <title>PagerDuty, Nagios and Chef</title>
        <description>&lt;h2 id=&quot;three-things-that-work-great-together&quot;&gt;Three Things that Work Great Together&lt;/h2&gt;

&lt;p&gt;If you use Chef and Nagios, you already know what a great combination they make.  As you build new servers they automatically start getting monitored by Nagios.  Without you having to do anything they&amp;#39;re grouped together based on role, so its easy to apply the same checks for all servers in a given role.  If you haven&amp;#39;t tried Nagios built with the chef cookbook its easy to get started with this &lt;a href=&quot;http://wiki.opscode.com/display/chef/Nagios+Quick+Start&quot;&gt;guide&lt;/a&gt; from Opscode.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.pagerduty.com/%5D&quot;&gt;PagerDuty&lt;/a&gt; is a service that manages your on-call alerting and escalation policies.  Its hard to love a service that wakes you up in the middle of the night telling you about problems with your servers (my wife is really not a fan), but PagerDuty is helpful.  We generally set it to send an email about a problem first, then send an SMS text and finally to actually make a phone call if no one has responded.  It will go through a rotating list of people on call and accepts alerts from a number of monitoring services including Nagios and AlertSite.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Opscode recently accepted my addition of a PagerDuty recipe to the &lt;a href=&quot;https://github.com/opscode/cookbooks/tree/master/nagios&quot;&gt;Nagios cookbook&lt;/a&gt; which makes it incredibly easy to connect your Nagios instance to PagerDuty.  You just add a PagerDuty API key as an attribute, apply the pagerduty recipe to your nagios server (see their &lt;a href=&quot;http://www.pagerduty.com/docs/guides/nagios-integration-guide&quot;&gt;guide&lt;/a&gt; for instructions on getting your key) and you&amp;#39;re good to go.&lt;/p&gt;

&lt;p&gt;If you add the API key(s) to your Chef environments, you can tie each environment to a different escalation policy.  That way your staging environments just send email alerts while production actually texts and calls.&lt;/p&gt;

&lt;p&gt;One of the big wins of using the Nagios plugins is that if a service recovers the PagerDuty incident gets resolved automatically so it doesn&amp;#39;t continue to escalate the problem.  Also if you acknowledge a problem in Nagios the acknowledgment flows through to PagerDuty.&lt;/p&gt;
</description>
        <pubDate>Tue, 31 Jan 2012 10:14:00 -0500</pubDate>
        <link>http://technology.customink.com//blog/2012/01/31/pagerduty</link>
        <guid isPermaLink="true">http://technology.customink.com//blog/2012/01/31/pagerduty</guid>
      </item>
    
      <item>
        <title>Green Screen</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/customink/greenscreen&quot;&gt;Green Screen&lt;/a&gt; is a build monitoring tool that is designed to be used as a dynamic Big Visible Chart (BVC) in your work area. It lets you add links to your build servers and displays the largest possible information on a monitor so that the team can see the build status from anywhere in the room.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://nathenharvey.s3-website-us-east-1.amazonaws.com/blog/images/greenscreen/greenscreen.jpg&quot; alt=&quot;Green Screen Monitor&quot; class=&quot;tb-Img tb-Img--responsive tb-Img--fancy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We use Green Screen at &lt;a href=&quot;http://www.customink.com&quot;&gt;CustomInk&lt;/a&gt; to look after our continuous integration servers, currently 3 Hudson servers and one Jenkins cluster. We have a monitor mounted in the engineering office that makes it easy for everyone to quickly assess the build status.&lt;/p&gt;

&lt;p&gt;Green Screen is a simple Sinatra application that is &lt;a href=&quot;http://nathenharvey.com/blog/2012/01/02/deploying-green-screen&quot;&gt;easy to configure and deploy&lt;/a&gt;.  It works well with any continuous integration server that conforms to the &lt;a href=&quot;http://confluence.public.thoughtworks.org/display/CI/Multiple+Project+Summary+Reporting+Standard&quot;&gt;multiple project summary reporting standard&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can see a sample Green Screen app running at &lt;a href=&quot;http://greenscreenapp.com&quot;&gt;http://greenscreenapp.com&lt;/a&gt;.  Be forewarned, this sample Green Screen looks at all of the builds currently running on &lt;a href=&quot;http://ci.jenkins-ci.org&quot;&gt;http://ci.jenkins-ci.org&lt;/a&gt;.  This is fine for demo purposes but you may find it to be a bit overwhelming since it&amp;#39;s &lt;strong&gt;over 300 builds&lt;/strong&gt; at the time of this writing.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;history&quot;&gt;History&lt;/h2&gt;

&lt;p&gt;Green Screen was originally implemented by &lt;a href=&quot;https://github.com/martinjandrews&quot;&gt;Marty Andrews&lt;/a&gt; and &lt;a href=&quot;http://blog.martyandrews.net/2009/08/greenscreen-build-monitor-bvc.html&quot;&gt;announced on his blog in 2009&lt;/a&gt;. In the original version, a build that was in progress would blink on the screen.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://nathenharvey.s3-website-us-east-1.amazonaws.com/blog/images/greenscreen/4565_building.jpg&quot; alt=&quot;matrinjandrews Green Screen&quot; class=&quot;tb-Img tb-Img--responsive-ctr tb-Img--fancy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/rsutphin&quot;&gt;Rhett Sutphin&lt;/a&gt; improved the layout of green screen and introduced a new color, yellow, for builds that are in progress.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://nathenharvey.s3-website-us-east-1.amazonaws.com/blog/images/greenscreen/4566-building.jpg&quot; alt=&quot;rsutphin Green Screen&quot; class=&quot;tb-Img tb-Img--responsive-ctr tb-Img--fancy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After using these versions for a while at CustomInk, we decided that the most important thing to know was which builds were failing. Once you get past a handful of builds, it&amp;#39;s no longer very interesting to see every build. We forked Rhett&amp;#39;s version and created a &lt;a href=&quot;https://github.com/customink/greenscreen&quot;&gt;new layout for Green Screen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If everything is passing, the screen is basically one giant checkmark.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://nathenharvey.s3-website-us-east-1.amazonaws.com/blog/images/greenscreen/green.jpg&quot; alt=&quot;customink Green Screen&quot; class=&quot;tb-Img tb-Img--responsive-ctr tb-Img--fancy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If there are any failing builds, they&amp;#39;re shown in the main area while all others are displayed on the right.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://nathenharvey.s3-website-us-east-1.amazonaws.com/blog/images/greenscreen/4567.jpg&quot; alt=&quot;customink failed build&quot; class=&quot;tb-Img tb-Img--responsive-ctr tb-Img--fancy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Finally, a build that previously failed will be shown in yellow while it&amp;#39;s rebuilding.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://nathenharvey.s3-website-us-east-1.amazonaws.com/blog/images/greenscreen/4567_building.jpg&quot; alt=&quot;customink building&quot; class=&quot;tb-Img tb-Img--responsive-ctr tb-Img--fancy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We&amp;#39;ve also added support for controlling which builds are displayed from each CI server. So that you can explicitly include or exclude builds or just go with the default behavior of showing all builds on the server.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;sub&gt;Reposted from &lt;a href=&quot;http://nathenharvey.com/blog/2012/01/02/green-screen/&quot;&gt;Nathen Harvey&amp;#39;s blog&lt;/a&gt;.&lt;/sub&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 02 Jan 2012 14:17:00 -0500</pubDate>
        <link>http://technology.customink.com//blog/2012/01/02/green-screen</link>
        <guid isPermaLink="true">http://technology.customink.com//blog/2012/01/02/green-screen</guid>
      </item>
    
      <item>
        <title>Why we chose Chef over Puppet at CustomInk</title>
        <description>&lt;p&gt;Not unlike most technology choices, the choice of which configuration management tool to use for managing your infrastructure as code is sure to spark debate among opinionated technologists. There are certainly a number of choices available all of which have their own strengths and weaknesses. There are a number of things to consider as you select a tool.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Before we get into any of the specifics, I want to make it clear that the &amp;quot;right&amp;quot; answer to this question is a simple, but emphatic &amp;quot;yes!&amp;quot; Yes, you should be using a tool that allows you to manage your infrastructure as code. That tool should NOT be a server.txt file that you keep on the machine that documents the installation, set-up, and configuration changes you&amp;#39;ve made. Moving that text to somewhere other than the local server is a step in the right direction but isn&amp;#39;t really the answer. Moving the server.txt file to your corporate wiki is going to suck just as bad.&lt;/p&gt;

&lt;p&gt;I think Mark Imbriaco summed it up quite nicely in 140 characters or less:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Pro-tip: Nobody gives a shit about your opinion of Chef vs. Puppet. Seriously. Just fucking stop it already. #usewhatworksforyou&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As you consider which tool is right for you, you&amp;#39;ll need to consider a number of questions. I think of these as the WIIFs, or &amp;quot;what&amp;#39;s in it for...&amp;quot; questions:&lt;/p&gt;

&lt;h3 id=&quot;wiifm---what&amp;#39;s-in-it-for-me&quot;&gt;WIIFM - What&amp;#39;s in it for me&lt;/h3&gt;

&lt;p&gt;You&amp;#39;re going to want a tool that you&amp;#39;re happy working with. You&amp;#39;re going to make an investment in this tool. You&amp;#39;ll need to learn to be proficient with the tool, master it, and use it in your everyday workflow. Pick something that you&amp;#39;ll be happy working with for some time.&lt;/p&gt;

&lt;h3 id=&quot;wiifc---what&amp;#39;s-in-it-for-my-customers&quot;&gt;WIIFC - What&amp;#39;s in it for my customers&lt;/h3&gt;

&lt;p&gt;It&amp;#39;s highly unlikely that your customers know or care anything about how your infrastructure was built, provisioned, and managed. Why should they have any say about which tool you pick? Your customers are keenly interested in the services or products you offer. They also care about things like performance, availability, and how quickly you recover from an issue or outage. If they don&amp;#39;t care about these things, they&amp;#39;ll likely not be your customers for long. As you grow your business, you&amp;#39;ll want to have more time for delivering value to customers. Spend less time building, provisioning, upgrading, and repairing your infrastructure.&lt;/p&gt;

&lt;h3 id=&quot;wiifb---what&amp;#39;s-in-it-for-my-business&quot;&gt;WIIFB - What&amp;#39;s in it for my business&lt;/h3&gt;

&lt;p&gt;You may be the only one who has to build and manage the infrastructure in your company but it&amp;#39;s likely you&amp;#39;ll eventually move beyond a technology team of one. As your technology team grows, you&amp;#39;ll want to include everyone in the process of managing your infrastructure. This includes the people you might not think of as typically having a say in the infrastructure: developers, quality assurance engineers, etc. You do not want to be the only person in your company who knows how to manage the infrastructure and use the tools you&amp;#39;ve selected. Sure, it gives you a false sense of job security and feeds into your hero-complex but you need to be able to pass the on-call baton to someone else. Cost may also be a factor to consider when selecting a solution although it&amp;#39;s likely it&amp;#39;s more of a data-point than selection criteria, given the solutions that are on the market.&lt;/p&gt;

&lt;p&gt;I cannot tell you which tool is right for you. There are many factors including the ones I&amp;#39;ve listed above. I have some experience with both Puppet and Chef. At &lt;a href=&quot;http://www.customink.com&quot;&gt;CustomInk&lt;/a&gt;, we decided to switch to Chef after using Puppet for about two years.&lt;/p&gt;

&lt;h2 id=&quot;why-did-we-switch?&quot;&gt;Why did we switch?&lt;/h2&gt;

&lt;h3 id=&quot;we&amp;#39;re-a-rails-shop&quot;&gt;We&amp;#39;re a Rails shop&lt;/h3&gt;

&lt;p&gt;CustomInk is a Ruby on Rails shop and has been for many years. Being a Rails shop helped push us towards Chef in two ways. As a Rails shop, we suffer a bit from from the stereotypical &amp;quot;newer and shinier is better&amp;quot; syndrome that many people feel ails the Rails community. As a Rails shop, the domain-specific language (DSL) of Chef is a more comfortable way for us to work. Everyone on the technology team can easily understand the code.&lt;/p&gt;

&lt;h3 id=&quot;we-started-with-puppet&quot;&gt;We started with Puppet&lt;/h3&gt;

&lt;p&gt;We started with Puppet so, naturally, that&amp;#39;s the one we switched from. Puppet was, and actually still is, working well for us. However, we found that working in Puppet was going a bit slower than we&amp;#39;d like. Also, as we started learning more about Chef we started to see how we&amp;#39;d be able to quickly benefit from some of the features it offers. To be fair, we were comparing the Puppet we were using (0.24.x) to the latest (at the time) version of Chef (0.9.x). There may well have been ways to do the things we wanted with Puppet but we weren&amp;#39;t. Chef was intriguing and it looked like we&amp;#39;d be able to get more from it. Instead of working to refactor our Puppet and get smarter with how to use it, we went with Chef.&lt;/p&gt;

&lt;h3 id=&quot;search&quot;&gt;Search&lt;/h3&gt;

&lt;p&gt;Chef&amp;#39;s ability to search our environment and use that information at run time is very appealing. The ability for us to define a database.yml template that can have the &amp;quot;host&amp;quot; value populated at runtime based on which host is currently the primary database server is great. Using search in our capistrano recipes to determine where the code should be deployed is a huge win.&lt;/p&gt;

&lt;h3 id=&quot;knife&quot;&gt;Knife&lt;/h3&gt;

&lt;p&gt;Knife is Chef&amp;#39;s powerful command line interface. There are many things you can do with knife, most of which fall outside of the scope of this article. Knife allows you to interact with your entire infrastructure and Chef code base. Use knife to bootstrap a server, build the scaffolding for a new cookbook, or apply a role to a set of nodes in your environment. You can use knife ssh to execute commands on any number of nodes in your environment. knife ssh + search is a very powerful combination. &amp;quot;Run this command on all nodes with role X.&amp;quot;&lt;/p&gt;

&lt;h3 id=&quot;dependency-management&quot;&gt;Dependency Management&lt;/h3&gt;

&lt;p&gt;We found that defining dependencies in Puppet was overly verbose and cumbersome. With Chef, order matters and we could rest assured that dependencies would be met if we specified them in the proper order.&lt;/p&gt;

&lt;h3 id=&quot;strong-community&quot;&gt;Strong Community&lt;/h3&gt;

&lt;p&gt;OpsCode has done a great job of keeping up a strong community. The community.opscode.com site, where hundreds of cookbooks are shared, is a great way to get started. OpsCode has also hosted numerous webinars, publishes all of their training material, and makes it very easy to contribute patches. Frankly, I don&amp;#39;t have any experience with this in the Puppet world. However, my lack of experience with this in the Puppet world is likely attributed simply to the way my development habits have changed over time. At CustomInk, we&amp;#39;ve been able to submit patches to chef, a number of cookbooks, and have also published some of our own cookbooks.&lt;/p&gt;

&lt;h3 id=&quot;developer-happiness&quot;&gt;Developer Happiness&lt;/h3&gt;

&lt;p&gt;As I mentioned previously, the DSL with Chef is much more comfortable than that of Puppet. The mental model and workflow suit us. I find that the time I spend working in Chef is when I feel most productive and happy.&lt;/p&gt;

&lt;p&gt;I often wonder if the reason Chef is the right tool is because it&amp;#39;s the second one we&amp;#39;ve used. Coming to infrastructure as code includes a learning curve. I feel that we&amp;#39;re better Chef developers because we learned from our experience with Puppet. Some may even agree that Chef&amp;#39;s a better tool because the developers of Chef learned from their experience with Puppet.&lt;/p&gt;

&lt;h3 id=&quot;a-note-for-projects-that-are-just-getting-started&quot;&gt;A note for projects that are just getting started&lt;/h3&gt;

&lt;p&gt;If your project is just getting started, the best choice for you is probably not to use any of the configuration management tools that allow you to manage your infrastructure as code. You should stay focused exclusively on delivering value to your customers. It&amp;#39;s likely that the best solution for you is &lt;a href=&quot;http://www.heroku.com/&quot;&gt;Heroku&lt;/a&gt;. Sure, Heroku puts some constraints on how you build your app, but they&amp;#39;re a good way for you to think creatively. You can, and should, delay your choice of tools until you&amp;#39;re ready to spin up your first server.&lt;/p&gt;

&lt;h2 id=&quot;tl;dr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;If the question is &amp;quot;Chef or Puppet?&amp;quot;, the answer is &amp;quot;Yes.&amp;quot; You need to manage you infrastructure as code&lt;/li&gt;
&lt;li&gt;Search, knife, dependency management, community, and developer happiness were the key reasons we switched&lt;/li&gt;
&lt;li&gt;Chef is the right tool for us and it might be the right one for you&lt;/li&gt;
&lt;li&gt;If you&amp;#39;re new to the idea of &amp;quot;Infrastructure as Code&amp;quot;, understand that there&amp;#39;s a learning curve but your efforts will be rewarded&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Did you have to make a similar choice? What were some of the deciding factors? Which tool or framework did you end up with?&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;sub&gt;Reposted from &lt;a href=&quot;http://nathenharvey.com/blog/2011/11/21/why-we-chose-chef-over-puppet-at-customink/&quot;&gt;Nathen Harvey&amp;#39;s blog&lt;/a&gt;.&lt;/sub&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 21 Nov 2011 03:29:00 -0500</pubDate>
        <link>http://technology.customink.com//blog/2011/11/21/why-we-chose-chef-over-puppet-at-customink</link>
        <guid isPermaLink="true">http://technology.customink.com//blog/2011/11/21/why-we-chose-chef-over-puppet-at-customink</guid>
      </item>
    
      <item>
        <title>Testing mod_rewrite and apache redirects</title>
        <description>&lt;p&gt;At &lt;a href=&quot;http://www.customink.com&quot;&gt;CustomInk&lt;/a&gt;, we recently migrated from mongrel to Passenger for our Ruby on Rails website. This migration included a full rewrite of our apache configuration files.&lt;/p&gt;

&lt;p&gt;With over 500 redirect and rewrite rules in place I needed a way to ensure my copy-n-paste skills were up to snuff and that we didn&amp;#39;t loose any redirects along the way.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;In my search for help, I found a &lt;a href=&quot;http://www.viget.com/extend/test-drive-mod-rewrite-rules-with-testunit/&quot;&gt;blog post by Patrick Reagan from Viget labs&lt;/a&gt; that described a method for writing tests that will verify all the rewrite rules and redirects. Patrick&amp;#39;s ideas were packaged up into a gem and available on &lt;a href=&quot;http://github.com/eightbitraptor/http_redirect_test&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I can now write up tests like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;should_redirect&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/cink/ideas/ideas.jsp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:to&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/inspiration/&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So now I can to some TDC (test-driven configuration) whenever I get a request for a new redirect.&lt;/p&gt;

&lt;p&gt;What other methods have you used to test your rewrite rules?&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;sub&gt;Reposted from &lt;a href=&quot;http://nathenharvey.com/blog/2010/07/16/testing-mod-rewrite-and-apache-redirects/&quot;&gt;Nathen Harvey&amp;#39;s blog&lt;/a&gt;.&lt;/sub&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 16 Jul 2010 09:00:00 -0400</pubDate>
        <link>http://technology.customink.com//blog/2010/07/16/testing-mod-rewrite-and-apache-redirects</link>
        <guid isPermaLink="true">http://technology.customink.com//blog/2010/07/16/testing-mod-rewrite-and-apache-redirects</guid>
      </item>
    
  </channel>
</rss>
